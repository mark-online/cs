// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "building_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // building_t
  //

  building_t::
  building_t ()
  : ::xml_schema::type (),
    building_code_ (this),
    building_icon_ (this),
    anchor_owner_ (this),
    modeling_radius_size_ (this),
    check_building_code_1_ (this),
    check_distance_1_ (this),
    check_building_code_2_ (this),
    check_distance_2_ (this),
    cool_time_ (this),
    dominon_type_ (this),
    is_mark_map_ (this),
    map_mark_icon_ (this),
    modeling_name_ (this),
    foundation_effect_ (this),
    foundation_health_point_ (this),
    foundation_regist_ (this),
    foundation_live_sec_ (this),
    inventory_count_ (this),
    building_materials_1_ (this),
    building_materials_count_1_ (this),
    building_materials_2_ (this),
    building_materials_count_2_ (this),
    building_materials_3_ (this),
    building_materials_count_3_ (this),
    building_materials_4_ (this),
    building_materials_count_4_ (this),
    building_materials_5_ (this),
    building_materials_count_5_ (this),
    build_animation_ (this),
    build_sec_ (this),
    build_effect_ (this),
    broken_animation_ (this),
    broken_effect_ (this),
    complete_modeling_ (this),
    complete_effect_ (this),
    complete_health_point_ (this),
    complete_regist_ (this),
    limit_active_sec_ (this),
    active_animation_ (this),
    active_effect_ (this),
    inative_animation_ (this),
    inactive_effect_ (this),
    consume_sec_1_ (this),
    consume_item_code_1_ (this),
    consume_item_count_1_ (this),
    consume_sec_2_ (this),
    consume_item_code_2_ (this),
    consume_item_count_2_ (this),
    consume_sec_3_ (this),
    consume_item_code_3_ (this),
    consume_item_count_3_ (this),
    so_skill_code_1_ (this),
    so_skill_cast_type_1_ (this),
    auto_sec_1_ (this),
    so_skill_code_2_ (this),
    so_skill_cast_type_2_ (this),
    auto_sec_2_ (this),
    so_skill_code_3_ (this),
    so_skill_cast_type_3_ (this),
    auto_sec_3_ (this),
    produce_resources_code_ (this),
    select_produce_resources_code_ (this),
    select_produce_count_ (this),
    produce_special_commodity_code_ (this),
    produce_entrust_count_ (this),
    deal_entrust_count_ (this),
    mercenary_inventory_count_ (this),
    production_inventory_count_ (this),
    select_production_inventory_count_ (this),
    cash_invincible_min_ (this),
    cash_invincible_item_code_ (this),
    cash_invincible_item_count_ (this),
    free_invincible_min_ (this),
    free_invincible_item_code_1_ (this),
    free_invincible_item_count_1_ (this),
    free_invincible_item_code_2_ (this),
    free_invincible_item_count_2_ (this),
    free_invincible_item_code_3_ (this),
    free_invincible_item_count_3_ (this),
    can_destory_ (this),
    invincible_cooltime_sec_ (this),
    stack_count_ (this),
    sell_cost_type_ (this),
    sell_cost_ (this),
    buy_cost_type_1_ (this),
    buy_cost_1_ (this),
    buy_cost_type_2_ (this),
    buy_cost_2_ (this),
    function_script_1_ (this),
    function_script_2_ (this),
    function_script_3_ (this),
    mercenary_count_ (this),
    is_core_building_ (this)
  {
  }

  building_t::
  building_t (const building_code_type& building_code,
              const building_icon_type& building_icon,
              const anchor_owner_type& anchor_owner,
              const modeling_radius_size_type& modeling_radius_size,
              const check_building_code_1_type& check_building_code_1,
              const check_distance_1_type& check_distance_1,
              const check_building_code_2_type& check_building_code_2,
              const check_distance_2_type& check_distance_2,
              const cool_time_type& cool_time,
              const dominon_type_type& dominon_type,
              const is_mark_map_type& is_mark_map,
              const map_mark_icon_type& map_mark_icon,
              const modeling_name_type& modeling_name,
              const foundation_effect_type& foundation_effect,
              const foundation_health_point_type& foundation_health_point,
              const foundation_regist_type& foundation_regist,
              const foundation_live_sec_type& foundation_live_sec,
              const inventory_count_type& inventory_count,
              const building_materials_1_type& building_materials_1,
              const building_materials_count_1_type& building_materials_count_1,
              const building_materials_2_type& building_materials_2,
              const building_materials_count_2_type& building_materials_count_2,
              const building_materials_3_type& building_materials_3,
              const building_materials_count_3_type& building_materials_count_3,
              const building_materials_4_type& building_materials_4,
              const building_materials_count_4_type& building_materials_count_4,
              const building_materials_5_type& building_materials_5,
              const building_materials_count_5_type& building_materials_count_5,
              const build_animation_type& build_animation,
              const build_sec_type& build_sec,
              const build_effect_type& build_effect,
              const broken_animation_type& broken_animation,
              const broken_effect_type& broken_effect,
              const complete_modeling_type& complete_modeling,
              const complete_effect_type& complete_effect,
              const complete_health_point_type& complete_health_point,
              const complete_regist_type& complete_regist,
              const limit_active_sec_type& limit_active_sec,
              const active_animation_type& active_animation,
              const active_effect_type& active_effect,
              const inative_animation_type& inative_animation,
              const inactive_effect_type& inactive_effect,
              const consume_sec_1_type& consume_sec_1,
              const consume_item_code_1_type& consume_item_code_1,
              const consume_item_count_1_type& consume_item_count_1,
              const consume_sec_2_type& consume_sec_2,
              const consume_item_code_2_type& consume_item_code_2,
              const consume_item_count_2_type& consume_item_count_2,
              const consume_sec_3_type& consume_sec_3,
              const consume_item_code_3_type& consume_item_code_3,
              const consume_item_count_3_type& consume_item_count_3,
              const so_skill_code_1_type& so_skill_code_1,
              const so_skill_cast_type_1_type& so_skill_cast_type_1,
              const auto_sec_1_type& auto_sec_1,
              const so_skill_code_2_type& so_skill_code_2,
              const so_skill_cast_type_2_type& so_skill_cast_type_2,
              const auto_sec_2_type& auto_sec_2,
              const so_skill_code_3_type& so_skill_code_3,
              const so_skill_cast_type_3_type& so_skill_cast_type_3,
              const auto_sec_3_type& auto_sec_3,
              const produce_resources_code_type& produce_resources_code,
              const select_produce_resources_code_type& select_produce_resources_code,
              const select_produce_count_type& select_produce_count,
              const produce_special_commodity_code_type& produce_special_commodity_code,
              const produce_entrust_count_type& produce_entrust_count,
              const deal_entrust_count_type& deal_entrust_count,
              const mercenary_inventory_count_type& mercenary_inventory_count,
              const production_inventory_count_type& production_inventory_count,
              const select_production_inventory_count_type& select_production_inventory_count,
              const cash_invincible_min_type& cash_invincible_min,
              const cash_invincible_item_code_type& cash_invincible_item_code,
              const cash_invincible_item_count_type& cash_invincible_item_count,
              const free_invincible_min_type& free_invincible_min,
              const free_invincible_item_code_1_type& free_invincible_item_code_1,
              const free_invincible_item_count_1_type& free_invincible_item_count_1,
              const free_invincible_item_code_2_type& free_invincible_item_code_2,
              const free_invincible_item_count_2_type& free_invincible_item_count_2,
              const free_invincible_item_code_3_type& free_invincible_item_code_3,
              const free_invincible_item_count_3_type& free_invincible_item_count_3,
              const can_destory_type& can_destory,
              const invincible_cooltime_sec_type& invincible_cooltime_sec,
              const stack_count_type& stack_count,
              const sell_cost_type_type& sell_cost_type,
              const sell_cost_type1& sell_cost,
              const buy_cost_type_1_type& buy_cost_type_1,
              const buy_cost_1_type& buy_cost_1,
              const buy_cost_type_2_type& buy_cost_type_2,
              const buy_cost_2_type& buy_cost_2,
              const function_script_1_type& function_script_1,
              const function_script_2_type& function_script_2,
              const function_script_3_type& function_script_3,
              const mercenary_count_type& mercenary_count,
              const is_core_building_type& is_core_building)
  : ::xml_schema::type (),
    building_code_ (building_code, this),
    building_icon_ (building_icon, this),
    anchor_owner_ (anchor_owner, this),
    modeling_radius_size_ (modeling_radius_size, this),
    check_building_code_1_ (check_building_code_1, this),
    check_distance_1_ (check_distance_1, this),
    check_building_code_2_ (check_building_code_2, this),
    check_distance_2_ (check_distance_2, this),
    cool_time_ (cool_time, this),
    dominon_type_ (dominon_type, this),
    is_mark_map_ (is_mark_map, this),
    map_mark_icon_ (map_mark_icon, this),
    modeling_name_ (modeling_name, this),
    foundation_effect_ (foundation_effect, this),
    foundation_health_point_ (foundation_health_point, this),
    foundation_regist_ (foundation_regist, this),
    foundation_live_sec_ (foundation_live_sec, this),
    inventory_count_ (inventory_count, this),
    building_materials_1_ (building_materials_1, this),
    building_materials_count_1_ (building_materials_count_1, this),
    building_materials_2_ (building_materials_2, this),
    building_materials_count_2_ (building_materials_count_2, this),
    building_materials_3_ (building_materials_3, this),
    building_materials_count_3_ (building_materials_count_3, this),
    building_materials_4_ (building_materials_4, this),
    building_materials_count_4_ (building_materials_count_4, this),
    building_materials_5_ (building_materials_5, this),
    building_materials_count_5_ (building_materials_count_5, this),
    build_animation_ (build_animation, this),
    build_sec_ (build_sec, this),
    build_effect_ (build_effect, this),
    broken_animation_ (broken_animation, this),
    broken_effect_ (broken_effect, this),
    complete_modeling_ (complete_modeling, this),
    complete_effect_ (complete_effect, this),
    complete_health_point_ (complete_health_point, this),
    complete_regist_ (complete_regist, this),
    limit_active_sec_ (limit_active_sec, this),
    active_animation_ (active_animation, this),
    active_effect_ (active_effect, this),
    inative_animation_ (inative_animation, this),
    inactive_effect_ (inactive_effect, this),
    consume_sec_1_ (consume_sec_1, this),
    consume_item_code_1_ (consume_item_code_1, this),
    consume_item_count_1_ (consume_item_count_1, this),
    consume_sec_2_ (consume_sec_2, this),
    consume_item_code_2_ (consume_item_code_2, this),
    consume_item_count_2_ (consume_item_count_2, this),
    consume_sec_3_ (consume_sec_3, this),
    consume_item_code_3_ (consume_item_code_3, this),
    consume_item_count_3_ (consume_item_count_3, this),
    so_skill_code_1_ (so_skill_code_1, this),
    so_skill_cast_type_1_ (so_skill_cast_type_1, this),
    auto_sec_1_ (auto_sec_1, this),
    so_skill_code_2_ (so_skill_code_2, this),
    so_skill_cast_type_2_ (so_skill_cast_type_2, this),
    auto_sec_2_ (auto_sec_2, this),
    so_skill_code_3_ (so_skill_code_3, this),
    so_skill_cast_type_3_ (so_skill_cast_type_3, this),
    auto_sec_3_ (auto_sec_3, this),
    produce_resources_code_ (produce_resources_code, this),
    select_produce_resources_code_ (select_produce_resources_code, this),
    select_produce_count_ (select_produce_count, this),
    produce_special_commodity_code_ (produce_special_commodity_code, this),
    produce_entrust_count_ (produce_entrust_count, this),
    deal_entrust_count_ (deal_entrust_count, this),
    mercenary_inventory_count_ (mercenary_inventory_count, this),
    production_inventory_count_ (production_inventory_count, this),
    select_production_inventory_count_ (select_production_inventory_count, this),
    cash_invincible_min_ (cash_invincible_min, this),
    cash_invincible_item_code_ (cash_invincible_item_code, this),
    cash_invincible_item_count_ (cash_invincible_item_count, this),
    free_invincible_min_ (free_invincible_min, this),
    free_invincible_item_code_1_ (free_invincible_item_code_1, this),
    free_invincible_item_count_1_ (free_invincible_item_count_1, this),
    free_invincible_item_code_2_ (free_invincible_item_code_2, this),
    free_invincible_item_count_2_ (free_invincible_item_count_2, this),
    free_invincible_item_code_3_ (free_invincible_item_code_3, this),
    free_invincible_item_count_3_ (free_invincible_item_count_3, this),
    can_destory_ (can_destory, this),
    invincible_cooltime_sec_ (invincible_cooltime_sec, this),
    stack_count_ (stack_count, this),
    sell_cost_type_ (sell_cost_type, this),
    sell_cost_ (sell_cost, this),
    buy_cost_type_1_ (buy_cost_type_1, this),
    buy_cost_1_ (buy_cost_1, this),
    buy_cost_type_2_ (buy_cost_type_2, this),
    buy_cost_2_ (buy_cost_2, this),
    function_script_1_ (function_script_1, this),
    function_script_2_ (function_script_2, this),
    function_script_3_ (function_script_3, this),
    mercenary_count_ (mercenary_count, this),
    is_core_building_ (is_core_building, this)
  {
  }

  building_t::
  building_t (const building_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    building_code_ (x.building_code_, f, this),
    building_icon_ (x.building_icon_, f, this),
    anchor_owner_ (x.anchor_owner_, f, this),
    modeling_radius_size_ (x.modeling_radius_size_, f, this),
    check_building_code_1_ (x.check_building_code_1_, f, this),
    check_distance_1_ (x.check_distance_1_, f, this),
    check_building_code_2_ (x.check_building_code_2_, f, this),
    check_distance_2_ (x.check_distance_2_, f, this),
    cool_time_ (x.cool_time_, f, this),
    dominon_type_ (x.dominon_type_, f, this),
    is_mark_map_ (x.is_mark_map_, f, this),
    map_mark_icon_ (x.map_mark_icon_, f, this),
    modeling_name_ (x.modeling_name_, f, this),
    foundation_effect_ (x.foundation_effect_, f, this),
    foundation_health_point_ (x.foundation_health_point_, f, this),
    foundation_regist_ (x.foundation_regist_, f, this),
    foundation_live_sec_ (x.foundation_live_sec_, f, this),
    inventory_count_ (x.inventory_count_, f, this),
    building_materials_1_ (x.building_materials_1_, f, this),
    building_materials_count_1_ (x.building_materials_count_1_, f, this),
    building_materials_2_ (x.building_materials_2_, f, this),
    building_materials_count_2_ (x.building_materials_count_2_, f, this),
    building_materials_3_ (x.building_materials_3_, f, this),
    building_materials_count_3_ (x.building_materials_count_3_, f, this),
    building_materials_4_ (x.building_materials_4_, f, this),
    building_materials_count_4_ (x.building_materials_count_4_, f, this),
    building_materials_5_ (x.building_materials_5_, f, this),
    building_materials_count_5_ (x.building_materials_count_5_, f, this),
    build_animation_ (x.build_animation_, f, this),
    build_sec_ (x.build_sec_, f, this),
    build_effect_ (x.build_effect_, f, this),
    broken_animation_ (x.broken_animation_, f, this),
    broken_effect_ (x.broken_effect_, f, this),
    complete_modeling_ (x.complete_modeling_, f, this),
    complete_effect_ (x.complete_effect_, f, this),
    complete_health_point_ (x.complete_health_point_, f, this),
    complete_regist_ (x.complete_regist_, f, this),
    limit_active_sec_ (x.limit_active_sec_, f, this),
    active_animation_ (x.active_animation_, f, this),
    active_effect_ (x.active_effect_, f, this),
    inative_animation_ (x.inative_animation_, f, this),
    inactive_effect_ (x.inactive_effect_, f, this),
    consume_sec_1_ (x.consume_sec_1_, f, this),
    consume_item_code_1_ (x.consume_item_code_1_, f, this),
    consume_item_count_1_ (x.consume_item_count_1_, f, this),
    consume_sec_2_ (x.consume_sec_2_, f, this),
    consume_item_code_2_ (x.consume_item_code_2_, f, this),
    consume_item_count_2_ (x.consume_item_count_2_, f, this),
    consume_sec_3_ (x.consume_sec_3_, f, this),
    consume_item_code_3_ (x.consume_item_code_3_, f, this),
    consume_item_count_3_ (x.consume_item_count_3_, f, this),
    so_skill_code_1_ (x.so_skill_code_1_, f, this),
    so_skill_cast_type_1_ (x.so_skill_cast_type_1_, f, this),
    auto_sec_1_ (x.auto_sec_1_, f, this),
    so_skill_code_2_ (x.so_skill_code_2_, f, this),
    so_skill_cast_type_2_ (x.so_skill_cast_type_2_, f, this),
    auto_sec_2_ (x.auto_sec_2_, f, this),
    so_skill_code_3_ (x.so_skill_code_3_, f, this),
    so_skill_cast_type_3_ (x.so_skill_cast_type_3_, f, this),
    auto_sec_3_ (x.auto_sec_3_, f, this),
    produce_resources_code_ (x.produce_resources_code_, f, this),
    select_produce_resources_code_ (x.select_produce_resources_code_, f, this),
    select_produce_count_ (x.select_produce_count_, f, this),
    produce_special_commodity_code_ (x.produce_special_commodity_code_, f, this),
    produce_entrust_count_ (x.produce_entrust_count_, f, this),
    deal_entrust_count_ (x.deal_entrust_count_, f, this),
    mercenary_inventory_count_ (x.mercenary_inventory_count_, f, this),
    production_inventory_count_ (x.production_inventory_count_, f, this),
    select_production_inventory_count_ (x.select_production_inventory_count_, f, this),
    cash_invincible_min_ (x.cash_invincible_min_, f, this),
    cash_invincible_item_code_ (x.cash_invincible_item_code_, f, this),
    cash_invincible_item_count_ (x.cash_invincible_item_count_, f, this),
    free_invincible_min_ (x.free_invincible_min_, f, this),
    free_invincible_item_code_1_ (x.free_invincible_item_code_1_, f, this),
    free_invincible_item_count_1_ (x.free_invincible_item_count_1_, f, this),
    free_invincible_item_code_2_ (x.free_invincible_item_code_2_, f, this),
    free_invincible_item_count_2_ (x.free_invincible_item_count_2_, f, this),
    free_invincible_item_code_3_ (x.free_invincible_item_code_3_, f, this),
    free_invincible_item_count_3_ (x.free_invincible_item_count_3_, f, this),
    can_destory_ (x.can_destory_, f, this),
    invincible_cooltime_sec_ (x.invincible_cooltime_sec_, f, this),
    stack_count_ (x.stack_count_, f, this),
    sell_cost_type_ (x.sell_cost_type_, f, this),
    sell_cost_ (x.sell_cost_, f, this),
    buy_cost_type_1_ (x.buy_cost_type_1_, f, this),
    buy_cost_1_ (x.buy_cost_1_, f, this),
    buy_cost_type_2_ (x.buy_cost_type_2_, f, this),
    buy_cost_2_ (x.buy_cost_2_, f, this),
    function_script_1_ (x.function_script_1_, f, this),
    function_script_2_ (x.function_script_2_, f, this),
    function_script_3_ (x.function_script_3_, f, this),
    mercenary_count_ (x.mercenary_count_, f, this),
    is_core_building_ (x.is_core_building_, f, this)
  {
  }

  building_t::
  building_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    building_code_ (this),
    building_icon_ (this),
    anchor_owner_ (this),
    modeling_radius_size_ (this),
    check_building_code_1_ (this),
    check_distance_1_ (this),
    check_building_code_2_ (this),
    check_distance_2_ (this),
    cool_time_ (this),
    dominon_type_ (this),
    is_mark_map_ (this),
    map_mark_icon_ (this),
    modeling_name_ (this),
    foundation_effect_ (this),
    foundation_health_point_ (this),
    foundation_regist_ (this),
    foundation_live_sec_ (this),
    inventory_count_ (this),
    building_materials_1_ (this),
    building_materials_count_1_ (this),
    building_materials_2_ (this),
    building_materials_count_2_ (this),
    building_materials_3_ (this),
    building_materials_count_3_ (this),
    building_materials_4_ (this),
    building_materials_count_4_ (this),
    building_materials_5_ (this),
    building_materials_count_5_ (this),
    build_animation_ (this),
    build_sec_ (this),
    build_effect_ (this),
    broken_animation_ (this),
    broken_effect_ (this),
    complete_modeling_ (this),
    complete_effect_ (this),
    complete_health_point_ (this),
    complete_regist_ (this),
    limit_active_sec_ (this),
    active_animation_ (this),
    active_effect_ (this),
    inative_animation_ (this),
    inactive_effect_ (this),
    consume_sec_1_ (this),
    consume_item_code_1_ (this),
    consume_item_count_1_ (this),
    consume_sec_2_ (this),
    consume_item_code_2_ (this),
    consume_item_count_2_ (this),
    consume_sec_3_ (this),
    consume_item_code_3_ (this),
    consume_item_count_3_ (this),
    so_skill_code_1_ (this),
    so_skill_cast_type_1_ (this),
    auto_sec_1_ (this),
    so_skill_code_2_ (this),
    so_skill_cast_type_2_ (this),
    auto_sec_2_ (this),
    so_skill_code_3_ (this),
    so_skill_cast_type_3_ (this),
    auto_sec_3_ (this),
    produce_resources_code_ (this),
    select_produce_resources_code_ (this),
    select_produce_count_ (this),
    produce_special_commodity_code_ (this),
    produce_entrust_count_ (this),
    deal_entrust_count_ (this),
    mercenary_inventory_count_ (this),
    production_inventory_count_ (this),
    select_production_inventory_count_ (this),
    cash_invincible_min_ (this),
    cash_invincible_item_code_ (this),
    cash_invincible_item_count_ (this),
    free_invincible_min_ (this),
    free_invincible_item_code_1_ (this),
    free_invincible_item_count_1_ (this),
    free_invincible_item_code_2_ (this),
    free_invincible_item_count_2_ (this),
    free_invincible_item_code_3_ (this),
    free_invincible_item_count_3_ (this),
    can_destory_ (this),
    invincible_cooltime_sec_ (this),
    stack_count_ (this),
    sell_cost_type_ (this),
    sell_cost_ (this),
    buy_cost_type_1_ (this),
    buy_cost_1_ (this),
    buy_cost_type_2_ (this),
    buy_cost_2_ (this),
    function_script_1_ (this),
    function_script_2_ (this),
    function_script_3_ (this),
    mercenary_count_ (this),
    is_core_building_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void building_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"building_code" && n.namespace_ ().empty ())
      {
        this->building_code_.set (building_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"building_icon" && n.namespace_ ().empty ())
      {
        this->building_icon_.set (building_icon_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"anchor_owner" && n.namespace_ ().empty ())
      {
        this->anchor_owner_.set (anchor_owner_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"modeling_radius_size" && n.namespace_ ().empty ())
      {
        this->modeling_radius_size_.set (modeling_radius_size_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"check_building_code_1" && n.namespace_ ().empty ())
      {
        this->check_building_code_1_.set (check_building_code_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"check_distance_1" && n.namespace_ ().empty ())
      {
        this->check_distance_1_.set (check_distance_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"check_building_code_2" && n.namespace_ ().empty ())
      {
        this->check_building_code_2_.set (check_building_code_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"check_distance_2" && n.namespace_ ().empty ())
      {
        this->check_distance_2_.set (check_distance_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"cool_time" && n.namespace_ ().empty ())
      {
        this->cool_time_.set (cool_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"dominon_type" && n.namespace_ ().empty ())
      {
        this->dominon_type_.set (dominon_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"is_mark_map" && n.namespace_ ().empty ())
      {
        this->is_mark_map_.set (is_mark_map_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"map_mark_icon" && n.namespace_ ().empty ())
      {
        this->map_mark_icon_.set (map_mark_icon_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"modeling_name" && n.namespace_ ().empty ())
      {
        this->modeling_name_.set (modeling_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"foundation_effect" && n.namespace_ ().empty ())
      {
        this->foundation_effect_.set (foundation_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"foundation_health_point" && n.namespace_ ().empty ())
      {
        this->foundation_health_point_.set (foundation_health_point_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"foundation_regist" && n.namespace_ ().empty ())
      {
        this->foundation_regist_.set (foundation_regist_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"foundation_live_sec" && n.namespace_ ().empty ())
      {
        this->foundation_live_sec_.set (foundation_live_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"inventory_count" && n.namespace_ ().empty ())
      {
        this->inventory_count_.set (inventory_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"building_materials_1" && n.namespace_ ().empty ())
      {
        this->building_materials_1_.set (building_materials_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"building_materials_count_1" && n.namespace_ ().empty ())
      {
        this->building_materials_count_1_.set (building_materials_count_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"building_materials_2" && n.namespace_ ().empty ())
      {
        this->building_materials_2_.set (building_materials_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"building_materials_count_2" && n.namespace_ ().empty ())
      {
        this->building_materials_count_2_.set (building_materials_count_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"building_materials_3" && n.namespace_ ().empty ())
      {
        this->building_materials_3_.set (building_materials_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"building_materials_count_3" && n.namespace_ ().empty ())
      {
        this->building_materials_count_3_.set (building_materials_count_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"building_materials_4" && n.namespace_ ().empty ())
      {
        this->building_materials_4_.set (building_materials_4_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"building_materials_count_4" && n.namespace_ ().empty ())
      {
        this->building_materials_count_4_.set (building_materials_count_4_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"building_materials_5" && n.namespace_ ().empty ())
      {
        this->building_materials_5_.set (building_materials_5_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"building_materials_count_5" && n.namespace_ ().empty ())
      {
        this->building_materials_count_5_.set (building_materials_count_5_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"build_animation" && n.namespace_ ().empty ())
      {
        this->build_animation_.set (build_animation_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"build_sec" && n.namespace_ ().empty ())
      {
        this->build_sec_.set (build_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"build_effect" && n.namespace_ ().empty ())
      {
        this->build_effect_.set (build_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"broken_animation" && n.namespace_ ().empty ())
      {
        this->broken_animation_.set (broken_animation_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"broken_effect" && n.namespace_ ().empty ())
      {
        this->broken_effect_.set (broken_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"complete_modeling" && n.namespace_ ().empty ())
      {
        this->complete_modeling_.set (complete_modeling_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"complete_effect" && n.namespace_ ().empty ())
      {
        this->complete_effect_.set (complete_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"complete_health_point" && n.namespace_ ().empty ())
      {
        this->complete_health_point_.set (complete_health_point_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"complete_regist" && n.namespace_ ().empty ())
      {
        this->complete_regist_.set (complete_regist_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"limit_active_sec" && n.namespace_ ().empty ())
      {
        this->limit_active_sec_.set (limit_active_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"active_animation" && n.namespace_ ().empty ())
      {
        this->active_animation_.set (active_animation_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"active_effect" && n.namespace_ ().empty ())
      {
        this->active_effect_.set (active_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"inative_animation" && n.namespace_ ().empty ())
      {
        this->inative_animation_.set (inative_animation_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"inactive_effect" && n.namespace_ ().empty ())
      {
        this->inactive_effect_.set (inactive_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"consume_sec_1" && n.namespace_ ().empty ())
      {
        this->consume_sec_1_.set (consume_sec_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"consume_item_code_1" && n.namespace_ ().empty ())
      {
        this->consume_item_code_1_.set (consume_item_code_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"consume_item_count_1" && n.namespace_ ().empty ())
      {
        this->consume_item_count_1_.set (consume_item_count_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"consume_sec_2" && n.namespace_ ().empty ())
      {
        this->consume_sec_2_.set (consume_sec_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"consume_item_code_2" && n.namespace_ ().empty ())
      {
        this->consume_item_code_2_.set (consume_item_code_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"consume_item_count_2" && n.namespace_ ().empty ())
      {
        this->consume_item_count_2_.set (consume_item_count_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"consume_sec_3" && n.namespace_ ().empty ())
      {
        this->consume_sec_3_.set (consume_sec_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"consume_item_code_3" && n.namespace_ ().empty ())
      {
        this->consume_item_code_3_.set (consume_item_code_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"consume_item_count_3" && n.namespace_ ().empty ())
      {
        this->consume_item_count_3_.set (consume_item_count_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"so_skill_code_1" && n.namespace_ ().empty ())
      {
        this->so_skill_code_1_.set (so_skill_code_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"so_skill_cast_type_1" && n.namespace_ ().empty ())
      {
        this->so_skill_cast_type_1_.set (so_skill_cast_type_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"auto_sec_1" && n.namespace_ ().empty ())
      {
        this->auto_sec_1_.set (auto_sec_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"so_skill_code_2" && n.namespace_ ().empty ())
      {
        this->so_skill_code_2_.set (so_skill_code_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"so_skill_cast_type_2" && n.namespace_ ().empty ())
      {
        this->so_skill_cast_type_2_.set (so_skill_cast_type_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"auto_sec_2" && n.namespace_ ().empty ())
      {
        this->auto_sec_2_.set (auto_sec_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"so_skill_code_3" && n.namespace_ ().empty ())
      {
        this->so_skill_code_3_.set (so_skill_code_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"so_skill_cast_type_3" && n.namespace_ ().empty ())
      {
        this->so_skill_cast_type_3_.set (so_skill_cast_type_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"auto_sec_3" && n.namespace_ ().empty ())
      {
        this->auto_sec_3_.set (auto_sec_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"produce_resources_code" && n.namespace_ ().empty ())
      {
        this->produce_resources_code_.set (produce_resources_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_produce_resources_code" && n.namespace_ ().empty ())
      {
        this->select_produce_resources_code_.set (select_produce_resources_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_produce_count" && n.namespace_ ().empty ())
      {
        this->select_produce_count_.set (select_produce_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"produce_special_commodity_code" && n.namespace_ ().empty ())
      {
        this->produce_special_commodity_code_.set (produce_special_commodity_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"produce_entrust_count" && n.namespace_ ().empty ())
      {
        this->produce_entrust_count_.set (produce_entrust_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"deal_entrust_count" && n.namespace_ ().empty ())
      {
        this->deal_entrust_count_.set (deal_entrust_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"mercenary_inventory_count" && n.namespace_ ().empty ())
      {
        this->mercenary_inventory_count_.set (mercenary_inventory_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"production_inventory_count" && n.namespace_ ().empty ())
      {
        this->production_inventory_count_.set (production_inventory_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_production_inventory_count" && n.namespace_ ().empty ())
      {
        this->select_production_inventory_count_.set (select_production_inventory_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"cash_invincible_min" && n.namespace_ ().empty ())
      {
        this->cash_invincible_min_.set (cash_invincible_min_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"cash_invincible_item_code" && n.namespace_ ().empty ())
      {
        this->cash_invincible_item_code_.set (cash_invincible_item_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"cash_invincible_item_count" && n.namespace_ ().empty ())
      {
        this->cash_invincible_item_count_.set (cash_invincible_item_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"free_invincible_min" && n.namespace_ ().empty ())
      {
        this->free_invincible_min_.set (free_invincible_min_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"free_invincible_item_code_1" && n.namespace_ ().empty ())
      {
        this->free_invincible_item_code_1_.set (free_invincible_item_code_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"free_invincible_item_count_1" && n.namespace_ ().empty ())
      {
        this->free_invincible_item_count_1_.set (free_invincible_item_count_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"free_invincible_item_code_2" && n.namespace_ ().empty ())
      {
        this->free_invincible_item_code_2_.set (free_invincible_item_code_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"free_invincible_item_count_2" && n.namespace_ ().empty ())
      {
        this->free_invincible_item_count_2_.set (free_invincible_item_count_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"free_invincible_item_code_3" && n.namespace_ ().empty ())
      {
        this->free_invincible_item_code_3_.set (free_invincible_item_code_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"free_invincible_item_count_3" && n.namespace_ ().empty ())
      {
        this->free_invincible_item_count_3_.set (free_invincible_item_count_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"can_destory" && n.namespace_ ().empty ())
      {
        this->can_destory_.set (can_destory_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"invincible_cooltime_sec" && n.namespace_ ().empty ())
      {
        this->invincible_cooltime_sec_.set (invincible_cooltime_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"stack_count" && n.namespace_ ().empty ())
      {
        this->stack_count_.set (stack_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sell_cost_type" && n.namespace_ ().empty ())
      {
        this->sell_cost_type_.set (sell_cost_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sell_cost" && n.namespace_ ().empty ())
      {
        this->sell_cost_.set (sell_cost_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_type_1" && n.namespace_ ().empty ())
      {
        this->buy_cost_type_1_.set (buy_cost_type_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_1" && n.namespace_ ().empty ())
      {
        this->buy_cost_1_.set (buy_cost_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_type_2" && n.namespace_ ().empty ())
      {
        this->buy_cost_type_2_.set (buy_cost_type_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_2" && n.namespace_ ().empty ())
      {
        this->buy_cost_2_.set (buy_cost_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"function_script_1" && n.namespace_ ().empty ())
      {
        this->function_script_1_.set (function_script_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"function_script_2" && n.namespace_ ().empty ())
      {
        this->function_script_2_.set (function_script_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"function_script_3" && n.namespace_ ().empty ())
      {
        this->function_script_3_.set (function_script_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"mercenary_count" && n.namespace_ ().empty ())
      {
        this->mercenary_count_.set (mercenary_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"is_core_building" && n.namespace_ ().empty ())
      {
        this->is_core_building_.set (is_core_building_traits::create (i, f, this));
        continue;
      }
    }

    if (!building_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"building_code",
        L"");
    }

    if (!building_icon_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"building_icon",
        L"");
    }

    if (!anchor_owner_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"anchor_owner",
        L"");
    }

    if (!modeling_radius_size_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"modeling_radius_size",
        L"");
    }

    if (!check_building_code_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"check_building_code_1",
        L"");
    }

    if (!check_distance_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"check_distance_1",
        L"");
    }

    if (!check_building_code_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"check_building_code_2",
        L"");
    }

    if (!check_distance_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"check_distance_2",
        L"");
    }

    if (!cool_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"cool_time",
        L"");
    }

    if (!dominon_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"dominon_type",
        L"");
    }

    if (!is_mark_map_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"is_mark_map",
        L"");
    }

    if (!map_mark_icon_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"map_mark_icon",
        L"");
    }

    if (!modeling_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"modeling_name",
        L"");
    }

    if (!foundation_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"foundation_effect",
        L"");
    }

    if (!foundation_health_point_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"foundation_health_point",
        L"");
    }

    if (!foundation_regist_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"foundation_regist",
        L"");
    }

    if (!foundation_live_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"foundation_live_sec",
        L"");
    }

    if (!inventory_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"inventory_count",
        L"");
    }

    if (!building_materials_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"building_materials_1",
        L"");
    }

    if (!building_materials_count_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"building_materials_count_1",
        L"");
    }

    if (!building_materials_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"building_materials_2",
        L"");
    }

    if (!building_materials_count_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"building_materials_count_2",
        L"");
    }

    if (!building_materials_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"building_materials_3",
        L"");
    }

    if (!building_materials_count_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"building_materials_count_3",
        L"");
    }

    if (!building_materials_4_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"building_materials_4",
        L"");
    }

    if (!building_materials_count_4_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"building_materials_count_4",
        L"");
    }

    if (!building_materials_5_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"building_materials_5",
        L"");
    }

    if (!building_materials_count_5_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"building_materials_count_5",
        L"");
    }

    if (!build_animation_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"build_animation",
        L"");
    }

    if (!build_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"build_sec",
        L"");
    }

    if (!build_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"build_effect",
        L"");
    }

    if (!broken_animation_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"broken_animation",
        L"");
    }

    if (!broken_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"broken_effect",
        L"");
    }

    if (!complete_modeling_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"complete_modeling",
        L"");
    }

    if (!complete_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"complete_effect",
        L"");
    }

    if (!complete_health_point_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"complete_health_point",
        L"");
    }

    if (!complete_regist_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"complete_regist",
        L"");
    }

    if (!limit_active_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"limit_active_sec",
        L"");
    }

    if (!active_animation_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"active_animation",
        L"");
    }

    if (!active_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"active_effect",
        L"");
    }

    if (!inative_animation_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"inative_animation",
        L"");
    }

    if (!inactive_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"inactive_effect",
        L"");
    }

    if (!consume_sec_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"consume_sec_1",
        L"");
    }

    if (!consume_item_code_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"consume_item_code_1",
        L"");
    }

    if (!consume_item_count_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"consume_item_count_1",
        L"");
    }

    if (!consume_sec_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"consume_sec_2",
        L"");
    }

    if (!consume_item_code_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"consume_item_code_2",
        L"");
    }

    if (!consume_item_count_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"consume_item_count_2",
        L"");
    }

    if (!consume_sec_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"consume_sec_3",
        L"");
    }

    if (!consume_item_code_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"consume_item_code_3",
        L"");
    }

    if (!consume_item_count_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"consume_item_count_3",
        L"");
    }

    if (!so_skill_code_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"so_skill_code_1",
        L"");
    }

    if (!so_skill_cast_type_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"so_skill_cast_type_1",
        L"");
    }

    if (!auto_sec_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"auto_sec_1",
        L"");
    }

    if (!so_skill_code_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"so_skill_code_2",
        L"");
    }

    if (!so_skill_cast_type_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"so_skill_cast_type_2",
        L"");
    }

    if (!auto_sec_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"auto_sec_2",
        L"");
    }

    if (!so_skill_code_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"so_skill_code_3",
        L"");
    }

    if (!so_skill_cast_type_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"so_skill_cast_type_3",
        L"");
    }

    if (!auto_sec_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"auto_sec_3",
        L"");
    }

    if (!produce_resources_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"produce_resources_code",
        L"");
    }

    if (!select_produce_resources_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_produce_resources_code",
        L"");
    }

    if (!select_produce_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_produce_count",
        L"");
    }

    if (!produce_special_commodity_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"produce_special_commodity_code",
        L"");
    }

    if (!produce_entrust_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"produce_entrust_count",
        L"");
    }

    if (!deal_entrust_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"deal_entrust_count",
        L"");
    }

    if (!mercenary_inventory_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"mercenary_inventory_count",
        L"");
    }

    if (!production_inventory_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"production_inventory_count",
        L"");
    }

    if (!select_production_inventory_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_production_inventory_count",
        L"");
    }

    if (!cash_invincible_min_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"cash_invincible_min",
        L"");
    }

    if (!cash_invincible_item_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"cash_invincible_item_code",
        L"");
    }

    if (!cash_invincible_item_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"cash_invincible_item_count",
        L"");
    }

    if (!free_invincible_min_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"free_invincible_min",
        L"");
    }

    if (!free_invincible_item_code_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"free_invincible_item_code_1",
        L"");
    }

    if (!free_invincible_item_count_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"free_invincible_item_count_1",
        L"");
    }

    if (!free_invincible_item_code_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"free_invincible_item_code_2",
        L"");
    }

    if (!free_invincible_item_count_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"free_invincible_item_count_2",
        L"");
    }

    if (!free_invincible_item_code_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"free_invincible_item_code_3",
        L"");
    }

    if (!free_invincible_item_count_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"free_invincible_item_count_3",
        L"");
    }

    if (!can_destory_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"can_destory",
        L"");
    }

    if (!invincible_cooltime_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"invincible_cooltime_sec",
        L"");
    }

    if (!stack_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"stack_count",
        L"");
    }

    if (!sell_cost_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sell_cost_type",
        L"");
    }

    if (!sell_cost_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sell_cost",
        L"");
    }

    if (!buy_cost_type_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_type_1",
        L"");
    }

    if (!buy_cost_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_1",
        L"");
    }

    if (!buy_cost_type_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_type_2",
        L"");
    }

    if (!buy_cost_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_2",
        L"");
    }

    if (!function_script_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"function_script_1",
        L"");
    }

    if (!function_script_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"function_script_2",
        L"");
    }

    if (!function_script_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"function_script_3",
        L"");
    }

    if (!mercenary_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"mercenary_count",
        L"");
    }

    if (!is_core_building_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"is_core_building",
        L"");
    }
  }

  building_t* building_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class building_t (*this, f, c);
  }

  building_t& building_t::
  operator= (const building_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->building_code_ = x.building_code_;
      this->building_icon_ = x.building_icon_;
      this->anchor_owner_ = x.anchor_owner_;
      this->modeling_radius_size_ = x.modeling_radius_size_;
      this->check_building_code_1_ = x.check_building_code_1_;
      this->check_distance_1_ = x.check_distance_1_;
      this->check_building_code_2_ = x.check_building_code_2_;
      this->check_distance_2_ = x.check_distance_2_;
      this->cool_time_ = x.cool_time_;
      this->dominon_type_ = x.dominon_type_;
      this->is_mark_map_ = x.is_mark_map_;
      this->map_mark_icon_ = x.map_mark_icon_;
      this->modeling_name_ = x.modeling_name_;
      this->foundation_effect_ = x.foundation_effect_;
      this->foundation_health_point_ = x.foundation_health_point_;
      this->foundation_regist_ = x.foundation_regist_;
      this->foundation_live_sec_ = x.foundation_live_sec_;
      this->inventory_count_ = x.inventory_count_;
      this->building_materials_1_ = x.building_materials_1_;
      this->building_materials_count_1_ = x.building_materials_count_1_;
      this->building_materials_2_ = x.building_materials_2_;
      this->building_materials_count_2_ = x.building_materials_count_2_;
      this->building_materials_3_ = x.building_materials_3_;
      this->building_materials_count_3_ = x.building_materials_count_3_;
      this->building_materials_4_ = x.building_materials_4_;
      this->building_materials_count_4_ = x.building_materials_count_4_;
      this->building_materials_5_ = x.building_materials_5_;
      this->building_materials_count_5_ = x.building_materials_count_5_;
      this->build_animation_ = x.build_animation_;
      this->build_sec_ = x.build_sec_;
      this->build_effect_ = x.build_effect_;
      this->broken_animation_ = x.broken_animation_;
      this->broken_effect_ = x.broken_effect_;
      this->complete_modeling_ = x.complete_modeling_;
      this->complete_effect_ = x.complete_effect_;
      this->complete_health_point_ = x.complete_health_point_;
      this->complete_regist_ = x.complete_regist_;
      this->limit_active_sec_ = x.limit_active_sec_;
      this->active_animation_ = x.active_animation_;
      this->active_effect_ = x.active_effect_;
      this->inative_animation_ = x.inative_animation_;
      this->inactive_effect_ = x.inactive_effect_;
      this->consume_sec_1_ = x.consume_sec_1_;
      this->consume_item_code_1_ = x.consume_item_code_1_;
      this->consume_item_count_1_ = x.consume_item_count_1_;
      this->consume_sec_2_ = x.consume_sec_2_;
      this->consume_item_code_2_ = x.consume_item_code_2_;
      this->consume_item_count_2_ = x.consume_item_count_2_;
      this->consume_sec_3_ = x.consume_sec_3_;
      this->consume_item_code_3_ = x.consume_item_code_3_;
      this->consume_item_count_3_ = x.consume_item_count_3_;
      this->so_skill_code_1_ = x.so_skill_code_1_;
      this->so_skill_cast_type_1_ = x.so_skill_cast_type_1_;
      this->auto_sec_1_ = x.auto_sec_1_;
      this->so_skill_code_2_ = x.so_skill_code_2_;
      this->so_skill_cast_type_2_ = x.so_skill_cast_type_2_;
      this->auto_sec_2_ = x.auto_sec_2_;
      this->so_skill_code_3_ = x.so_skill_code_3_;
      this->so_skill_cast_type_3_ = x.so_skill_cast_type_3_;
      this->auto_sec_3_ = x.auto_sec_3_;
      this->produce_resources_code_ = x.produce_resources_code_;
      this->select_produce_resources_code_ = x.select_produce_resources_code_;
      this->select_produce_count_ = x.select_produce_count_;
      this->produce_special_commodity_code_ = x.produce_special_commodity_code_;
      this->produce_entrust_count_ = x.produce_entrust_count_;
      this->deal_entrust_count_ = x.deal_entrust_count_;
      this->mercenary_inventory_count_ = x.mercenary_inventory_count_;
      this->production_inventory_count_ = x.production_inventory_count_;
      this->select_production_inventory_count_ = x.select_production_inventory_count_;
      this->cash_invincible_min_ = x.cash_invincible_min_;
      this->cash_invincible_item_code_ = x.cash_invincible_item_code_;
      this->cash_invincible_item_count_ = x.cash_invincible_item_count_;
      this->free_invincible_min_ = x.free_invincible_min_;
      this->free_invincible_item_code_1_ = x.free_invincible_item_code_1_;
      this->free_invincible_item_count_1_ = x.free_invincible_item_count_1_;
      this->free_invincible_item_code_2_ = x.free_invincible_item_code_2_;
      this->free_invincible_item_count_2_ = x.free_invincible_item_count_2_;
      this->free_invincible_item_code_3_ = x.free_invincible_item_code_3_;
      this->free_invincible_item_count_3_ = x.free_invincible_item_count_3_;
      this->can_destory_ = x.can_destory_;
      this->invincible_cooltime_sec_ = x.invincible_cooltime_sec_;
      this->stack_count_ = x.stack_count_;
      this->sell_cost_type_ = x.sell_cost_type_;
      this->sell_cost_ = x.sell_cost_;
      this->buy_cost_type_1_ = x.buy_cost_type_1_;
      this->buy_cost_1_ = x.buy_cost_1_;
      this->buy_cost_type_2_ = x.buy_cost_type_2_;
      this->buy_cost_2_ = x.buy_cost_2_;
      this->function_script_1_ = x.function_script_1_;
      this->function_script_2_ = x.function_script_2_;
      this->function_script_3_ = x.function_script_3_;
      this->mercenary_count_ = x.mercenary_count_;
      this->is_core_building_ = x.is_core_building_;
    }

    return *this;
  }

  building_t::
  ~building_t ()
  {
  }

  // so_skill_cast_type_t
  //

  so_skill_cast_type_t::
  so_skill_cast_type_t ()
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > ()
  {
  }

  so_skill_cast_type_t::
  so_skill_cast_type_t (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (_xsd_unsigned_byte_base)
  {
  }

  so_skill_cast_type_t::
  so_skill_cast_type_t (const so_skill_cast_type_t& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (x, f, c)
  {
  }

  so_skill_cast_type_t::
  so_skill_cast_type_t (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (e, f, c)
  {
  }

  so_skill_cast_type_t::
  so_skill_cast_type_t (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (a, f, c)
  {
  }

  so_skill_cast_type_t::
  so_skill_cast_type_t (const ::std::wstring& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  so_skill_cast_type_t* so_skill_cast_type_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class so_skill_cast_type_t (*this, f, c);
  }

  so_skill_cast_type_t::
  ~so_skill_cast_type_t ()
  {
  }

  // building_table
  //

  building_table::
  building_table ()
  : ::xml_schema::type (),
    building_template_ (this)
  {
  }

  building_table::
  building_table (const building_table& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    building_template_ (x.building_template_, f, this)
  {
  }

  building_table::
  building_table (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    building_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void building_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // building_template
      //
      if (n.name () == L"building_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< building_template_type > r (
          building_template_traits::create (i, f, this));

        this->building_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  building_table* building_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class building_table (*this, f, c);
  }

  building_table& building_table::
  operator= (const building_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->building_template_ = x.building_template_;
    }

    return *this;
  }

  building_table::
  ~building_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (const ::std::wstring& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::building_table > (
      ::gdt::building_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (const ::std::wstring& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::building_table > (
      ::gdt::building_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (const ::std::wstring& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::building_table > (
      ::gdt::building_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::building_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::building_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::building_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::std::istream& is,
                   const ::std::wstring& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::building_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::std::istream& is,
                   const ::std::wstring& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::building_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::std::istream& is,
                   const ::std::wstring& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::building_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::building_table > (
      ::gdt::building_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::building_table > (
      ::gdt::building_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::building_table > (
      ::gdt::building_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::building_table > (
        ::gdt::building_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"building_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::building_table > r (
        ::xsd::cxx::tree::traits< ::gdt::building_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"building_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"building_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::building_table > r (
        ::xsd::cxx::tree::traits< ::gdt::building_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"building_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  building_table_ (::std::ostream& o,
                   const ::gdt::building_table& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::building_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  building_table_ (::std::ostream& o,
                   const ::gdt::building_table& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::building_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  building_table_ (::std::ostream& o,
                   const ::gdt::building_table& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::building_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  building_table_ (::xercesc::XMLFormatTarget& t,
                   const ::gdt::building_table& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::building_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  building_table_ (::xercesc::XMLFormatTarget& t,
                   const ::gdt::building_table& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::building_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  building_table_ (::xercesc::XMLFormatTarget& t,
                   const ::gdt::building_table& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::building_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  building_table_ (::xercesc::DOMDocument& d,
                   const ::gdt::building_table& s,
                   ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"building_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"building_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  building_table_ (const ::gdt::building_table& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"building_table",
        L"",
        m, f));

    ::gdt::building_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const building_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // building_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"building_code",
          e));

      a << i.building_code ();
    }

    // building_icon
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"building_icon",
          e));

      a << i.building_icon ();
    }

    // anchor_owner
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"anchor_owner",
          e));

      a << i.anchor_owner ();
    }

    // modeling_radius_size
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"modeling_radius_size",
          e));

      a << i.modeling_radius_size ();
    }

    // check_building_code_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"check_building_code_1",
          e));

      a << i.check_building_code_1 ();
    }

    // check_distance_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"check_distance_1",
          e));

      a << i.check_distance_1 ();
    }

    // check_building_code_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"check_building_code_2",
          e));

      a << i.check_building_code_2 ();
    }

    // check_distance_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"check_distance_2",
          e));

      a << i.check_distance_2 ();
    }

    // cool_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"cool_time",
          e));

      a << i.cool_time ();
    }

    // dominon_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"dominon_type",
          e));

      a << i.dominon_type ();
    }

    // is_mark_map
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"is_mark_map",
          e));

      a << i.is_mark_map ();
    }

    // map_mark_icon
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"map_mark_icon",
          e));

      a << i.map_mark_icon ();
    }

    // modeling_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"modeling_name",
          e));

      a << i.modeling_name ();
    }

    // foundation_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"foundation_effect",
          e));

      a << i.foundation_effect ();
    }

    // foundation_health_point
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"foundation_health_point",
          e));

      a << i.foundation_health_point ();
    }

    // foundation_regist
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"foundation_regist",
          e));

      a << i.foundation_regist ();
    }

    // foundation_live_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"foundation_live_sec",
          e));

      a << i.foundation_live_sec ();
    }

    // inventory_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"inventory_count",
          e));

      a << i.inventory_count ();
    }

    // building_materials_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"building_materials_1",
          e));

      a << i.building_materials_1 ();
    }

    // building_materials_count_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"building_materials_count_1",
          e));

      a << i.building_materials_count_1 ();
    }

    // building_materials_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"building_materials_2",
          e));

      a << i.building_materials_2 ();
    }

    // building_materials_count_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"building_materials_count_2",
          e));

      a << i.building_materials_count_2 ();
    }

    // building_materials_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"building_materials_3",
          e));

      a << i.building_materials_3 ();
    }

    // building_materials_count_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"building_materials_count_3",
          e));

      a << i.building_materials_count_3 ();
    }

    // building_materials_4
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"building_materials_4",
          e));

      a << i.building_materials_4 ();
    }

    // building_materials_count_4
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"building_materials_count_4",
          e));

      a << i.building_materials_count_4 ();
    }

    // building_materials_5
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"building_materials_5",
          e));

      a << i.building_materials_5 ();
    }

    // building_materials_count_5
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"building_materials_count_5",
          e));

      a << i.building_materials_count_5 ();
    }

    // build_animation
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"build_animation",
          e));

      a << i.build_animation ();
    }

    // build_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"build_sec",
          e));

      a << i.build_sec ();
    }

    // build_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"build_effect",
          e));

      a << i.build_effect ();
    }

    // broken_animation
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"broken_animation",
          e));

      a << i.broken_animation ();
    }

    // broken_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"broken_effect",
          e));

      a << i.broken_effect ();
    }

    // complete_modeling
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"complete_modeling",
          e));

      a << i.complete_modeling ();
    }

    // complete_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"complete_effect",
          e));

      a << i.complete_effect ();
    }

    // complete_health_point
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"complete_health_point",
          e));

      a << i.complete_health_point ();
    }

    // complete_regist
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"complete_regist",
          e));

      a << i.complete_regist ();
    }

    // limit_active_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"limit_active_sec",
          e));

      a << i.limit_active_sec ();
    }

    // active_animation
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"active_animation",
          e));

      a << i.active_animation ();
    }

    // active_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"active_effect",
          e));

      a << i.active_effect ();
    }

    // inative_animation
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"inative_animation",
          e));

      a << i.inative_animation ();
    }

    // inactive_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"inactive_effect",
          e));

      a << i.inactive_effect ();
    }

    // consume_sec_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"consume_sec_1",
          e));

      a << i.consume_sec_1 ();
    }

    // consume_item_code_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"consume_item_code_1",
          e));

      a << i.consume_item_code_1 ();
    }

    // consume_item_count_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"consume_item_count_1",
          e));

      a << i.consume_item_count_1 ();
    }

    // consume_sec_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"consume_sec_2",
          e));

      a << i.consume_sec_2 ();
    }

    // consume_item_code_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"consume_item_code_2",
          e));

      a << i.consume_item_code_2 ();
    }

    // consume_item_count_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"consume_item_count_2",
          e));

      a << i.consume_item_count_2 ();
    }

    // consume_sec_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"consume_sec_3",
          e));

      a << i.consume_sec_3 ();
    }

    // consume_item_code_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"consume_item_code_3",
          e));

      a << i.consume_item_code_3 ();
    }

    // consume_item_count_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"consume_item_count_3",
          e));

      a << i.consume_item_count_3 ();
    }

    // so_skill_code_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"so_skill_code_1",
          e));

      a << i.so_skill_code_1 ();
    }

    // so_skill_cast_type_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"so_skill_cast_type_1",
          e));

      a << i.so_skill_cast_type_1 ();
    }

    // auto_sec_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"auto_sec_1",
          e));

      a << i.auto_sec_1 ();
    }

    // so_skill_code_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"so_skill_code_2",
          e));

      a << i.so_skill_code_2 ();
    }

    // so_skill_cast_type_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"so_skill_cast_type_2",
          e));

      a << i.so_skill_cast_type_2 ();
    }

    // auto_sec_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"auto_sec_2",
          e));

      a << i.auto_sec_2 ();
    }

    // so_skill_code_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"so_skill_code_3",
          e));

      a << i.so_skill_code_3 ();
    }

    // so_skill_cast_type_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"so_skill_cast_type_3",
          e));

      a << i.so_skill_cast_type_3 ();
    }

    // auto_sec_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"auto_sec_3",
          e));

      a << i.auto_sec_3 ();
    }

    // produce_resources_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"produce_resources_code",
          e));

      a << i.produce_resources_code ();
    }

    // select_produce_resources_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_produce_resources_code",
          e));

      a << i.select_produce_resources_code ();
    }

    // select_produce_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_produce_count",
          e));

      a << i.select_produce_count ();
    }

    // produce_special_commodity_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"produce_special_commodity_code",
          e));

      a << i.produce_special_commodity_code ();
    }

    // produce_entrust_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"produce_entrust_count",
          e));

      a << i.produce_entrust_count ();
    }

    // deal_entrust_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"deal_entrust_count",
          e));

      a << i.deal_entrust_count ();
    }

    // mercenary_inventory_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"mercenary_inventory_count",
          e));

      a << i.mercenary_inventory_count ();
    }

    // production_inventory_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"production_inventory_count",
          e));

      a << i.production_inventory_count ();
    }

    // select_production_inventory_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_production_inventory_count",
          e));

      a << i.select_production_inventory_count ();
    }

    // cash_invincible_min
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"cash_invincible_min",
          e));

      a << i.cash_invincible_min ();
    }

    // cash_invincible_item_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"cash_invincible_item_code",
          e));

      a << i.cash_invincible_item_code ();
    }

    // cash_invincible_item_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"cash_invincible_item_count",
          e));

      a << i.cash_invincible_item_count ();
    }

    // free_invincible_min
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"free_invincible_min",
          e));

      a << i.free_invincible_min ();
    }

    // free_invincible_item_code_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"free_invincible_item_code_1",
          e));

      a << i.free_invincible_item_code_1 ();
    }

    // free_invincible_item_count_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"free_invincible_item_count_1",
          e));

      a << i.free_invincible_item_count_1 ();
    }

    // free_invincible_item_code_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"free_invincible_item_code_2",
          e));

      a << i.free_invincible_item_code_2 ();
    }

    // free_invincible_item_count_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"free_invincible_item_count_2",
          e));

      a << i.free_invincible_item_count_2 ();
    }

    // free_invincible_item_code_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"free_invincible_item_code_3",
          e));

      a << i.free_invincible_item_code_3 ();
    }

    // free_invincible_item_count_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"free_invincible_item_count_3",
          e));

      a << i.free_invincible_item_count_3 ();
    }

    // can_destory
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"can_destory",
          e));

      a << i.can_destory ();
    }

    // invincible_cooltime_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"invincible_cooltime_sec",
          e));

      a << i.invincible_cooltime_sec ();
    }

    // stack_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"stack_count",
          e));

      a << i.stack_count ();
    }

    // sell_cost_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sell_cost_type",
          e));

      a << i.sell_cost_type ();
    }

    // sell_cost
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sell_cost",
          e));

      a << i.sell_cost ();
    }

    // buy_cost_type_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_type_1",
          e));

      a << i.buy_cost_type_1 ();
    }

    // buy_cost_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_1",
          e));

      a << i.buy_cost_1 ();
    }

    // buy_cost_type_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_type_2",
          e));

      a << i.buy_cost_type_2 ();
    }

    // buy_cost_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_2",
          e));

      a << i.buy_cost_2 ();
    }

    // function_script_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"function_script_1",
          e));

      a << i.function_script_1 ();
    }

    // function_script_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"function_script_2",
          e));

      a << i.function_script_2 ();
    }

    // function_script_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"function_script_3",
          e));

      a << i.function_script_3 ();
    }

    // mercenary_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"mercenary_count",
          e));

      a << i.mercenary_count ();
    }

    // is_core_building
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"is_core_building",
          e));

      a << i.is_core_building ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const so_skill_cast_type_t& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const so_skill_cast_type_t& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const so_skill_cast_type_t& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const building_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // building_template
    //
    for (building_table::building_template_const_iterator
         b (i.building_template ().begin ()), n (i.building_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"building_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

