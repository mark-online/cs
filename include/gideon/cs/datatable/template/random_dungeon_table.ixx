// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_RANDOM_DUNGEON_TABLE_IXX
#define GDT_RANDOM_DUNGEON_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // random_dungeon_t
  // 

  inline
  const random_dungeon_t::map_code_type& random_dungeon_t::
  map_code () const
  {
    return this->map_code_.get ();
  }

  inline
  random_dungeon_t::map_code_type& random_dungeon_t::
  map_code ()
  {
    return this->map_code_.get ();
  }

  inline
  void random_dungeon_t::
  map_code (const map_code_type& x)
  {
    this->map_code_.set (x);
  }

  inline
  void random_dungeon_t::
  map_code (::std::unique_ptr< map_code_type > x)
  {
    this->map_code_.set (std::move (x));
  }

  inline
  const random_dungeon_t::random_dungeon_type_type& random_dungeon_t::
  random_dungeon_type () const
  {
    return this->random_dungeon_type_.get ();
  }

  inline
  random_dungeon_t::random_dungeon_type_type& random_dungeon_t::
  random_dungeon_type ()
  {
    return this->random_dungeon_type_.get ();
  }

  inline
  void random_dungeon_t::
  random_dungeon_type (const random_dungeon_type_type& x)
  {
    this->random_dungeon_type_.set (x);
  }

  inline
  const random_dungeon_t::column_count_type& random_dungeon_t::
  column_count () const
  {
    return this->column_count_.get ();
  }

  inline
  random_dungeon_t::column_count_type& random_dungeon_t::
  column_count ()
  {
    return this->column_count_.get ();
  }

  inline
  void random_dungeon_t::
  column_count (const column_count_type& x)
  {
    this->column_count_.set (x);
  }

  inline
  const random_dungeon_t::row_count_type& random_dungeon_t::
  row_count () const
  {
    return this->row_count_.get ();
  }

  inline
  random_dungeon_t::row_count_type& random_dungeon_t::
  row_count ()
  {
    return this->row_count_.get ();
  }

  inline
  void random_dungeon_t::
  row_count (const row_count_type& x)
  {
    this->row_count_.set (x);
  }

  inline
  const random_dungeon_t::dck_length_type& random_dungeon_t::
  dck_length () const
  {
    return this->dck_length_.get ();
  }

  inline
  random_dungeon_t::dck_length_type& random_dungeon_t::
  dck_length ()
  {
    return this->dck_length_.get ();
  }

  inline
  void random_dungeon_t::
  dck_length (const dck_length_type& x)
  {
    this->dck_length_.set (x);
  }

  inline
  const random_dungeon_t::dck_steps_type& random_dungeon_t::
  dck_steps () const
  {
    return this->dck_steps_.get ();
  }

  inline
  random_dungeon_t::dck_steps_type& random_dungeon_t::
  dck_steps ()
  {
    return this->dck_steps_.get ();
  }

  inline
  void random_dungeon_t::
  dck_steps (const dck_steps_type& x)
  {
    this->dck_steps_.set (x);
  }

  inline
  const random_dungeon_t::sector_length_type& random_dungeon_t::
  sector_length () const
  {
    return this->sector_length_.get ();
  }

  inline
  random_dungeon_t::sector_length_type& random_dungeon_t::
  sector_length ()
  {
    return this->sector_length_.get ();
  }

  inline
  void random_dungeon_t::
  sector_length (const sector_length_type& x)
  {
    this->sector_length_.set (x);
  }

  inline
  const random_dungeon_t::datablock_name_type& random_dungeon_t::
  datablock_name () const
  {
    return this->datablock_name_.get ();
  }

  inline
  random_dungeon_t::datablock_name_type& random_dungeon_t::
  datablock_name ()
  {
    return this->datablock_name_.get ();
  }

  inline
  void random_dungeon_t::
  datablock_name (const datablock_name_type& x)
  {
    this->datablock_name_.set (x);
  }

  inline
  void random_dungeon_t::
  datablock_name (::std::unique_ptr< datablock_name_type > x)
  {
    this->datablock_name_.set (std::move (x));
  }

  inline
  const random_dungeon_t::object_effect_type& random_dungeon_t::
  object_effect () const
  {
    return this->object_effect_.get ();
  }

  inline
  random_dungeon_t::object_effect_type& random_dungeon_t::
  object_effect ()
  {
    return this->object_effect_.get ();
  }

  inline
  void random_dungeon_t::
  object_effect (const object_effect_type& x)
  {
    this->object_effect_.set (x);
  }

  inline
  void random_dungeon_t::
  object_effect (::std::unique_ptr< object_effect_type > x)
  {
    this->object_effect_.set (std::move (x));
  }

  inline
  const random_dungeon_t::light_rgb_value_type& random_dungeon_t::
  light_rgb_value () const
  {
    return this->light_rgb_value_.get ();
  }

  inline
  random_dungeon_t::light_rgb_value_type& random_dungeon_t::
  light_rgb_value ()
  {
    return this->light_rgb_value_.get ();
  }

  inline
  void random_dungeon_t::
  light_rgb_value (const light_rgb_value_type& x)
  {
    this->light_rgb_value_.set (x);
  }

  inline
  void random_dungeon_t::
  light_rgb_value (::std::unique_ptr< light_rgb_value_type > x)
  {
    this->light_rgb_value_.set (std::move (x));
  }

  inline
  const random_dungeon_t::light_value_type& random_dungeon_t::
  light_value () const
  {
    return this->light_value_.get ();
  }

  inline
  random_dungeon_t::light_value_type& random_dungeon_t::
  light_value ()
  {
    return this->light_value_.get ();
  }

  inline
  void random_dungeon_t::
  light_value (const light_value_type& x)
  {
    this->light_value_.set (x);
  }

  inline
  const random_dungeon_t::light_range_value_type& random_dungeon_t::
  light_range_value () const
  {
    return this->light_range_value_.get ();
  }

  inline
  random_dungeon_t::light_range_value_type& random_dungeon_t::
  light_range_value ()
  {
    return this->light_range_value_.get ();
  }

  inline
  void random_dungeon_t::
  light_range_value (const light_range_value_type& x)
  {
    this->light_range_value_.set (x);
  }

  inline
  const random_dungeon_t::base_folder_type& random_dungeon_t::
  base_folder () const
  {
    return this->base_folder_.get ();
  }

  inline
  random_dungeon_t::base_folder_type& random_dungeon_t::
  base_folder ()
  {
    return this->base_folder_.get ();
  }

  inline
  void random_dungeon_t::
  base_folder (const base_folder_type& x)
  {
    this->base_folder_.set (x);
  }

  inline
  void random_dungeon_t::
  base_folder (::std::unique_ptr< base_folder_type > x)
  {
    this->base_folder_.set (std::move (x));
  }

  inline
  const random_dungeon_t::base_z_type& random_dungeon_t::
  base_z () const
  {
    return this->base_z_.get ();
  }

  inline
  random_dungeon_t::base_z_type& random_dungeon_t::
  base_z ()
  {
    return this->base_z_.get ();
  }

  inline
  void random_dungeon_t::
  base_z (const base_z_type& x)
  {
    this->base_z_.set (x);
  }

  inline
  const random_dungeon_t::floor_count_type& random_dungeon_t::
  floor_count () const
  {
    return this->floor_count_.get ();
  }

  inline
  random_dungeon_t::floor_count_type& random_dungeon_t::
  floor_count ()
  {
    return this->floor_count_.get ();
  }

  inline
  void random_dungeon_t::
  floor_count (const floor_count_type& x)
  {
    this->floor_count_.set (x);
  }

  inline
  const random_dungeon_t::wall_count_type& random_dungeon_t::
  wall_count () const
  {
    return this->wall_count_.get ();
  }

  inline
  random_dungeon_t::wall_count_type& random_dungeon_t::
  wall_count ()
  {
    return this->wall_count_.get ();
  }

  inline
  void random_dungeon_t::
  wall_count (const wall_count_type& x)
  {
    this->wall_count_.set (x);
  }

  inline
  const random_dungeon_t::corner_count_type& random_dungeon_t::
  corner_count () const
  {
    return this->corner_count_.get ();
  }

  inline
  random_dungeon_t::corner_count_type& random_dungeon_t::
  corner_count ()
  {
    return this->corner_count_.get ();
  }

  inline
  void random_dungeon_t::
  corner_count (const corner_count_type& x)
  {
    this->corner_count_.set (x);
  }

  inline
  const random_dungeon_t::corridor_count_type& random_dungeon_t::
  corridor_count () const
  {
    return this->corridor_count_.get ();
  }

  inline
  random_dungeon_t::corridor_count_type& random_dungeon_t::
  corridor_count ()
  {
    return this->corridor_count_.get ();
  }

  inline
  void random_dungeon_t::
  corridor_count (const corridor_count_type& x)
  {
    this->corridor_count_.set (x);
  }

  inline
  const random_dungeon_t::corridor_corner_count_type& random_dungeon_t::
  corridor_corner_count () const
  {
    return this->corridor_corner_count_.get ();
  }

  inline
  random_dungeon_t::corridor_corner_count_type& random_dungeon_t::
  corridor_corner_count ()
  {
    return this->corridor_corner_count_.get ();
  }

  inline
  void random_dungeon_t::
  corridor_corner_count (const corridor_corner_count_type& x)
  {
    this->corridor_corner_count_.set (x);
  }

  inline
  const random_dungeon_t::corridor_cross_count_type& random_dungeon_t::
  corridor_cross_count () const
  {
    return this->corridor_cross_count_.get ();
  }

  inline
  random_dungeon_t::corridor_cross_count_type& random_dungeon_t::
  corridor_cross_count ()
  {
    return this->corridor_cross_count_.get ();
  }

  inline
  void random_dungeon_t::
  corridor_cross_count (const corridor_cross_count_type& x)
  {
    this->corridor_cross_count_.set (x);
  }

  inline
  const random_dungeon_t::corridor_t_cross_count_type& random_dungeon_t::
  corridor_t_cross_count () const
  {
    return this->corridor_t_cross_count_.get ();
  }

  inline
  random_dungeon_t::corridor_t_cross_count_type& random_dungeon_t::
  corridor_t_cross_count ()
  {
    return this->corridor_t_cross_count_.get ();
  }

  inline
  void random_dungeon_t::
  corridor_t_cross_count (const corridor_t_cross_count_type& x)
  {
    this->corridor_t_cross_count_.set (x);
  }

  inline
  const random_dungeon_t::corridor_end_count_type& random_dungeon_t::
  corridor_end_count () const
  {
    return this->corridor_end_count_.get ();
  }

  inline
  random_dungeon_t::corridor_end_count_type& random_dungeon_t::
  corridor_end_count ()
  {
    return this->corridor_end_count_.get ();
  }

  inline
  void random_dungeon_t::
  corridor_end_count (const corridor_end_count_type& x)
  {
    this->corridor_end_count_.set (x);
  }


  // random_dungeon_table
  // 

  inline
  const random_dungeon_table::random_dungeon_template_sequence& random_dungeon_table::
  random_dungeon_template () const
  {
    return this->random_dungeon_template_;
  }

  inline
  random_dungeon_table::random_dungeon_template_sequence& random_dungeon_table::
  random_dungeon_template ()
  {
    return this->random_dungeon_template_;
  }

  inline
  void random_dungeon_table::
  random_dungeon_template (const random_dungeon_template_sequence& s)
  {
    this->random_dungeon_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_RANDOM_DUNGEON_TABLE_IXX
