// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "npc_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // npc_t
  //

  npc_t::
  npc_t ()
  : ::xml_schema::type (),
    npc_code_ (this),
    npc_type_ (this),
    npc_mesh_collision_usable_ (this),
    npc_contact_object_normal_ (this),
    datablock_name_ (this),
    material_name_ (this),
    material_count_ (this),
    scale_ (this),
    modeling_radius_ (this),
    level_ (this),
    grade_ (this),
    exp_ (this),
    random_dungeon_exp_pct_ (this),
    world_event_exp_pct_ (this),
    hp_ (this),
    mp_ (this),
    min_attack_power_ (this),
    max_attack_power_ (this),
    physical_attack_power_ (this),
    magic_attack_power_ (this),
    hit_rate_ (this),
    physical_critical_rate_ (this),
    magic_critical_rate_ (this),
    block_rate_ (this),
    dodge_rate_ (this),
    parry_rate_ (this),
    defence_ (this),
    light_attribute_ (this),
    dark_attribute_ (this),
    fire_attribute_ (this),
    ice_attribute_ (this),
    light_attribute_regist_ (this),
    dark_attribute_regist_ (this),
    fire_attribute_regist_ (this),
    ice_attribute_regist_ (this),
    item_drop_id_1_ (this),
    item_drop_id_2_ (this),
    world_drop_suffix_id_1_ (this),
    world_drop_suffix_id_2_ (this),
    ai_script_name_ (this),
    ai_script_param_1_ (this),
    ai_script_param_2_ (this),
    ai_script_param_3_ (this),
    ai_script_param_4_ (this),
    ai_reactive_type_ (this),
    ai_reactive_distance_ (this),
    ai_min_approach_distance_ (this),
    ai_max_approach_distance_ (this),
    ai_wander_distance_ (this),
    ai_walk_speed_ (this),
    ai_min_walk_delay_ (this),
    ai_max_walk_delay_ (this),
    ai_max_move_distance_ (this),
    ai_run_speed_ (this),
    ai_link_type_ (this),
    ai_link_reactive_distance_ (this),
    ai_link_min_count_ (this),
    ai_link_max_count_ (this),
    main_skill_code_ (this),
    sub_skill_code_ (this),
    special_skill_1_ (this),
    special_skill_rate_1_ (this),
    special_skill_2_ (this),
    special_skill_rate_2_ (this),
    special_skill_3_ (this),
    special_skill_rate_3_ (this),
    threat_effect_ (this),
    death_effect_ (this),
    death_delay_time_ (this),
    spawn_effect_ (this),
    spawn_interval_sec_ (this),
    peace_effect_ (this),
    peace_light_rgb_value_ (this),
    peace_light_value_ (this),
    peace_light_range_value_ (this),
    peace_light_mount_point_ (this),
    combat_effect_ (this),
    combat_light_rgb_value_ (this),
    combat_light_value_ (this),
    combat_light_range_value_ (this),
    combat_light_mount_point_ (this),
    hit_sound_ (this),
    dodge_sound_ (this),
    walk_sound_ (this),
    run_sound_ (this),
    aggressive_sound_ (this),
    weapon_material_type_ (this),
    armor_material_type_ (this),
    use_datacode_mesh_hidden_ (this),
    npc_hair_ (this),
    npc_face_ (this),
    npc_eyes_ (this),
    npc_tooth_ (this),
    npc_upper_body_ (this),
    npc_lower_body_ (this),
    npc_hand_ (this),
    npc_foot_ (this),
    npc_uppper_underwear_ (this),
    npc_lower_underwear_ (this),
    npc_helmet_ (this),
    npc_shoulder_ (this),
    npc_torso_ (this),
    npc_belt_ (this),
    npc_pants_ (this),
    npc_greave_ (this),
    npc_glove_ (this),
    npc_shoes_ (this),
    npc_righthand_ (this),
    npc_lefthand_ (this),
    use_mesh_hidden_ (this),
    use_mesh_hidden_count_ (this),
    npc_mesh_helmet_ (this),
    npc_mesh_shoulder_ (this),
    npc_mesh_torso_ (this),
    npc_mesh_belt_ (this),
    npc_mesh_pants_ (this),
    npc_mesh_greave_ (this),
    npc_mesh_glove_ (this),
    npc_mesh_shoes_ (this),
    npc_mesh_righthand_ (this),
    npc_mesh_lefthand_ (this),
    quest_function_ (this),
    introduce_talk_ (this),
    show_head_name_ (this),
    show_preview_ (this),
    bank_function_ (this),
    buy_function_ (this),
    sell_function_ (this),
    mail_function_ (this),
    auction_function_ (this),
    guild_function_ (this),
    glider_repair_function_ (this),
    craft_function_ (this),
    npc_rotate_ (this),
    subRootAnim_chance_ (this),
    subRootAnim_max_time_ (this),
    subRootAnim_min_time_ (this),
    subRootAnim1_effect_ (this),
    subRootAnim2_effect_ (this),
    subRootAnim3_effect_ (this),
    subRootAnim4_effect_ (this),
    faction_ (this)
  {
  }

  npc_t::
  npc_t (const npc_code_type& npc_code,
         const npc_type_type& npc_type,
         const npc_mesh_collision_usable_type& npc_mesh_collision_usable,
         const npc_contact_object_normal_type& npc_contact_object_normal,
         const datablock_name_type& datablock_name,
         const material_name_type& material_name,
         const material_count_type& material_count,
         const scale_type& scale,
         const modeling_radius_type& modeling_radius,
         const level_type& level,
         const grade_type& grade,
         const exp_type& exp,
         const random_dungeon_exp_pct_type& random_dungeon_exp_pct,
         const world_event_exp_pct_type& world_event_exp_pct,
         const hp_type& hp,
         const mp_type& mp,
         const min_attack_power_type& min_attack_power,
         const max_attack_power_type& max_attack_power,
         const physical_attack_power_type& physical_attack_power,
         const magic_attack_power_type& magic_attack_power,
         const hit_rate_type& hit_rate,
         const physical_critical_rate_type& physical_critical_rate,
         const magic_critical_rate_type& magic_critical_rate,
         const block_rate_type& block_rate,
         const dodge_rate_type& dodge_rate,
         const parry_rate_type& parry_rate,
         const defence_type& defence,
         const light_attribute_type& light_attribute,
         const dark_attribute_type& dark_attribute,
         const fire_attribute_type& fire_attribute,
         const ice_attribute_type& ice_attribute,
         const light_attribute_regist_type& light_attribute_regist,
         const dark_attribute_regist_type& dark_attribute_regist,
         const fire_attribute_regist_type& fire_attribute_regist,
         const ice_attribute_regist_type& ice_attribute_regist,
         const item_drop_id_1_type& item_drop_id_1,
         const item_drop_id_2_type& item_drop_id_2,
         const world_drop_suffix_id_1_type& world_drop_suffix_id_1,
         const world_drop_suffix_id_2_type& world_drop_suffix_id_2,
         const ai_script_name_type& ai_script_name,
         const ai_script_param_1_type& ai_script_param_1,
         const ai_script_param_2_type& ai_script_param_2,
         const ai_script_param_3_type& ai_script_param_3,
         const ai_script_param_4_type& ai_script_param_4,
         const ai_reactive_type_type& ai_reactive_type,
         const ai_reactive_distance_type& ai_reactive_distance,
         const ai_min_approach_distance_type& ai_min_approach_distance,
         const ai_max_approach_distance_type& ai_max_approach_distance,
         const ai_wander_distance_type& ai_wander_distance,
         const ai_walk_speed_type& ai_walk_speed,
         const ai_min_walk_delay_type& ai_min_walk_delay,
         const ai_max_walk_delay_type& ai_max_walk_delay,
         const ai_max_move_distance_type& ai_max_move_distance,
         const ai_run_speed_type& ai_run_speed,
         const ai_link_type_type& ai_link_type,
         const ai_link_reactive_distance_type& ai_link_reactive_distance,
         const ai_link_min_count_type& ai_link_min_count,
         const ai_link_max_count_type& ai_link_max_count,
         const main_skill_code_type& main_skill_code,
         const sub_skill_code_type& sub_skill_code,
         const special_skill_1_type& special_skill_1,
         const special_skill_rate_1_type& special_skill_rate_1,
         const special_skill_2_type& special_skill_2,
         const special_skill_rate_2_type& special_skill_rate_2,
         const special_skill_3_type& special_skill_3,
         const special_skill_rate_3_type& special_skill_rate_3,
         const threat_effect_type& threat_effect,
         const death_effect_type& death_effect,
         const death_delay_time_type& death_delay_time,
         const spawn_effect_type& spawn_effect,
         const spawn_interval_sec_type& spawn_interval_sec,
         const peace_effect_type& peace_effect,
         const peace_light_rgb_value_type& peace_light_rgb_value,
         const peace_light_value_type& peace_light_value,
         const peace_light_range_value_type& peace_light_range_value,
         const peace_light_mount_point_type& peace_light_mount_point,
         const combat_effect_type& combat_effect,
         const combat_light_rgb_value_type& combat_light_rgb_value,
         const combat_light_value_type& combat_light_value,
         const combat_light_range_value_type& combat_light_range_value,
         const combat_light_mount_point_type& combat_light_mount_point,
         const hit_sound_type& hit_sound,
         const dodge_sound_type& dodge_sound,
         const walk_sound_type& walk_sound,
         const run_sound_type& run_sound,
         const aggressive_sound_type& aggressive_sound,
         const weapon_material_type_type& weapon_material_type,
         const armor_material_type_type& armor_material_type,
         const use_datacode_mesh_hidden_type& use_datacode_mesh_hidden,
         const npc_hair_type& npc_hair,
         const npc_face_type& npc_face,
         const npc_eyes_type& npc_eyes,
         const npc_tooth_type& npc_tooth,
         const npc_upper_body_type& npc_upper_body,
         const npc_lower_body_type& npc_lower_body,
         const npc_hand_type& npc_hand,
         const npc_foot_type& npc_foot,
         const npc_uppper_underwear_type& npc_uppper_underwear,
         const npc_lower_underwear_type& npc_lower_underwear,
         const npc_helmet_type& npc_helmet,
         const npc_shoulder_type& npc_shoulder,
         const npc_torso_type& npc_torso,
         const npc_belt_type& npc_belt,
         const npc_pants_type& npc_pants,
         const npc_greave_type& npc_greave,
         const npc_glove_type& npc_glove,
         const npc_shoes_type& npc_shoes,
         const npc_righthand_type& npc_righthand,
         const npc_lefthand_type& npc_lefthand,
         const use_mesh_hidden_type& use_mesh_hidden,
         const use_mesh_hidden_count_type& use_mesh_hidden_count,
         const npc_mesh_helmet_type& npc_mesh_helmet,
         const npc_mesh_shoulder_type& npc_mesh_shoulder,
         const npc_mesh_torso_type& npc_mesh_torso,
         const npc_mesh_belt_type& npc_mesh_belt,
         const npc_mesh_pants_type& npc_mesh_pants,
         const npc_mesh_greave_type& npc_mesh_greave,
         const npc_mesh_glove_type& npc_mesh_glove,
         const npc_mesh_shoes_type& npc_mesh_shoes,
         const npc_mesh_righthand_type& npc_mesh_righthand,
         const npc_mesh_lefthand_type& npc_mesh_lefthand,
         const quest_function_type& quest_function,
         const introduce_talk_type& introduce_talk,
         const show_head_name_type& show_head_name,
         const show_preview_type& show_preview,
         const bank_function_type& bank_function,
         const buy_function_type& buy_function,
         const sell_function_type& sell_function,
         const mail_function_type& mail_function,
         const auction_function_type& auction_function,
         const guild_function_type& guild_function,
         const glider_repair_function_type& glider_repair_function,
         const craft_function_type& craft_function,
         const npc_rotate_type& npc_rotate,
         const subRootAnim_chance_type& subRootAnim_chance,
         const subRootAnim_max_time_type& subRootAnim_max_time,
         const subRootAnim_min_time_type& subRootAnim_min_time,
         const subRootAnim1_effect_type& subRootAnim1_effect,
         const subRootAnim2_effect_type& subRootAnim2_effect,
         const subRootAnim3_effect_type& subRootAnim3_effect,
         const subRootAnim4_effect_type& subRootAnim4_effect,
         const faction_type& faction)
  : ::xml_schema::type (),
    npc_code_ (npc_code, this),
    npc_type_ (npc_type, this),
    npc_mesh_collision_usable_ (npc_mesh_collision_usable, this),
    npc_contact_object_normal_ (npc_contact_object_normal, this),
    datablock_name_ (datablock_name, this),
    material_name_ (material_name, this),
    material_count_ (material_count, this),
    scale_ (scale, this),
    modeling_radius_ (modeling_radius, this),
    level_ (level, this),
    grade_ (grade, this),
    exp_ (exp, this),
    random_dungeon_exp_pct_ (random_dungeon_exp_pct, this),
    world_event_exp_pct_ (world_event_exp_pct, this),
    hp_ (hp, this),
    mp_ (mp, this),
    min_attack_power_ (min_attack_power, this),
    max_attack_power_ (max_attack_power, this),
    physical_attack_power_ (physical_attack_power, this),
    magic_attack_power_ (magic_attack_power, this),
    hit_rate_ (hit_rate, this),
    physical_critical_rate_ (physical_critical_rate, this),
    magic_critical_rate_ (magic_critical_rate, this),
    block_rate_ (block_rate, this),
    dodge_rate_ (dodge_rate, this),
    parry_rate_ (parry_rate, this),
    defence_ (defence, this),
    light_attribute_ (light_attribute, this),
    dark_attribute_ (dark_attribute, this),
    fire_attribute_ (fire_attribute, this),
    ice_attribute_ (ice_attribute, this),
    light_attribute_regist_ (light_attribute_regist, this),
    dark_attribute_regist_ (dark_attribute_regist, this),
    fire_attribute_regist_ (fire_attribute_regist, this),
    ice_attribute_regist_ (ice_attribute_regist, this),
    item_drop_id_1_ (item_drop_id_1, this),
    item_drop_id_2_ (item_drop_id_2, this),
    world_drop_suffix_id_1_ (world_drop_suffix_id_1, this),
    world_drop_suffix_id_2_ (world_drop_suffix_id_2, this),
    ai_script_name_ (ai_script_name, this),
    ai_script_param_1_ (ai_script_param_1, this),
    ai_script_param_2_ (ai_script_param_2, this),
    ai_script_param_3_ (ai_script_param_3, this),
    ai_script_param_4_ (ai_script_param_4, this),
    ai_reactive_type_ (ai_reactive_type, this),
    ai_reactive_distance_ (ai_reactive_distance, this),
    ai_min_approach_distance_ (ai_min_approach_distance, this),
    ai_max_approach_distance_ (ai_max_approach_distance, this),
    ai_wander_distance_ (ai_wander_distance, this),
    ai_walk_speed_ (ai_walk_speed, this),
    ai_min_walk_delay_ (ai_min_walk_delay, this),
    ai_max_walk_delay_ (ai_max_walk_delay, this),
    ai_max_move_distance_ (ai_max_move_distance, this),
    ai_run_speed_ (ai_run_speed, this),
    ai_link_type_ (ai_link_type, this),
    ai_link_reactive_distance_ (ai_link_reactive_distance, this),
    ai_link_min_count_ (ai_link_min_count, this),
    ai_link_max_count_ (ai_link_max_count, this),
    main_skill_code_ (main_skill_code, this),
    sub_skill_code_ (sub_skill_code, this),
    special_skill_1_ (special_skill_1, this),
    special_skill_rate_1_ (special_skill_rate_1, this),
    special_skill_2_ (special_skill_2, this),
    special_skill_rate_2_ (special_skill_rate_2, this),
    special_skill_3_ (special_skill_3, this),
    special_skill_rate_3_ (special_skill_rate_3, this),
    threat_effect_ (threat_effect, this),
    death_effect_ (death_effect, this),
    death_delay_time_ (death_delay_time, this),
    spawn_effect_ (spawn_effect, this),
    spawn_interval_sec_ (spawn_interval_sec, this),
    peace_effect_ (peace_effect, this),
    peace_light_rgb_value_ (peace_light_rgb_value, this),
    peace_light_value_ (peace_light_value, this),
    peace_light_range_value_ (peace_light_range_value, this),
    peace_light_mount_point_ (peace_light_mount_point, this),
    combat_effect_ (combat_effect, this),
    combat_light_rgb_value_ (combat_light_rgb_value, this),
    combat_light_value_ (combat_light_value, this),
    combat_light_range_value_ (combat_light_range_value, this),
    combat_light_mount_point_ (combat_light_mount_point, this),
    hit_sound_ (hit_sound, this),
    dodge_sound_ (dodge_sound, this),
    walk_sound_ (walk_sound, this),
    run_sound_ (run_sound, this),
    aggressive_sound_ (aggressive_sound, this),
    weapon_material_type_ (weapon_material_type, this),
    armor_material_type_ (armor_material_type, this),
    use_datacode_mesh_hidden_ (use_datacode_mesh_hidden, this),
    npc_hair_ (npc_hair, this),
    npc_face_ (npc_face, this),
    npc_eyes_ (npc_eyes, this),
    npc_tooth_ (npc_tooth, this),
    npc_upper_body_ (npc_upper_body, this),
    npc_lower_body_ (npc_lower_body, this),
    npc_hand_ (npc_hand, this),
    npc_foot_ (npc_foot, this),
    npc_uppper_underwear_ (npc_uppper_underwear, this),
    npc_lower_underwear_ (npc_lower_underwear, this),
    npc_helmet_ (npc_helmet, this),
    npc_shoulder_ (npc_shoulder, this),
    npc_torso_ (npc_torso, this),
    npc_belt_ (npc_belt, this),
    npc_pants_ (npc_pants, this),
    npc_greave_ (npc_greave, this),
    npc_glove_ (npc_glove, this),
    npc_shoes_ (npc_shoes, this),
    npc_righthand_ (npc_righthand, this),
    npc_lefthand_ (npc_lefthand, this),
    use_mesh_hidden_ (use_mesh_hidden, this),
    use_mesh_hidden_count_ (use_mesh_hidden_count, this),
    npc_mesh_helmet_ (npc_mesh_helmet, this),
    npc_mesh_shoulder_ (npc_mesh_shoulder, this),
    npc_mesh_torso_ (npc_mesh_torso, this),
    npc_mesh_belt_ (npc_mesh_belt, this),
    npc_mesh_pants_ (npc_mesh_pants, this),
    npc_mesh_greave_ (npc_mesh_greave, this),
    npc_mesh_glove_ (npc_mesh_glove, this),
    npc_mesh_shoes_ (npc_mesh_shoes, this),
    npc_mesh_righthand_ (npc_mesh_righthand, this),
    npc_mesh_lefthand_ (npc_mesh_lefthand, this),
    quest_function_ (quest_function, this),
    introduce_talk_ (introduce_talk, this),
    show_head_name_ (show_head_name, this),
    show_preview_ (show_preview, this),
    bank_function_ (bank_function, this),
    buy_function_ (buy_function, this),
    sell_function_ (sell_function, this),
    mail_function_ (mail_function, this),
    auction_function_ (auction_function, this),
    guild_function_ (guild_function, this),
    glider_repair_function_ (glider_repair_function, this),
    craft_function_ (craft_function, this),
    npc_rotate_ (npc_rotate, this),
    subRootAnim_chance_ (subRootAnim_chance, this),
    subRootAnim_max_time_ (subRootAnim_max_time, this),
    subRootAnim_min_time_ (subRootAnim_min_time, this),
    subRootAnim1_effect_ (subRootAnim1_effect, this),
    subRootAnim2_effect_ (subRootAnim2_effect, this),
    subRootAnim3_effect_ (subRootAnim3_effect, this),
    subRootAnim4_effect_ (subRootAnim4_effect, this),
    faction_ (faction, this)
  {
  }

  npc_t::
  npc_t (const npc_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    npc_code_ (x.npc_code_, f, this),
    npc_type_ (x.npc_type_, f, this),
    npc_mesh_collision_usable_ (x.npc_mesh_collision_usable_, f, this),
    npc_contact_object_normal_ (x.npc_contact_object_normal_, f, this),
    datablock_name_ (x.datablock_name_, f, this),
    material_name_ (x.material_name_, f, this),
    material_count_ (x.material_count_, f, this),
    scale_ (x.scale_, f, this),
    modeling_radius_ (x.modeling_radius_, f, this),
    level_ (x.level_, f, this),
    grade_ (x.grade_, f, this),
    exp_ (x.exp_, f, this),
    random_dungeon_exp_pct_ (x.random_dungeon_exp_pct_, f, this),
    world_event_exp_pct_ (x.world_event_exp_pct_, f, this),
    hp_ (x.hp_, f, this),
    mp_ (x.mp_, f, this),
    min_attack_power_ (x.min_attack_power_, f, this),
    max_attack_power_ (x.max_attack_power_, f, this),
    physical_attack_power_ (x.physical_attack_power_, f, this),
    magic_attack_power_ (x.magic_attack_power_, f, this),
    hit_rate_ (x.hit_rate_, f, this),
    physical_critical_rate_ (x.physical_critical_rate_, f, this),
    magic_critical_rate_ (x.magic_critical_rate_, f, this),
    block_rate_ (x.block_rate_, f, this),
    dodge_rate_ (x.dodge_rate_, f, this),
    parry_rate_ (x.parry_rate_, f, this),
    defence_ (x.defence_, f, this),
    light_attribute_ (x.light_attribute_, f, this),
    dark_attribute_ (x.dark_attribute_, f, this),
    fire_attribute_ (x.fire_attribute_, f, this),
    ice_attribute_ (x.ice_attribute_, f, this),
    light_attribute_regist_ (x.light_attribute_regist_, f, this),
    dark_attribute_regist_ (x.dark_attribute_regist_, f, this),
    fire_attribute_regist_ (x.fire_attribute_regist_, f, this),
    ice_attribute_regist_ (x.ice_attribute_regist_, f, this),
    item_drop_id_1_ (x.item_drop_id_1_, f, this),
    item_drop_id_2_ (x.item_drop_id_2_, f, this),
    world_drop_suffix_id_1_ (x.world_drop_suffix_id_1_, f, this),
    world_drop_suffix_id_2_ (x.world_drop_suffix_id_2_, f, this),
    ai_script_name_ (x.ai_script_name_, f, this),
    ai_script_param_1_ (x.ai_script_param_1_, f, this),
    ai_script_param_2_ (x.ai_script_param_2_, f, this),
    ai_script_param_3_ (x.ai_script_param_3_, f, this),
    ai_script_param_4_ (x.ai_script_param_4_, f, this),
    ai_reactive_type_ (x.ai_reactive_type_, f, this),
    ai_reactive_distance_ (x.ai_reactive_distance_, f, this),
    ai_min_approach_distance_ (x.ai_min_approach_distance_, f, this),
    ai_max_approach_distance_ (x.ai_max_approach_distance_, f, this),
    ai_wander_distance_ (x.ai_wander_distance_, f, this),
    ai_walk_speed_ (x.ai_walk_speed_, f, this),
    ai_min_walk_delay_ (x.ai_min_walk_delay_, f, this),
    ai_max_walk_delay_ (x.ai_max_walk_delay_, f, this),
    ai_max_move_distance_ (x.ai_max_move_distance_, f, this),
    ai_run_speed_ (x.ai_run_speed_, f, this),
    ai_link_type_ (x.ai_link_type_, f, this),
    ai_link_reactive_distance_ (x.ai_link_reactive_distance_, f, this),
    ai_link_min_count_ (x.ai_link_min_count_, f, this),
    ai_link_max_count_ (x.ai_link_max_count_, f, this),
    main_skill_code_ (x.main_skill_code_, f, this),
    sub_skill_code_ (x.sub_skill_code_, f, this),
    special_skill_1_ (x.special_skill_1_, f, this),
    special_skill_rate_1_ (x.special_skill_rate_1_, f, this),
    special_skill_2_ (x.special_skill_2_, f, this),
    special_skill_rate_2_ (x.special_skill_rate_2_, f, this),
    special_skill_3_ (x.special_skill_3_, f, this),
    special_skill_rate_3_ (x.special_skill_rate_3_, f, this),
    threat_effect_ (x.threat_effect_, f, this),
    death_effect_ (x.death_effect_, f, this),
    death_delay_time_ (x.death_delay_time_, f, this),
    spawn_effect_ (x.spawn_effect_, f, this),
    spawn_interval_sec_ (x.spawn_interval_sec_, f, this),
    peace_effect_ (x.peace_effect_, f, this),
    peace_light_rgb_value_ (x.peace_light_rgb_value_, f, this),
    peace_light_value_ (x.peace_light_value_, f, this),
    peace_light_range_value_ (x.peace_light_range_value_, f, this),
    peace_light_mount_point_ (x.peace_light_mount_point_, f, this),
    combat_effect_ (x.combat_effect_, f, this),
    combat_light_rgb_value_ (x.combat_light_rgb_value_, f, this),
    combat_light_value_ (x.combat_light_value_, f, this),
    combat_light_range_value_ (x.combat_light_range_value_, f, this),
    combat_light_mount_point_ (x.combat_light_mount_point_, f, this),
    hit_sound_ (x.hit_sound_, f, this),
    dodge_sound_ (x.dodge_sound_, f, this),
    walk_sound_ (x.walk_sound_, f, this),
    run_sound_ (x.run_sound_, f, this),
    aggressive_sound_ (x.aggressive_sound_, f, this),
    weapon_material_type_ (x.weapon_material_type_, f, this),
    armor_material_type_ (x.armor_material_type_, f, this),
    use_datacode_mesh_hidden_ (x.use_datacode_mesh_hidden_, f, this),
    npc_hair_ (x.npc_hair_, f, this),
    npc_face_ (x.npc_face_, f, this),
    npc_eyes_ (x.npc_eyes_, f, this),
    npc_tooth_ (x.npc_tooth_, f, this),
    npc_upper_body_ (x.npc_upper_body_, f, this),
    npc_lower_body_ (x.npc_lower_body_, f, this),
    npc_hand_ (x.npc_hand_, f, this),
    npc_foot_ (x.npc_foot_, f, this),
    npc_uppper_underwear_ (x.npc_uppper_underwear_, f, this),
    npc_lower_underwear_ (x.npc_lower_underwear_, f, this),
    npc_helmet_ (x.npc_helmet_, f, this),
    npc_shoulder_ (x.npc_shoulder_, f, this),
    npc_torso_ (x.npc_torso_, f, this),
    npc_belt_ (x.npc_belt_, f, this),
    npc_pants_ (x.npc_pants_, f, this),
    npc_greave_ (x.npc_greave_, f, this),
    npc_glove_ (x.npc_glove_, f, this),
    npc_shoes_ (x.npc_shoes_, f, this),
    npc_righthand_ (x.npc_righthand_, f, this),
    npc_lefthand_ (x.npc_lefthand_, f, this),
    use_mesh_hidden_ (x.use_mesh_hidden_, f, this),
    use_mesh_hidden_count_ (x.use_mesh_hidden_count_, f, this),
    npc_mesh_helmet_ (x.npc_mesh_helmet_, f, this),
    npc_mesh_shoulder_ (x.npc_mesh_shoulder_, f, this),
    npc_mesh_torso_ (x.npc_mesh_torso_, f, this),
    npc_mesh_belt_ (x.npc_mesh_belt_, f, this),
    npc_mesh_pants_ (x.npc_mesh_pants_, f, this),
    npc_mesh_greave_ (x.npc_mesh_greave_, f, this),
    npc_mesh_glove_ (x.npc_mesh_glove_, f, this),
    npc_mesh_shoes_ (x.npc_mesh_shoes_, f, this),
    npc_mesh_righthand_ (x.npc_mesh_righthand_, f, this),
    npc_mesh_lefthand_ (x.npc_mesh_lefthand_, f, this),
    quest_function_ (x.quest_function_, f, this),
    introduce_talk_ (x.introduce_talk_, f, this),
    show_head_name_ (x.show_head_name_, f, this),
    show_preview_ (x.show_preview_, f, this),
    bank_function_ (x.bank_function_, f, this),
    buy_function_ (x.buy_function_, f, this),
    sell_function_ (x.sell_function_, f, this),
    mail_function_ (x.mail_function_, f, this),
    auction_function_ (x.auction_function_, f, this),
    guild_function_ (x.guild_function_, f, this),
    glider_repair_function_ (x.glider_repair_function_, f, this),
    craft_function_ (x.craft_function_, f, this),
    npc_rotate_ (x.npc_rotate_, f, this),
    subRootAnim_chance_ (x.subRootAnim_chance_, f, this),
    subRootAnim_max_time_ (x.subRootAnim_max_time_, f, this),
    subRootAnim_min_time_ (x.subRootAnim_min_time_, f, this),
    subRootAnim1_effect_ (x.subRootAnim1_effect_, f, this),
    subRootAnim2_effect_ (x.subRootAnim2_effect_, f, this),
    subRootAnim3_effect_ (x.subRootAnim3_effect_, f, this),
    subRootAnim4_effect_ (x.subRootAnim4_effect_, f, this),
    faction_ (x.faction_, f, this)
  {
  }

  npc_t::
  npc_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    npc_code_ (this),
    npc_type_ (this),
    npc_mesh_collision_usable_ (this),
    npc_contact_object_normal_ (this),
    datablock_name_ (this),
    material_name_ (this),
    material_count_ (this),
    scale_ (this),
    modeling_radius_ (this),
    level_ (this),
    grade_ (this),
    exp_ (this),
    random_dungeon_exp_pct_ (this),
    world_event_exp_pct_ (this),
    hp_ (this),
    mp_ (this),
    min_attack_power_ (this),
    max_attack_power_ (this),
    physical_attack_power_ (this),
    magic_attack_power_ (this),
    hit_rate_ (this),
    physical_critical_rate_ (this),
    magic_critical_rate_ (this),
    block_rate_ (this),
    dodge_rate_ (this),
    parry_rate_ (this),
    defence_ (this),
    light_attribute_ (this),
    dark_attribute_ (this),
    fire_attribute_ (this),
    ice_attribute_ (this),
    light_attribute_regist_ (this),
    dark_attribute_regist_ (this),
    fire_attribute_regist_ (this),
    ice_attribute_regist_ (this),
    item_drop_id_1_ (this),
    item_drop_id_2_ (this),
    world_drop_suffix_id_1_ (this),
    world_drop_suffix_id_2_ (this),
    ai_script_name_ (this),
    ai_script_param_1_ (this),
    ai_script_param_2_ (this),
    ai_script_param_3_ (this),
    ai_script_param_4_ (this),
    ai_reactive_type_ (this),
    ai_reactive_distance_ (this),
    ai_min_approach_distance_ (this),
    ai_max_approach_distance_ (this),
    ai_wander_distance_ (this),
    ai_walk_speed_ (this),
    ai_min_walk_delay_ (this),
    ai_max_walk_delay_ (this),
    ai_max_move_distance_ (this),
    ai_run_speed_ (this),
    ai_link_type_ (this),
    ai_link_reactive_distance_ (this),
    ai_link_min_count_ (this),
    ai_link_max_count_ (this),
    main_skill_code_ (this),
    sub_skill_code_ (this),
    special_skill_1_ (this),
    special_skill_rate_1_ (this),
    special_skill_2_ (this),
    special_skill_rate_2_ (this),
    special_skill_3_ (this),
    special_skill_rate_3_ (this),
    threat_effect_ (this),
    death_effect_ (this),
    death_delay_time_ (this),
    spawn_effect_ (this),
    spawn_interval_sec_ (this),
    peace_effect_ (this),
    peace_light_rgb_value_ (this),
    peace_light_value_ (this),
    peace_light_range_value_ (this),
    peace_light_mount_point_ (this),
    combat_effect_ (this),
    combat_light_rgb_value_ (this),
    combat_light_value_ (this),
    combat_light_range_value_ (this),
    combat_light_mount_point_ (this),
    hit_sound_ (this),
    dodge_sound_ (this),
    walk_sound_ (this),
    run_sound_ (this),
    aggressive_sound_ (this),
    weapon_material_type_ (this),
    armor_material_type_ (this),
    use_datacode_mesh_hidden_ (this),
    npc_hair_ (this),
    npc_face_ (this),
    npc_eyes_ (this),
    npc_tooth_ (this),
    npc_upper_body_ (this),
    npc_lower_body_ (this),
    npc_hand_ (this),
    npc_foot_ (this),
    npc_uppper_underwear_ (this),
    npc_lower_underwear_ (this),
    npc_helmet_ (this),
    npc_shoulder_ (this),
    npc_torso_ (this),
    npc_belt_ (this),
    npc_pants_ (this),
    npc_greave_ (this),
    npc_glove_ (this),
    npc_shoes_ (this),
    npc_righthand_ (this),
    npc_lefthand_ (this),
    use_mesh_hidden_ (this),
    use_mesh_hidden_count_ (this),
    npc_mesh_helmet_ (this),
    npc_mesh_shoulder_ (this),
    npc_mesh_torso_ (this),
    npc_mesh_belt_ (this),
    npc_mesh_pants_ (this),
    npc_mesh_greave_ (this),
    npc_mesh_glove_ (this),
    npc_mesh_shoes_ (this),
    npc_mesh_righthand_ (this),
    npc_mesh_lefthand_ (this),
    quest_function_ (this),
    introduce_talk_ (this),
    show_head_name_ (this),
    show_preview_ (this),
    bank_function_ (this),
    buy_function_ (this),
    sell_function_ (this),
    mail_function_ (this),
    auction_function_ (this),
    guild_function_ (this),
    glider_repair_function_ (this),
    craft_function_ (this),
    npc_rotate_ (this),
    subRootAnim_chance_ (this),
    subRootAnim_max_time_ (this),
    subRootAnim_min_time_ (this),
    subRootAnim1_effect_ (this),
    subRootAnim2_effect_ (this),
    subRootAnim3_effect_ (this),
    subRootAnim4_effect_ (this),
    faction_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void npc_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"npc_code" && n.namespace_ ().empty ())
      {
        this->npc_code_.set (npc_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_type" && n.namespace_ ().empty ())
      {
        this->npc_type_.set (npc_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_mesh_collision_usable" && n.namespace_ ().empty ())
      {
        this->npc_mesh_collision_usable_.set (npc_mesh_collision_usable_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_contact_object_normal" && n.namespace_ ().empty ())
      {
        this->npc_contact_object_normal_.set (npc_contact_object_normal_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"datablock_name" && n.namespace_ ().empty ())
      {
        this->datablock_name_.set (datablock_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"material_name" && n.namespace_ ().empty ())
      {
        this->material_name_.set (material_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"material_count" && n.namespace_ ().empty ())
      {
        this->material_count_.set (material_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"scale" && n.namespace_ ().empty ())
      {
        this->scale_.set (scale_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"modeling_radius" && n.namespace_ ().empty ())
      {
        this->modeling_radius_.set (modeling_radius_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"level" && n.namespace_ ().empty ())
      {
        this->level_.set (level_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"grade" && n.namespace_ ().empty ())
      {
        this->grade_.set (grade_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"exp" && n.namespace_ ().empty ())
      {
        this->exp_.set (exp_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"random_dungeon_exp_pct" && n.namespace_ ().empty ())
      {
        this->random_dungeon_exp_pct_.set (random_dungeon_exp_pct_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"world_event_exp_pct" && n.namespace_ ().empty ())
      {
        this->world_event_exp_pct_.set (world_event_exp_pct_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"hp" && n.namespace_ ().empty ())
      {
        this->hp_.set (hp_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"mp" && n.namespace_ ().empty ())
      {
        this->mp_.set (mp_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"min_attack_power" && n.namespace_ ().empty ())
      {
        this->min_attack_power_.set (min_attack_power_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"max_attack_power" && n.namespace_ ().empty ())
      {
        this->max_attack_power_.set (max_attack_power_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"physical_attack_power" && n.namespace_ ().empty ())
      {
        this->physical_attack_power_.set (physical_attack_power_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"magic_attack_power" && n.namespace_ ().empty ())
      {
        this->magic_attack_power_.set (magic_attack_power_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"hit_rate" && n.namespace_ ().empty ())
      {
        this->hit_rate_.set (hit_rate_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"physical_critical_rate" && n.namespace_ ().empty ())
      {
        this->physical_critical_rate_.set (physical_critical_rate_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"magic_critical_rate" && n.namespace_ ().empty ())
      {
        this->magic_critical_rate_.set (magic_critical_rate_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"block_rate" && n.namespace_ ().empty ())
      {
        this->block_rate_.set (block_rate_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"dodge_rate" && n.namespace_ ().empty ())
      {
        this->dodge_rate_.set (dodge_rate_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"parry_rate" && n.namespace_ ().empty ())
      {
        this->parry_rate_.set (parry_rate_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"defence" && n.namespace_ ().empty ())
      {
        this->defence_.set (defence_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"light_attribute" && n.namespace_ ().empty ())
      {
        this->light_attribute_.set (light_attribute_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"dark_attribute" && n.namespace_ ().empty ())
      {
        this->dark_attribute_.set (dark_attribute_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"fire_attribute" && n.namespace_ ().empty ())
      {
        this->fire_attribute_.set (fire_attribute_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ice_attribute" && n.namespace_ ().empty ())
      {
        this->ice_attribute_.set (ice_attribute_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"light_attribute_regist" && n.namespace_ ().empty ())
      {
        this->light_attribute_regist_.set (light_attribute_regist_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"dark_attribute_regist" && n.namespace_ ().empty ())
      {
        this->dark_attribute_regist_.set (dark_attribute_regist_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"fire_attribute_regist" && n.namespace_ ().empty ())
      {
        this->fire_attribute_regist_.set (fire_attribute_regist_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ice_attribute_regist" && n.namespace_ ().empty ())
      {
        this->ice_attribute_regist_.set (ice_attribute_regist_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"item_drop_id_1" && n.namespace_ ().empty ())
      {
        this->item_drop_id_1_.set (item_drop_id_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"item_drop_id_2" && n.namespace_ ().empty ())
      {
        this->item_drop_id_2_.set (item_drop_id_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"world_drop_suffix_id_1" && n.namespace_ ().empty ())
      {
        this->world_drop_suffix_id_1_.set (world_drop_suffix_id_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"world_drop_suffix_id_2" && n.namespace_ ().empty ())
      {
        this->world_drop_suffix_id_2_.set (world_drop_suffix_id_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_script_name" && n.namespace_ ().empty ())
      {
        this->ai_script_name_.set (ai_script_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_script_param_1" && n.namespace_ ().empty ())
      {
        this->ai_script_param_1_.set (ai_script_param_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_script_param_2" && n.namespace_ ().empty ())
      {
        this->ai_script_param_2_.set (ai_script_param_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_script_param_3" && n.namespace_ ().empty ())
      {
        this->ai_script_param_3_.set (ai_script_param_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_script_param_4" && n.namespace_ ().empty ())
      {
        this->ai_script_param_4_.set (ai_script_param_4_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_reactive_type" && n.namespace_ ().empty ())
      {
        this->ai_reactive_type_.set (ai_reactive_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_reactive_distance" && n.namespace_ ().empty ())
      {
        this->ai_reactive_distance_.set (ai_reactive_distance_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_min_approach_distance" && n.namespace_ ().empty ())
      {
        this->ai_min_approach_distance_.set (ai_min_approach_distance_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_max_approach_distance" && n.namespace_ ().empty ())
      {
        this->ai_max_approach_distance_.set (ai_max_approach_distance_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_wander_distance" && n.namespace_ ().empty ())
      {
        this->ai_wander_distance_.set (ai_wander_distance_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_walk_speed" && n.namespace_ ().empty ())
      {
        this->ai_walk_speed_.set (ai_walk_speed_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_min_walk_delay" && n.namespace_ ().empty ())
      {
        this->ai_min_walk_delay_.set (ai_min_walk_delay_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_max_walk_delay" && n.namespace_ ().empty ())
      {
        this->ai_max_walk_delay_.set (ai_max_walk_delay_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_max_move_distance" && n.namespace_ ().empty ())
      {
        this->ai_max_move_distance_.set (ai_max_move_distance_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_run_speed" && n.namespace_ ().empty ())
      {
        this->ai_run_speed_.set (ai_run_speed_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_link_type" && n.namespace_ ().empty ())
      {
        this->ai_link_type_.set (ai_link_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_link_reactive_distance" && n.namespace_ ().empty ())
      {
        this->ai_link_reactive_distance_.set (ai_link_reactive_distance_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_link_min_count" && n.namespace_ ().empty ())
      {
        this->ai_link_min_count_.set (ai_link_min_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ai_link_max_count" && n.namespace_ ().empty ())
      {
        this->ai_link_max_count_.set (ai_link_max_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"main_skill_code" && n.namespace_ ().empty ())
      {
        this->main_skill_code_.set (main_skill_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sub_skill_code" && n.namespace_ ().empty ())
      {
        this->sub_skill_code_.set (sub_skill_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"special_skill_1" && n.namespace_ ().empty ())
      {
        this->special_skill_1_.set (special_skill_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"special_skill_rate_1" && n.namespace_ ().empty ())
      {
        this->special_skill_rate_1_.set (special_skill_rate_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"special_skill_2" && n.namespace_ ().empty ())
      {
        this->special_skill_2_.set (special_skill_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"special_skill_rate_2" && n.namespace_ ().empty ())
      {
        this->special_skill_rate_2_.set (special_skill_rate_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"special_skill_3" && n.namespace_ ().empty ())
      {
        this->special_skill_3_.set (special_skill_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"special_skill_rate_3" && n.namespace_ ().empty ())
      {
        this->special_skill_rate_3_.set (special_skill_rate_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"threat_effect" && n.namespace_ ().empty ())
      {
        this->threat_effect_.set (threat_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"death_effect" && n.namespace_ ().empty ())
      {
        this->death_effect_.set (death_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"death_delay_time" && n.namespace_ ().empty ())
      {
        this->death_delay_time_.set (death_delay_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"spawn_effect" && n.namespace_ ().empty ())
      {
        this->spawn_effect_.set (spawn_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"spawn_interval_sec" && n.namespace_ ().empty ())
      {
        this->spawn_interval_sec_.set (spawn_interval_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"peace_effect" && n.namespace_ ().empty ())
      {
        this->peace_effect_.set (peace_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"peace_light_rgb_value" && n.namespace_ ().empty ())
      {
        this->peace_light_rgb_value_.set (peace_light_rgb_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"peace_light_value" && n.namespace_ ().empty ())
      {
        this->peace_light_value_.set (peace_light_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"peace_light_range_value" && n.namespace_ ().empty ())
      {
        this->peace_light_range_value_.set (peace_light_range_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"peace_light_mount_point" && n.namespace_ ().empty ())
      {
        this->peace_light_mount_point_.set (peace_light_mount_point_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"combat_effect" && n.namespace_ ().empty ())
      {
        this->combat_effect_.set (combat_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"combat_light_rgb_value" && n.namespace_ ().empty ())
      {
        this->combat_light_rgb_value_.set (combat_light_rgb_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"combat_light_value" && n.namespace_ ().empty ())
      {
        this->combat_light_value_.set (combat_light_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"combat_light_range_value" && n.namespace_ ().empty ())
      {
        this->combat_light_range_value_.set (combat_light_range_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"combat_light_mount_point" && n.namespace_ ().empty ())
      {
        this->combat_light_mount_point_.set (combat_light_mount_point_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"hit_sound" && n.namespace_ ().empty ())
      {
        this->hit_sound_.set (hit_sound_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"dodge_sound" && n.namespace_ ().empty ())
      {
        this->dodge_sound_.set (dodge_sound_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"walk_sound" && n.namespace_ ().empty ())
      {
        this->walk_sound_.set (walk_sound_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"run_sound" && n.namespace_ ().empty ())
      {
        this->run_sound_.set (run_sound_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"aggressive_sound" && n.namespace_ ().empty ())
      {
        this->aggressive_sound_.set (aggressive_sound_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"weapon_material_type" && n.namespace_ ().empty ())
      {
        this->weapon_material_type_.set (weapon_material_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"armor_material_type" && n.namespace_ ().empty ())
      {
        this->armor_material_type_.set (armor_material_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"use_datacode_mesh_hidden" && n.namespace_ ().empty ())
      {
        this->use_datacode_mesh_hidden_.set (use_datacode_mesh_hidden_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_hair" && n.namespace_ ().empty ())
      {
        this->npc_hair_.set (npc_hair_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_face" && n.namespace_ ().empty ())
      {
        this->npc_face_.set (npc_face_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_eyes" && n.namespace_ ().empty ())
      {
        this->npc_eyes_.set (npc_eyes_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_tooth" && n.namespace_ ().empty ())
      {
        this->npc_tooth_.set (npc_tooth_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_upper_body" && n.namespace_ ().empty ())
      {
        this->npc_upper_body_.set (npc_upper_body_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_lower_body" && n.namespace_ ().empty ())
      {
        this->npc_lower_body_.set (npc_lower_body_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_hand" && n.namespace_ ().empty ())
      {
        this->npc_hand_.set (npc_hand_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_foot" && n.namespace_ ().empty ())
      {
        this->npc_foot_.set (npc_foot_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_uppper_underwear" && n.namespace_ ().empty ())
      {
        this->npc_uppper_underwear_.set (npc_uppper_underwear_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_lower_underwear" && n.namespace_ ().empty ())
      {
        this->npc_lower_underwear_.set (npc_lower_underwear_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_helmet" && n.namespace_ ().empty ())
      {
        this->npc_helmet_.set (npc_helmet_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_shoulder" && n.namespace_ ().empty ())
      {
        this->npc_shoulder_.set (npc_shoulder_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_torso" && n.namespace_ ().empty ())
      {
        this->npc_torso_.set (npc_torso_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_belt" && n.namespace_ ().empty ())
      {
        this->npc_belt_.set (npc_belt_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_pants" && n.namespace_ ().empty ())
      {
        this->npc_pants_.set (npc_pants_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_greave" && n.namespace_ ().empty ())
      {
        this->npc_greave_.set (npc_greave_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_glove" && n.namespace_ ().empty ())
      {
        this->npc_glove_.set (npc_glove_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_shoes" && n.namespace_ ().empty ())
      {
        this->npc_shoes_.set (npc_shoes_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_righthand" && n.namespace_ ().empty ())
      {
        this->npc_righthand_.set (npc_righthand_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_lefthand" && n.namespace_ ().empty ())
      {
        this->npc_lefthand_.set (npc_lefthand_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"use_mesh_hidden" && n.namespace_ ().empty ())
      {
        this->use_mesh_hidden_.set (use_mesh_hidden_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"use_mesh_hidden_count" && n.namespace_ ().empty ())
      {
        this->use_mesh_hidden_count_.set (use_mesh_hidden_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_mesh_helmet" && n.namespace_ ().empty ())
      {
        this->npc_mesh_helmet_.set (npc_mesh_helmet_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_mesh_shoulder" && n.namespace_ ().empty ())
      {
        this->npc_mesh_shoulder_.set (npc_mesh_shoulder_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_mesh_torso" && n.namespace_ ().empty ())
      {
        this->npc_mesh_torso_.set (npc_mesh_torso_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_mesh_belt" && n.namespace_ ().empty ())
      {
        this->npc_mesh_belt_.set (npc_mesh_belt_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_mesh_pants" && n.namespace_ ().empty ())
      {
        this->npc_mesh_pants_.set (npc_mesh_pants_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_mesh_greave" && n.namespace_ ().empty ())
      {
        this->npc_mesh_greave_.set (npc_mesh_greave_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_mesh_glove" && n.namespace_ ().empty ())
      {
        this->npc_mesh_glove_.set (npc_mesh_glove_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_mesh_shoes" && n.namespace_ ().empty ())
      {
        this->npc_mesh_shoes_.set (npc_mesh_shoes_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_mesh_righthand" && n.namespace_ ().empty ())
      {
        this->npc_mesh_righthand_.set (npc_mesh_righthand_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_mesh_lefthand" && n.namespace_ ().empty ())
      {
        this->npc_mesh_lefthand_.set (npc_mesh_lefthand_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"quest_function" && n.namespace_ ().empty ())
      {
        this->quest_function_.set (quest_function_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"introduce_talk" && n.namespace_ ().empty ())
      {
        this->introduce_talk_.set (introduce_talk_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"show_head_name" && n.namespace_ ().empty ())
      {
        this->show_head_name_.set (show_head_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"show_preview" && n.namespace_ ().empty ())
      {
        this->show_preview_.set (show_preview_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"bank_function" && n.namespace_ ().empty ())
      {
        this->bank_function_.set (bank_function_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_function" && n.namespace_ ().empty ())
      {
        this->buy_function_.set (buy_function_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sell_function" && n.namespace_ ().empty ())
      {
        this->sell_function_.set (sell_function_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"mail_function" && n.namespace_ ().empty ())
      {
        this->mail_function_.set (mail_function_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"auction_function" && n.namespace_ ().empty ())
      {
        this->auction_function_.set (auction_function_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"guild_function" && n.namespace_ ().empty ())
      {
        this->guild_function_.set (guild_function_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"glider_repair_function" && n.namespace_ ().empty ())
      {
        this->glider_repair_function_.set (glider_repair_function_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"craft_function" && n.namespace_ ().empty ())
      {
        this->craft_function_.set (craft_function_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"npc_rotate" && n.namespace_ ().empty ())
      {
        this->npc_rotate_.set (npc_rotate_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"subRootAnim_chance" && n.namespace_ ().empty ())
      {
        this->subRootAnim_chance_.set (subRootAnim_chance_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"subRootAnim_max_time" && n.namespace_ ().empty ())
      {
        this->subRootAnim_max_time_.set (subRootAnim_max_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"subRootAnim_min_time" && n.namespace_ ().empty ())
      {
        this->subRootAnim_min_time_.set (subRootAnim_min_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"subRootAnim1_effect" && n.namespace_ ().empty ())
      {
        this->subRootAnim1_effect_.set (subRootAnim1_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"subRootAnim2_effect" && n.namespace_ ().empty ())
      {
        this->subRootAnim2_effect_.set (subRootAnim2_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"subRootAnim3_effect" && n.namespace_ ().empty ())
      {
        this->subRootAnim3_effect_.set (subRootAnim3_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"subRootAnim4_effect" && n.namespace_ ().empty ())
      {
        this->subRootAnim4_effect_.set (subRootAnim4_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"faction" && n.namespace_ ().empty ())
      {
        this->faction_.set (faction_traits::create (i, f, this));
        continue;
      }
    }

    if (!npc_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_code",
        L"");
    }

    if (!npc_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_type",
        L"");
    }

    if (!npc_mesh_collision_usable_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_mesh_collision_usable",
        L"");
    }

    if (!npc_contact_object_normal_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_contact_object_normal",
        L"");
    }

    if (!datablock_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"datablock_name",
        L"");
    }

    if (!material_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"material_name",
        L"");
    }

    if (!material_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"material_count",
        L"");
    }

    if (!scale_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"scale",
        L"");
    }

    if (!modeling_radius_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"modeling_radius",
        L"");
    }

    if (!level_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"level",
        L"");
    }

    if (!grade_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"grade",
        L"");
    }

    if (!exp_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"exp",
        L"");
    }

    if (!random_dungeon_exp_pct_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"random_dungeon_exp_pct",
        L"");
    }

    if (!world_event_exp_pct_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"world_event_exp_pct",
        L"");
    }

    if (!hp_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"hp",
        L"");
    }

    if (!mp_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"mp",
        L"");
    }

    if (!min_attack_power_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"min_attack_power",
        L"");
    }

    if (!max_attack_power_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"max_attack_power",
        L"");
    }

    if (!physical_attack_power_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"physical_attack_power",
        L"");
    }

    if (!magic_attack_power_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"magic_attack_power",
        L"");
    }

    if (!hit_rate_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"hit_rate",
        L"");
    }

    if (!physical_critical_rate_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"physical_critical_rate",
        L"");
    }

    if (!magic_critical_rate_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"magic_critical_rate",
        L"");
    }

    if (!block_rate_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"block_rate",
        L"");
    }

    if (!dodge_rate_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"dodge_rate",
        L"");
    }

    if (!parry_rate_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"parry_rate",
        L"");
    }

    if (!defence_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"defence",
        L"");
    }

    if (!light_attribute_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"light_attribute",
        L"");
    }

    if (!dark_attribute_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"dark_attribute",
        L"");
    }

    if (!fire_attribute_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"fire_attribute",
        L"");
    }

    if (!ice_attribute_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ice_attribute",
        L"");
    }

    if (!light_attribute_regist_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"light_attribute_regist",
        L"");
    }

    if (!dark_attribute_regist_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"dark_attribute_regist",
        L"");
    }

    if (!fire_attribute_regist_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"fire_attribute_regist",
        L"");
    }

    if (!ice_attribute_regist_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ice_attribute_regist",
        L"");
    }

    if (!item_drop_id_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"item_drop_id_1",
        L"");
    }

    if (!item_drop_id_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"item_drop_id_2",
        L"");
    }

    if (!world_drop_suffix_id_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"world_drop_suffix_id_1",
        L"");
    }

    if (!world_drop_suffix_id_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"world_drop_suffix_id_2",
        L"");
    }

    if (!ai_script_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_script_name",
        L"");
    }

    if (!ai_script_param_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_script_param_1",
        L"");
    }

    if (!ai_script_param_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_script_param_2",
        L"");
    }

    if (!ai_script_param_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_script_param_3",
        L"");
    }

    if (!ai_script_param_4_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_script_param_4",
        L"");
    }

    if (!ai_reactive_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_reactive_type",
        L"");
    }

    if (!ai_reactive_distance_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_reactive_distance",
        L"");
    }

    if (!ai_min_approach_distance_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_min_approach_distance",
        L"");
    }

    if (!ai_max_approach_distance_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_max_approach_distance",
        L"");
    }

    if (!ai_wander_distance_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_wander_distance",
        L"");
    }

    if (!ai_walk_speed_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_walk_speed",
        L"");
    }

    if (!ai_min_walk_delay_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_min_walk_delay",
        L"");
    }

    if (!ai_max_walk_delay_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_max_walk_delay",
        L"");
    }

    if (!ai_max_move_distance_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_max_move_distance",
        L"");
    }

    if (!ai_run_speed_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_run_speed",
        L"");
    }

    if (!ai_link_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_link_type",
        L"");
    }

    if (!ai_link_reactive_distance_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_link_reactive_distance",
        L"");
    }

    if (!ai_link_min_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_link_min_count",
        L"");
    }

    if (!ai_link_max_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ai_link_max_count",
        L"");
    }

    if (!main_skill_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"main_skill_code",
        L"");
    }

    if (!sub_skill_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sub_skill_code",
        L"");
    }

    if (!special_skill_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"special_skill_1",
        L"");
    }

    if (!special_skill_rate_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"special_skill_rate_1",
        L"");
    }

    if (!special_skill_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"special_skill_2",
        L"");
    }

    if (!special_skill_rate_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"special_skill_rate_2",
        L"");
    }

    if (!special_skill_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"special_skill_3",
        L"");
    }

    if (!special_skill_rate_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"special_skill_rate_3",
        L"");
    }

    if (!threat_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"threat_effect",
        L"");
    }

    if (!death_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"death_effect",
        L"");
    }

    if (!death_delay_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"death_delay_time",
        L"");
    }

    if (!spawn_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"spawn_effect",
        L"");
    }

    if (!spawn_interval_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"spawn_interval_sec",
        L"");
    }

    if (!peace_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"peace_effect",
        L"");
    }

    if (!peace_light_rgb_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"peace_light_rgb_value",
        L"");
    }

    if (!peace_light_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"peace_light_value",
        L"");
    }

    if (!peace_light_range_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"peace_light_range_value",
        L"");
    }

    if (!peace_light_mount_point_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"peace_light_mount_point",
        L"");
    }

    if (!combat_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"combat_effect",
        L"");
    }

    if (!combat_light_rgb_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"combat_light_rgb_value",
        L"");
    }

    if (!combat_light_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"combat_light_value",
        L"");
    }

    if (!combat_light_range_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"combat_light_range_value",
        L"");
    }

    if (!combat_light_mount_point_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"combat_light_mount_point",
        L"");
    }

    if (!hit_sound_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"hit_sound",
        L"");
    }

    if (!dodge_sound_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"dodge_sound",
        L"");
    }

    if (!walk_sound_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"walk_sound",
        L"");
    }

    if (!run_sound_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"run_sound",
        L"");
    }

    if (!aggressive_sound_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"aggressive_sound",
        L"");
    }

    if (!weapon_material_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"weapon_material_type",
        L"");
    }

    if (!armor_material_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"armor_material_type",
        L"");
    }

    if (!use_datacode_mesh_hidden_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"use_datacode_mesh_hidden",
        L"");
    }

    if (!npc_hair_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_hair",
        L"");
    }

    if (!npc_face_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_face",
        L"");
    }

    if (!npc_eyes_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_eyes",
        L"");
    }

    if (!npc_tooth_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_tooth",
        L"");
    }

    if (!npc_upper_body_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_upper_body",
        L"");
    }

    if (!npc_lower_body_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_lower_body",
        L"");
    }

    if (!npc_hand_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_hand",
        L"");
    }

    if (!npc_foot_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_foot",
        L"");
    }

    if (!npc_uppper_underwear_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_uppper_underwear",
        L"");
    }

    if (!npc_lower_underwear_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_lower_underwear",
        L"");
    }

    if (!npc_helmet_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_helmet",
        L"");
    }

    if (!npc_shoulder_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_shoulder",
        L"");
    }

    if (!npc_torso_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_torso",
        L"");
    }

    if (!npc_belt_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_belt",
        L"");
    }

    if (!npc_pants_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_pants",
        L"");
    }

    if (!npc_greave_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_greave",
        L"");
    }

    if (!npc_glove_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_glove",
        L"");
    }

    if (!npc_shoes_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_shoes",
        L"");
    }

    if (!npc_righthand_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_righthand",
        L"");
    }

    if (!npc_lefthand_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_lefthand",
        L"");
    }

    if (!use_mesh_hidden_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"use_mesh_hidden",
        L"");
    }

    if (!use_mesh_hidden_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"use_mesh_hidden_count",
        L"");
    }

    if (!npc_mesh_helmet_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_mesh_helmet",
        L"");
    }

    if (!npc_mesh_shoulder_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_mesh_shoulder",
        L"");
    }

    if (!npc_mesh_torso_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_mesh_torso",
        L"");
    }

    if (!npc_mesh_belt_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_mesh_belt",
        L"");
    }

    if (!npc_mesh_pants_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_mesh_pants",
        L"");
    }

    if (!npc_mesh_greave_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_mesh_greave",
        L"");
    }

    if (!npc_mesh_glove_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_mesh_glove",
        L"");
    }

    if (!npc_mesh_shoes_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_mesh_shoes",
        L"");
    }

    if (!npc_mesh_righthand_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_mesh_righthand",
        L"");
    }

    if (!npc_mesh_lefthand_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_mesh_lefthand",
        L"");
    }

    if (!quest_function_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"quest_function",
        L"");
    }

    if (!introduce_talk_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"introduce_talk",
        L"");
    }

    if (!show_head_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"show_head_name",
        L"");
    }

    if (!show_preview_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"show_preview",
        L"");
    }

    if (!bank_function_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"bank_function",
        L"");
    }

    if (!buy_function_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_function",
        L"");
    }

    if (!sell_function_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sell_function",
        L"");
    }

    if (!mail_function_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"mail_function",
        L"");
    }

    if (!auction_function_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"auction_function",
        L"");
    }

    if (!guild_function_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"guild_function",
        L"");
    }

    if (!glider_repair_function_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"glider_repair_function",
        L"");
    }

    if (!craft_function_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"craft_function",
        L"");
    }

    if (!npc_rotate_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"npc_rotate",
        L"");
    }

    if (!subRootAnim_chance_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"subRootAnim_chance",
        L"");
    }

    if (!subRootAnim_max_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"subRootAnim_max_time",
        L"");
    }

    if (!subRootAnim_min_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"subRootAnim_min_time",
        L"");
    }

    if (!subRootAnim1_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"subRootAnim1_effect",
        L"");
    }

    if (!subRootAnim2_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"subRootAnim2_effect",
        L"");
    }

    if (!subRootAnim3_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"subRootAnim3_effect",
        L"");
    }

    if (!subRootAnim4_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"subRootAnim4_effect",
        L"");
    }

    if (!faction_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"faction",
        L"");
    }
  }

  npc_t* npc_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class npc_t (*this, f, c);
  }

  npc_t& npc_t::
  operator= (const npc_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->npc_code_ = x.npc_code_;
      this->npc_type_ = x.npc_type_;
      this->npc_mesh_collision_usable_ = x.npc_mesh_collision_usable_;
      this->npc_contact_object_normal_ = x.npc_contact_object_normal_;
      this->datablock_name_ = x.datablock_name_;
      this->material_name_ = x.material_name_;
      this->material_count_ = x.material_count_;
      this->scale_ = x.scale_;
      this->modeling_radius_ = x.modeling_radius_;
      this->level_ = x.level_;
      this->grade_ = x.grade_;
      this->exp_ = x.exp_;
      this->random_dungeon_exp_pct_ = x.random_dungeon_exp_pct_;
      this->world_event_exp_pct_ = x.world_event_exp_pct_;
      this->hp_ = x.hp_;
      this->mp_ = x.mp_;
      this->min_attack_power_ = x.min_attack_power_;
      this->max_attack_power_ = x.max_attack_power_;
      this->physical_attack_power_ = x.physical_attack_power_;
      this->magic_attack_power_ = x.magic_attack_power_;
      this->hit_rate_ = x.hit_rate_;
      this->physical_critical_rate_ = x.physical_critical_rate_;
      this->magic_critical_rate_ = x.magic_critical_rate_;
      this->block_rate_ = x.block_rate_;
      this->dodge_rate_ = x.dodge_rate_;
      this->parry_rate_ = x.parry_rate_;
      this->defence_ = x.defence_;
      this->light_attribute_ = x.light_attribute_;
      this->dark_attribute_ = x.dark_attribute_;
      this->fire_attribute_ = x.fire_attribute_;
      this->ice_attribute_ = x.ice_attribute_;
      this->light_attribute_regist_ = x.light_attribute_regist_;
      this->dark_attribute_regist_ = x.dark_attribute_regist_;
      this->fire_attribute_regist_ = x.fire_attribute_regist_;
      this->ice_attribute_regist_ = x.ice_attribute_regist_;
      this->item_drop_id_1_ = x.item_drop_id_1_;
      this->item_drop_id_2_ = x.item_drop_id_2_;
      this->world_drop_suffix_id_1_ = x.world_drop_suffix_id_1_;
      this->world_drop_suffix_id_2_ = x.world_drop_suffix_id_2_;
      this->ai_script_name_ = x.ai_script_name_;
      this->ai_script_param_1_ = x.ai_script_param_1_;
      this->ai_script_param_2_ = x.ai_script_param_2_;
      this->ai_script_param_3_ = x.ai_script_param_3_;
      this->ai_script_param_4_ = x.ai_script_param_4_;
      this->ai_reactive_type_ = x.ai_reactive_type_;
      this->ai_reactive_distance_ = x.ai_reactive_distance_;
      this->ai_min_approach_distance_ = x.ai_min_approach_distance_;
      this->ai_max_approach_distance_ = x.ai_max_approach_distance_;
      this->ai_wander_distance_ = x.ai_wander_distance_;
      this->ai_walk_speed_ = x.ai_walk_speed_;
      this->ai_min_walk_delay_ = x.ai_min_walk_delay_;
      this->ai_max_walk_delay_ = x.ai_max_walk_delay_;
      this->ai_max_move_distance_ = x.ai_max_move_distance_;
      this->ai_run_speed_ = x.ai_run_speed_;
      this->ai_link_type_ = x.ai_link_type_;
      this->ai_link_reactive_distance_ = x.ai_link_reactive_distance_;
      this->ai_link_min_count_ = x.ai_link_min_count_;
      this->ai_link_max_count_ = x.ai_link_max_count_;
      this->main_skill_code_ = x.main_skill_code_;
      this->sub_skill_code_ = x.sub_skill_code_;
      this->special_skill_1_ = x.special_skill_1_;
      this->special_skill_rate_1_ = x.special_skill_rate_1_;
      this->special_skill_2_ = x.special_skill_2_;
      this->special_skill_rate_2_ = x.special_skill_rate_2_;
      this->special_skill_3_ = x.special_skill_3_;
      this->special_skill_rate_3_ = x.special_skill_rate_3_;
      this->threat_effect_ = x.threat_effect_;
      this->death_effect_ = x.death_effect_;
      this->death_delay_time_ = x.death_delay_time_;
      this->spawn_effect_ = x.spawn_effect_;
      this->spawn_interval_sec_ = x.spawn_interval_sec_;
      this->peace_effect_ = x.peace_effect_;
      this->peace_light_rgb_value_ = x.peace_light_rgb_value_;
      this->peace_light_value_ = x.peace_light_value_;
      this->peace_light_range_value_ = x.peace_light_range_value_;
      this->peace_light_mount_point_ = x.peace_light_mount_point_;
      this->combat_effect_ = x.combat_effect_;
      this->combat_light_rgb_value_ = x.combat_light_rgb_value_;
      this->combat_light_value_ = x.combat_light_value_;
      this->combat_light_range_value_ = x.combat_light_range_value_;
      this->combat_light_mount_point_ = x.combat_light_mount_point_;
      this->hit_sound_ = x.hit_sound_;
      this->dodge_sound_ = x.dodge_sound_;
      this->walk_sound_ = x.walk_sound_;
      this->run_sound_ = x.run_sound_;
      this->aggressive_sound_ = x.aggressive_sound_;
      this->weapon_material_type_ = x.weapon_material_type_;
      this->armor_material_type_ = x.armor_material_type_;
      this->use_datacode_mesh_hidden_ = x.use_datacode_mesh_hidden_;
      this->npc_hair_ = x.npc_hair_;
      this->npc_face_ = x.npc_face_;
      this->npc_eyes_ = x.npc_eyes_;
      this->npc_tooth_ = x.npc_tooth_;
      this->npc_upper_body_ = x.npc_upper_body_;
      this->npc_lower_body_ = x.npc_lower_body_;
      this->npc_hand_ = x.npc_hand_;
      this->npc_foot_ = x.npc_foot_;
      this->npc_uppper_underwear_ = x.npc_uppper_underwear_;
      this->npc_lower_underwear_ = x.npc_lower_underwear_;
      this->npc_helmet_ = x.npc_helmet_;
      this->npc_shoulder_ = x.npc_shoulder_;
      this->npc_torso_ = x.npc_torso_;
      this->npc_belt_ = x.npc_belt_;
      this->npc_pants_ = x.npc_pants_;
      this->npc_greave_ = x.npc_greave_;
      this->npc_glove_ = x.npc_glove_;
      this->npc_shoes_ = x.npc_shoes_;
      this->npc_righthand_ = x.npc_righthand_;
      this->npc_lefthand_ = x.npc_lefthand_;
      this->use_mesh_hidden_ = x.use_mesh_hidden_;
      this->use_mesh_hidden_count_ = x.use_mesh_hidden_count_;
      this->npc_mesh_helmet_ = x.npc_mesh_helmet_;
      this->npc_mesh_shoulder_ = x.npc_mesh_shoulder_;
      this->npc_mesh_torso_ = x.npc_mesh_torso_;
      this->npc_mesh_belt_ = x.npc_mesh_belt_;
      this->npc_mesh_pants_ = x.npc_mesh_pants_;
      this->npc_mesh_greave_ = x.npc_mesh_greave_;
      this->npc_mesh_glove_ = x.npc_mesh_glove_;
      this->npc_mesh_shoes_ = x.npc_mesh_shoes_;
      this->npc_mesh_righthand_ = x.npc_mesh_righthand_;
      this->npc_mesh_lefthand_ = x.npc_mesh_lefthand_;
      this->quest_function_ = x.quest_function_;
      this->introduce_talk_ = x.introduce_talk_;
      this->show_head_name_ = x.show_head_name_;
      this->show_preview_ = x.show_preview_;
      this->bank_function_ = x.bank_function_;
      this->buy_function_ = x.buy_function_;
      this->sell_function_ = x.sell_function_;
      this->mail_function_ = x.mail_function_;
      this->auction_function_ = x.auction_function_;
      this->guild_function_ = x.guild_function_;
      this->glider_repair_function_ = x.glider_repair_function_;
      this->craft_function_ = x.craft_function_;
      this->npc_rotate_ = x.npc_rotate_;
      this->subRootAnim_chance_ = x.subRootAnim_chance_;
      this->subRootAnim_max_time_ = x.subRootAnim_max_time_;
      this->subRootAnim_min_time_ = x.subRootAnim_min_time_;
      this->subRootAnim1_effect_ = x.subRootAnim1_effect_;
      this->subRootAnim2_effect_ = x.subRootAnim2_effect_;
      this->subRootAnim3_effect_ = x.subRootAnim3_effect_;
      this->subRootAnim4_effect_ = x.subRootAnim4_effect_;
      this->faction_ = x.faction_;
    }

    return *this;
  }

  npc_t::
  ~npc_t ()
  {
  }

  // ai_reactive_type_t
  //

  ai_reactive_type_t::
  ai_reactive_type_t ()
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > ()
  {
  }

  ai_reactive_type_t::
  ai_reactive_type_t (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (_xsd_unsigned_byte_base)
  {
  }

  ai_reactive_type_t::
  ai_reactive_type_t (const ai_reactive_type_t& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (x, f, c)
  {
  }

  ai_reactive_type_t::
  ai_reactive_type_t (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (e, f, c)
  {
  }

  ai_reactive_type_t::
  ai_reactive_type_t (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (a, f, c)
  {
  }

  ai_reactive_type_t::
  ai_reactive_type_t (const ::std::wstring& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  ai_reactive_type_t* ai_reactive_type_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class ai_reactive_type_t (*this, f, c);
  }

  ai_reactive_type_t::
  ~ai_reactive_type_t ()
  {
  }

  // npc_table
  //

  npc_table::
  npc_table ()
  : ::xml_schema::type (),
    npc_template_ (this)
  {
  }

  npc_table::
  npc_table (const npc_table& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    npc_template_ (x.npc_template_, f, this)
  {
  }

  npc_table::
  npc_table (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    npc_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void npc_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // npc_template
      //
      if (n.name () == L"npc_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< npc_template_type > r (
          npc_template_traits::create (i, f, this));

        this->npc_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  npc_table* npc_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class npc_table (*this, f, c);
  }

  npc_table& npc_table::
  operator= (const npc_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->npc_template_ = x.npc_template_;
    }

    return *this;
  }

  npc_table::
  ~npc_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (const ::std::wstring& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::npc_table > (
      ::gdt::npc_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (const ::std::wstring& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::npc_table > (
      ::gdt::npc_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (const ::std::wstring& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::npc_table > (
      ::gdt::npc_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::npc_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::npc_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::npc_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::npc_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::npc_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::std::istream& is,
              const ::std::wstring& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::npc_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::npc_table > (
      ::gdt::npc_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::npc_table > (
      ::gdt::npc_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::npc_table > (
      ::gdt::npc_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::npc_table > (
        ::gdt::npc_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"npc_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::npc_table > r (
        ::xsd::cxx::tree::traits< ::gdt::npc_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"npc_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"npc_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::npc_table > r (
        ::xsd::cxx::tree::traits< ::gdt::npc_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"npc_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  npc_table_ (::std::ostream& o,
              const ::gdt::npc_table& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::npc_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  npc_table_ (::std::ostream& o,
              const ::gdt::npc_table& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::npc_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  npc_table_ (::std::ostream& o,
              const ::gdt::npc_table& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::npc_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  npc_table_ (::xercesc::XMLFormatTarget& t,
              const ::gdt::npc_table& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::npc_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  npc_table_ (::xercesc::XMLFormatTarget& t,
              const ::gdt::npc_table& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::npc_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  npc_table_ (::xercesc::XMLFormatTarget& t,
              const ::gdt::npc_table& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::npc_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  npc_table_ (::xercesc::DOMDocument& d,
              const ::gdt::npc_table& s,
              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"npc_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"npc_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  npc_table_ (const ::gdt::npc_table& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"npc_table",
        L"",
        m, f));

    ::gdt::npc_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const npc_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // npc_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_code",
          e));

      a << i.npc_code ();
    }

    // npc_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_type",
          e));

      a << i.npc_type ();
    }

    // npc_mesh_collision_usable
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_mesh_collision_usable",
          e));

      a << i.npc_mesh_collision_usable ();
    }

    // npc_contact_object_normal
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_contact_object_normal",
          e));

      a << i.npc_contact_object_normal ();
    }

    // datablock_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"datablock_name",
          e));

      a << i.datablock_name ();
    }

    // material_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"material_name",
          e));

      a << i.material_name ();
    }

    // material_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"material_count",
          e));

      a << i.material_count ();
    }

    // scale
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"scale",
          e));

      a << i.scale ();
    }

    // modeling_radius
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"modeling_radius",
          e));

      a << i.modeling_radius ();
    }

    // level
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"level",
          e));

      a << i.level ();
    }

    // grade
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"grade",
          e));

      a << i.grade ();
    }

    // exp
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"exp",
          e));

      a << i.exp ();
    }

    // random_dungeon_exp_pct
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"random_dungeon_exp_pct",
          e));

      a << i.random_dungeon_exp_pct ();
    }

    // world_event_exp_pct
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"world_event_exp_pct",
          e));

      a << i.world_event_exp_pct ();
    }

    // hp
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"hp",
          e));

      a << i.hp ();
    }

    // mp
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"mp",
          e));

      a << i.mp ();
    }

    // min_attack_power
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"min_attack_power",
          e));

      a << i.min_attack_power ();
    }

    // max_attack_power
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"max_attack_power",
          e));

      a << i.max_attack_power ();
    }

    // physical_attack_power
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"physical_attack_power",
          e));

      a << i.physical_attack_power ();
    }

    // magic_attack_power
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"magic_attack_power",
          e));

      a << i.magic_attack_power ();
    }

    // hit_rate
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"hit_rate",
          e));

      a << i.hit_rate ();
    }

    // physical_critical_rate
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"physical_critical_rate",
          e));

      a << i.physical_critical_rate ();
    }

    // magic_critical_rate
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"magic_critical_rate",
          e));

      a << i.magic_critical_rate ();
    }

    // block_rate
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"block_rate",
          e));

      a << i.block_rate ();
    }

    // dodge_rate
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"dodge_rate",
          e));

      a << i.dodge_rate ();
    }

    // parry_rate
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"parry_rate",
          e));

      a << i.parry_rate ();
    }

    // defence
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"defence",
          e));

      a << i.defence ();
    }

    // light_attribute
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"light_attribute",
          e));

      a << i.light_attribute ();
    }

    // dark_attribute
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"dark_attribute",
          e));

      a << i.dark_attribute ();
    }

    // fire_attribute
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"fire_attribute",
          e));

      a << i.fire_attribute ();
    }

    // ice_attribute
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ice_attribute",
          e));

      a << i.ice_attribute ();
    }

    // light_attribute_regist
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"light_attribute_regist",
          e));

      a << i.light_attribute_regist ();
    }

    // dark_attribute_regist
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"dark_attribute_regist",
          e));

      a << i.dark_attribute_regist ();
    }

    // fire_attribute_regist
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"fire_attribute_regist",
          e));

      a << i.fire_attribute_regist ();
    }

    // ice_attribute_regist
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ice_attribute_regist",
          e));

      a << i.ice_attribute_regist ();
    }

    // item_drop_id_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"item_drop_id_1",
          e));

      a << i.item_drop_id_1 ();
    }

    // item_drop_id_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"item_drop_id_2",
          e));

      a << i.item_drop_id_2 ();
    }

    // world_drop_suffix_id_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"world_drop_suffix_id_1",
          e));

      a << i.world_drop_suffix_id_1 ();
    }

    // world_drop_suffix_id_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"world_drop_suffix_id_2",
          e));

      a << i.world_drop_suffix_id_2 ();
    }

    // ai_script_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_script_name",
          e));

      a << i.ai_script_name ();
    }

    // ai_script_param_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_script_param_1",
          e));

      a << i.ai_script_param_1 ();
    }

    // ai_script_param_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_script_param_2",
          e));

      a << i.ai_script_param_2 ();
    }

    // ai_script_param_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_script_param_3",
          e));

      a << i.ai_script_param_3 ();
    }

    // ai_script_param_4
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_script_param_4",
          e));

      a << i.ai_script_param_4 ();
    }

    // ai_reactive_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_reactive_type",
          e));

      a << i.ai_reactive_type ();
    }

    // ai_reactive_distance
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_reactive_distance",
          e));

      a << i.ai_reactive_distance ();
    }

    // ai_min_approach_distance
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_min_approach_distance",
          e));

      a << i.ai_min_approach_distance ();
    }

    // ai_max_approach_distance
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_max_approach_distance",
          e));

      a << i.ai_max_approach_distance ();
    }

    // ai_wander_distance
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_wander_distance",
          e));

      a << i.ai_wander_distance ();
    }

    // ai_walk_speed
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_walk_speed",
          e));

      a << i.ai_walk_speed ();
    }

    // ai_min_walk_delay
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_min_walk_delay",
          e));

      a << i.ai_min_walk_delay ();
    }

    // ai_max_walk_delay
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_max_walk_delay",
          e));

      a << i.ai_max_walk_delay ();
    }

    // ai_max_move_distance
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_max_move_distance",
          e));

      a << i.ai_max_move_distance ();
    }

    // ai_run_speed
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_run_speed",
          e));

      a << i.ai_run_speed ();
    }

    // ai_link_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_link_type",
          e));

      a << i.ai_link_type ();
    }

    // ai_link_reactive_distance
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_link_reactive_distance",
          e));

      a << i.ai_link_reactive_distance ();
    }

    // ai_link_min_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_link_min_count",
          e));

      a << i.ai_link_min_count ();
    }

    // ai_link_max_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ai_link_max_count",
          e));

      a << i.ai_link_max_count ();
    }

    // main_skill_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"main_skill_code",
          e));

      a << i.main_skill_code ();
    }

    // sub_skill_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sub_skill_code",
          e));

      a << i.sub_skill_code ();
    }

    // special_skill_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"special_skill_1",
          e));

      a << i.special_skill_1 ();
    }

    // special_skill_rate_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"special_skill_rate_1",
          e));

      a << i.special_skill_rate_1 ();
    }

    // special_skill_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"special_skill_2",
          e));

      a << i.special_skill_2 ();
    }

    // special_skill_rate_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"special_skill_rate_2",
          e));

      a << i.special_skill_rate_2 ();
    }

    // special_skill_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"special_skill_3",
          e));

      a << i.special_skill_3 ();
    }

    // special_skill_rate_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"special_skill_rate_3",
          e));

      a << i.special_skill_rate_3 ();
    }

    // threat_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"threat_effect",
          e));

      a << i.threat_effect ();
    }

    // death_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"death_effect",
          e));

      a << i.death_effect ();
    }

    // death_delay_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"death_delay_time",
          e));

      a << i.death_delay_time ();
    }

    // spawn_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"spawn_effect",
          e));

      a << i.spawn_effect ();
    }

    // spawn_interval_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"spawn_interval_sec",
          e));

      a << i.spawn_interval_sec ();
    }

    // peace_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"peace_effect",
          e));

      a << i.peace_effect ();
    }

    // peace_light_rgb_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"peace_light_rgb_value",
          e));

      a << i.peace_light_rgb_value ();
    }

    // peace_light_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"peace_light_value",
          e));

      a << i.peace_light_value ();
    }

    // peace_light_range_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"peace_light_range_value",
          e));

      a << i.peace_light_range_value ();
    }

    // peace_light_mount_point
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"peace_light_mount_point",
          e));

      a << i.peace_light_mount_point ();
    }

    // combat_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"combat_effect",
          e));

      a << i.combat_effect ();
    }

    // combat_light_rgb_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"combat_light_rgb_value",
          e));

      a << i.combat_light_rgb_value ();
    }

    // combat_light_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"combat_light_value",
          e));

      a << i.combat_light_value ();
    }

    // combat_light_range_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"combat_light_range_value",
          e));

      a << i.combat_light_range_value ();
    }

    // combat_light_mount_point
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"combat_light_mount_point",
          e));

      a << i.combat_light_mount_point ();
    }

    // hit_sound
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"hit_sound",
          e));

      a << i.hit_sound ();
    }

    // dodge_sound
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"dodge_sound",
          e));

      a << i.dodge_sound ();
    }

    // walk_sound
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"walk_sound",
          e));

      a << i.walk_sound ();
    }

    // run_sound
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"run_sound",
          e));

      a << i.run_sound ();
    }

    // aggressive_sound
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"aggressive_sound",
          e));

      a << i.aggressive_sound ();
    }

    // weapon_material_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"weapon_material_type",
          e));

      a << i.weapon_material_type ();
    }

    // armor_material_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"armor_material_type",
          e));

      a << i.armor_material_type ();
    }

    // use_datacode_mesh_hidden
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"use_datacode_mesh_hidden",
          e));

      a << i.use_datacode_mesh_hidden ();
    }

    // npc_hair
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_hair",
          e));

      a << i.npc_hair ();
    }

    // npc_face
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_face",
          e));

      a << i.npc_face ();
    }

    // npc_eyes
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_eyes",
          e));

      a << i.npc_eyes ();
    }

    // npc_tooth
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_tooth",
          e));

      a << i.npc_tooth ();
    }

    // npc_upper_body
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_upper_body",
          e));

      a << i.npc_upper_body ();
    }

    // npc_lower_body
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_lower_body",
          e));

      a << i.npc_lower_body ();
    }

    // npc_hand
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_hand",
          e));

      a << i.npc_hand ();
    }

    // npc_foot
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_foot",
          e));

      a << i.npc_foot ();
    }

    // npc_uppper_underwear
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_uppper_underwear",
          e));

      a << i.npc_uppper_underwear ();
    }

    // npc_lower_underwear
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_lower_underwear",
          e));

      a << i.npc_lower_underwear ();
    }

    // npc_helmet
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_helmet",
          e));

      a << i.npc_helmet ();
    }

    // npc_shoulder
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_shoulder",
          e));

      a << i.npc_shoulder ();
    }

    // npc_torso
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_torso",
          e));

      a << i.npc_torso ();
    }

    // npc_belt
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_belt",
          e));

      a << i.npc_belt ();
    }

    // npc_pants
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_pants",
          e));

      a << i.npc_pants ();
    }

    // npc_greave
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_greave",
          e));

      a << i.npc_greave ();
    }

    // npc_glove
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_glove",
          e));

      a << i.npc_glove ();
    }

    // npc_shoes
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_shoes",
          e));

      a << i.npc_shoes ();
    }

    // npc_righthand
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_righthand",
          e));

      a << i.npc_righthand ();
    }

    // npc_lefthand
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_lefthand",
          e));

      a << i.npc_lefthand ();
    }

    // use_mesh_hidden
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"use_mesh_hidden",
          e));

      a << i.use_mesh_hidden ();
    }

    // use_mesh_hidden_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"use_mesh_hidden_count",
          e));

      a << i.use_mesh_hidden_count ();
    }

    // npc_mesh_helmet
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_mesh_helmet",
          e));

      a << i.npc_mesh_helmet ();
    }

    // npc_mesh_shoulder
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_mesh_shoulder",
          e));

      a << i.npc_mesh_shoulder ();
    }

    // npc_mesh_torso
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_mesh_torso",
          e));

      a << i.npc_mesh_torso ();
    }

    // npc_mesh_belt
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_mesh_belt",
          e));

      a << i.npc_mesh_belt ();
    }

    // npc_mesh_pants
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_mesh_pants",
          e));

      a << i.npc_mesh_pants ();
    }

    // npc_mesh_greave
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_mesh_greave",
          e));

      a << i.npc_mesh_greave ();
    }

    // npc_mesh_glove
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_mesh_glove",
          e));

      a << i.npc_mesh_glove ();
    }

    // npc_mesh_shoes
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_mesh_shoes",
          e));

      a << i.npc_mesh_shoes ();
    }

    // npc_mesh_righthand
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_mesh_righthand",
          e));

      a << i.npc_mesh_righthand ();
    }

    // npc_mesh_lefthand
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_mesh_lefthand",
          e));

      a << i.npc_mesh_lefthand ();
    }

    // quest_function
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"quest_function",
          e));

      a << i.quest_function ();
    }

    // introduce_talk
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"introduce_talk",
          e));

      a << i.introduce_talk ();
    }

    // show_head_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"show_head_name",
          e));

      a << i.show_head_name ();
    }

    // show_preview
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"show_preview",
          e));

      a << i.show_preview ();
    }

    // bank_function
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"bank_function",
          e));

      a << i.bank_function ();
    }

    // buy_function
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_function",
          e));

      a << i.buy_function ();
    }

    // sell_function
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sell_function",
          e));

      a << i.sell_function ();
    }

    // mail_function
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"mail_function",
          e));

      a << i.mail_function ();
    }

    // auction_function
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"auction_function",
          e));

      a << i.auction_function ();
    }

    // guild_function
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"guild_function",
          e));

      a << i.guild_function ();
    }

    // glider_repair_function
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"glider_repair_function",
          e));

      a << i.glider_repair_function ();
    }

    // craft_function
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"craft_function",
          e));

      a << i.craft_function ();
    }

    // npc_rotate
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"npc_rotate",
          e));

      a << i.npc_rotate ();
    }

    // subRootAnim_chance
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"subRootAnim_chance",
          e));

      a << i.subRootAnim_chance ();
    }

    // subRootAnim_max_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"subRootAnim_max_time",
          e));

      a << i.subRootAnim_max_time ();
    }

    // subRootAnim_min_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"subRootAnim_min_time",
          e));

      a << i.subRootAnim_min_time ();
    }

    // subRootAnim1_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"subRootAnim1_effect",
          e));

      a << i.subRootAnim1_effect ();
    }

    // subRootAnim2_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"subRootAnim2_effect",
          e));

      a << i.subRootAnim2_effect ();
    }

    // subRootAnim3_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"subRootAnim3_effect",
          e));

      a << i.subRootAnim3_effect ();
    }

    // subRootAnim4_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"subRootAnim4_effect",
          e));

      a << i.subRootAnim4_effect ();
    }

    // faction
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"faction",
          e));

      a << i.faction ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const ai_reactive_type_t& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const ai_reactive_type_t& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const ai_reactive_type_t& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const npc_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // npc_template
    //
    for (npc_table::npc_template_const_iterator
         b (i.npc_template ().begin ()), n (i.npc_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"npc_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

