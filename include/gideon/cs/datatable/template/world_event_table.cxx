// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "world_event_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // world_event_t
  //

  world_event_t::
  world_event_t ()
  : ::xml_schema::type (),
    world_event_code_ (this),
    world_map_code_ (this),
    unique_event_ (this),
    event_phase_count_ (this),
    event_open_type_ (this),
    open_param_1_ (this),
    open_param_2_ (this),
    close_min_ (this),
    fail_min_ (this),
    min_ranking_score_ (this),
    reward_cost_type_ (this),
    reward_cost_value_ (this),
    event_wait_sec_ (this),
    min_level_ (this),
    max_level_ (this)
  {
  }

  world_event_t::
  world_event_t (const world_event_code_type& world_event_code,
                 const world_map_code_type& world_map_code,
                 const unique_event_type& unique_event,
                 const event_phase_count_type& event_phase_count,
                 const event_open_type_type& event_open_type,
                 const open_param_1_type& open_param_1,
                 const open_param_2_type& open_param_2,
                 const close_min_type& close_min,
                 const fail_min_type& fail_min,
                 const min_ranking_score_type& min_ranking_score,
                 const reward_cost_type_type& reward_cost_type,
                 const reward_cost_value_type& reward_cost_value,
                 const event_wait_sec_type& event_wait_sec,
                 const min_level_type& min_level,
                 const max_level_type& max_level)
  : ::xml_schema::type (),
    world_event_code_ (world_event_code, this),
    world_map_code_ (world_map_code, this),
    unique_event_ (unique_event, this),
    event_phase_count_ (event_phase_count, this),
    event_open_type_ (event_open_type, this),
    open_param_1_ (open_param_1, this),
    open_param_2_ (open_param_2, this),
    close_min_ (close_min, this),
    fail_min_ (fail_min, this),
    min_ranking_score_ (min_ranking_score, this),
    reward_cost_type_ (reward_cost_type, this),
    reward_cost_value_ (reward_cost_value, this),
    event_wait_sec_ (event_wait_sec, this),
    min_level_ (min_level, this),
    max_level_ (max_level, this)
  {
  }

  world_event_t::
  world_event_t (const world_event_t& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    world_event_code_ (x.world_event_code_, f, this),
    world_map_code_ (x.world_map_code_, f, this),
    unique_event_ (x.unique_event_, f, this),
    event_phase_count_ (x.event_phase_count_, f, this),
    event_open_type_ (x.event_open_type_, f, this),
    open_param_1_ (x.open_param_1_, f, this),
    open_param_2_ (x.open_param_2_, f, this),
    close_min_ (x.close_min_, f, this),
    fail_min_ (x.fail_min_, f, this),
    min_ranking_score_ (x.min_ranking_score_, f, this),
    reward_cost_type_ (x.reward_cost_type_, f, this),
    reward_cost_value_ (x.reward_cost_value_, f, this),
    event_wait_sec_ (x.event_wait_sec_, f, this),
    min_level_ (x.min_level_, f, this),
    max_level_ (x.max_level_, f, this)
  {
  }

  world_event_t::
  world_event_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    world_event_code_ (this),
    world_map_code_ (this),
    unique_event_ (this),
    event_phase_count_ (this),
    event_open_type_ (this),
    open_param_1_ (this),
    open_param_2_ (this),
    close_min_ (this),
    fail_min_ (this),
    min_ranking_score_ (this),
    reward_cost_type_ (this),
    reward_cost_value_ (this),
    event_wait_sec_ (this),
    min_level_ (this),
    max_level_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void world_event_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"world_event_code" && n.namespace_ ().empty ())
      {
        this->world_event_code_.set (world_event_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"world_map_code" && n.namespace_ ().empty ())
      {
        this->world_map_code_.set (world_map_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"unique_event" && n.namespace_ ().empty ())
      {
        this->unique_event_.set (unique_event_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"event_phase_count" && n.namespace_ ().empty ())
      {
        this->event_phase_count_.set (event_phase_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"event_open_type" && n.namespace_ ().empty ())
      {
        this->event_open_type_.set (event_open_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"open_param_1" && n.namespace_ ().empty ())
      {
        this->open_param_1_.set (open_param_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"open_param_2" && n.namespace_ ().empty ())
      {
        this->open_param_2_.set (open_param_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"close_min" && n.namespace_ ().empty ())
      {
        this->close_min_.set (close_min_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"fail_min" && n.namespace_ ().empty ())
      {
        this->fail_min_.set (fail_min_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"min_ranking_score" && n.namespace_ ().empty ())
      {
        this->min_ranking_score_.set (min_ranking_score_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"reward_cost_type" && n.namespace_ ().empty ())
      {
        this->reward_cost_type_.set (reward_cost_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"reward_cost_value" && n.namespace_ ().empty ())
      {
        this->reward_cost_value_.set (reward_cost_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"event_wait_sec" && n.namespace_ ().empty ())
      {
        this->event_wait_sec_.set (event_wait_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"min_level" && n.namespace_ ().empty ())
      {
        this->min_level_.set (min_level_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"max_level" && n.namespace_ ().empty ())
      {
        this->max_level_.set (max_level_traits::create (i, f, this));
        continue;
      }
    }

    if (!world_event_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"world_event_code",
        L"");
    }

    if (!world_map_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"world_map_code",
        L"");
    }

    if (!unique_event_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"unique_event",
        L"");
    }

    if (!event_phase_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"event_phase_count",
        L"");
    }

    if (!event_open_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"event_open_type",
        L"");
    }

    if (!open_param_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"open_param_1",
        L"");
    }

    if (!open_param_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"open_param_2",
        L"");
    }

    if (!close_min_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"close_min",
        L"");
    }

    if (!fail_min_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"fail_min",
        L"");
    }

    if (!min_ranking_score_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"min_ranking_score",
        L"");
    }

    if (!reward_cost_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"reward_cost_type",
        L"");
    }

    if (!reward_cost_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"reward_cost_value",
        L"");
    }

    if (!event_wait_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"event_wait_sec",
        L"");
    }

    if (!min_level_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"min_level",
        L"");
    }

    if (!max_level_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"max_level",
        L"");
    }
  }

  world_event_t* world_event_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class world_event_t (*this, f, c);
  }

  world_event_t& world_event_t::
  operator= (const world_event_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->world_event_code_ = x.world_event_code_;
      this->world_map_code_ = x.world_map_code_;
      this->unique_event_ = x.unique_event_;
      this->event_phase_count_ = x.event_phase_count_;
      this->event_open_type_ = x.event_open_type_;
      this->open_param_1_ = x.open_param_1_;
      this->open_param_2_ = x.open_param_2_;
      this->close_min_ = x.close_min_;
      this->fail_min_ = x.fail_min_;
      this->min_ranking_score_ = x.min_ranking_score_;
      this->reward_cost_type_ = x.reward_cost_type_;
      this->reward_cost_value_ = x.reward_cost_value_;
      this->event_wait_sec_ = x.event_wait_sec_;
      this->min_level_ = x.min_level_;
      this->max_level_ = x.max_level_;
    }

    return *this;
  }

  world_event_t::
  ~world_event_t ()
  {
  }

  // world_event_open_type_t
  //

  world_event_open_type_t::
  world_event_open_type_t ()
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > ()
  {
  }

  world_event_open_type_t::
  world_event_open_type_t (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (_xsd_unsigned_byte_base)
  {
  }

  world_event_open_type_t::
  world_event_open_type_t (const world_event_open_type_t& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (x, f, c)
  {
  }

  world_event_open_type_t::
  world_event_open_type_t (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (e, f, c)
  {
  }

  world_event_open_type_t::
  world_event_open_type_t (const ::xercesc::DOMAttr& a,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (a, f, c)
  {
  }

  world_event_open_type_t::
  world_event_open_type_t (const ::std::wstring& s,
                           const ::xercesc::DOMElement* e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  world_event_open_type_t* world_event_open_type_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class world_event_open_type_t (*this, f, c);
  }

  world_event_open_type_t::
  ~world_event_open_type_t ()
  {
  }

  // world_event_table
  //

  world_event_table::
  world_event_table ()
  : ::xml_schema::type (),
    world_event_template_ (this)
  {
  }

  world_event_table::
  world_event_table (const world_event_table& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    world_event_template_ (x.world_event_template_, f, this)
  {
  }

  world_event_table::
  world_event_table (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    world_event_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void world_event_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // world_event_template
      //
      if (n.name () == L"world_event_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< world_event_template_type > r (
          world_event_template_traits::create (i, f, this));

        this->world_event_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  world_event_table* world_event_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class world_event_table (*this, f, c);
  }

  world_event_table& world_event_table::
  operator= (const world_event_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->world_event_template_ = x.world_event_template_;
    }

    return *this;
  }

  world_event_table::
  ~world_event_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (const ::std::wstring& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::world_event_table > (
      ::gdt::world_event_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (const ::std::wstring& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::world_event_table > (
      ::gdt::world_event_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (const ::std::wstring& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::world_event_table > (
      ::gdt::world_event_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::world_event_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::world_event_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::world_event_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (::std::istream& is,
                      const ::std::wstring& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::world_event_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (::std::istream& is,
                      const ::std::wstring& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::world_event_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (::std::istream& is,
                      const ::std::wstring& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::world_event_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::world_event_table > (
      ::gdt::world_event_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::world_event_table > (
      ::gdt::world_event_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::world_event_table > (
      ::gdt::world_event_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::world_event_table > (
        ::gdt::world_event_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"world_event_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::world_event_table > r (
        ::xsd::cxx::tree::traits< ::gdt::world_event_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"world_event_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::world_event_table >
  world_event_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"world_event_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::world_event_table > r (
        ::xsd::cxx::tree::traits< ::gdt::world_event_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"world_event_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  world_event_table_ (::std::ostream& o,
                      const ::gdt::world_event_table& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::wstring& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::world_event_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  world_event_table_ (::std::ostream& o,
                      const ::gdt::world_event_table& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::wstring& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::world_event_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  world_event_table_ (::std::ostream& o,
                      const ::gdt::world_event_table& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::wstring& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::world_event_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  world_event_table_ (::xercesc::XMLFormatTarget& t,
                      const ::gdt::world_event_table& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::wstring& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::world_event_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  world_event_table_ (::xercesc::XMLFormatTarget& t,
                      const ::gdt::world_event_table& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::wstring& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::world_event_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  world_event_table_ (::xercesc::XMLFormatTarget& t,
                      const ::gdt::world_event_table& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::wstring& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::world_event_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  world_event_table_ (::xercesc::DOMDocument& d,
                      const ::gdt::world_event_table& s,
                      ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"world_event_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"world_event_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  world_event_table_ (const ::gdt::world_event_table& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"world_event_table",
        L"",
        m, f));

    ::gdt::world_event_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const world_event_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // world_event_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"world_event_code",
          e));

      a << i.world_event_code ();
    }

    // world_map_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"world_map_code",
          e));

      a << i.world_map_code ();
    }

    // unique_event
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"unique_event",
          e));

      a << i.unique_event ();
    }

    // event_phase_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"event_phase_count",
          e));

      a << i.event_phase_count ();
    }

    // event_open_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"event_open_type",
          e));

      a << i.event_open_type ();
    }

    // open_param_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"open_param_1",
          e));

      a << i.open_param_1 ();
    }

    // open_param_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"open_param_2",
          e));

      a << i.open_param_2 ();
    }

    // close_min
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"close_min",
          e));

      a << i.close_min ();
    }

    // fail_min
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"fail_min",
          e));

      a << i.fail_min ();
    }

    // min_ranking_score
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"min_ranking_score",
          e));

      a << i.min_ranking_score ();
    }

    // reward_cost_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"reward_cost_type",
          e));

      a << i.reward_cost_type ();
    }

    // reward_cost_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"reward_cost_value",
          e));

      a << i.reward_cost_value ();
    }

    // event_wait_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"event_wait_sec",
          e));

      a << i.event_wait_sec ();
    }

    // min_level
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"min_level",
          e));

      a << i.min_level ();
    }

    // max_level
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"max_level",
          e));

      a << i.max_level ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const world_event_open_type_t& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const world_event_open_type_t& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const world_event_open_type_t& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const world_event_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // world_event_template
    //
    for (world_event_table::world_event_template_const_iterator
         b (i.world_event_template ().begin ()), n (i.world_event_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"world_event_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

