// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "vehicle_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // vehicle_t
  //

  vehicle_t::
  vehicle_t ()
  : ::xml_schema::type (),
    vehicle_code_ (this),
    vehicle_icon_name_ (this),
    cast_time_ (this),
    org_speed_ (this),
    min_peak_time_ (this),
    max_peak_time_ (this),
    apply_regist_ (this),
    min_speed_ (this),
    apply_speed_value_ (this),
    vehicle_modeling_name_ (this),
    sell_cost_type_ (this),
    sell_cost_ (this),
    buy_cost_type_1_ (this),
    buy_cost_1_ (this),
    buy_cost_type_2_ (this),
    buy_cost_2_ (this)
  {
  }

  vehicle_t::
  vehicle_t (const vehicle_code_type& vehicle_code,
             const vehicle_icon_name_type& vehicle_icon_name,
             const cast_time_type& cast_time,
             const org_speed_type& org_speed,
             const min_peak_time_type& min_peak_time,
             const max_peak_time_type& max_peak_time,
             const apply_regist_type& apply_regist,
             const min_speed_type& min_speed,
             const apply_speed_value_type& apply_speed_value,
             const vehicle_modeling_name_type& vehicle_modeling_name,
             const sell_cost_type_type& sell_cost_type,
             const sell_cost_type1& sell_cost,
             const buy_cost_type_1_type& buy_cost_type_1,
             const buy_cost_1_type& buy_cost_1,
             const buy_cost_type_2_type& buy_cost_type_2,
             const buy_cost_2_type& buy_cost_2)
  : ::xml_schema::type (),
    vehicle_code_ (vehicle_code, this),
    vehicle_icon_name_ (vehicle_icon_name, this),
    cast_time_ (cast_time, this),
    org_speed_ (org_speed, this),
    min_peak_time_ (min_peak_time, this),
    max_peak_time_ (max_peak_time, this),
    apply_regist_ (apply_regist, this),
    min_speed_ (min_speed, this),
    apply_speed_value_ (apply_speed_value, this),
    vehicle_modeling_name_ (vehicle_modeling_name, this),
    sell_cost_type_ (sell_cost_type, this),
    sell_cost_ (sell_cost, this),
    buy_cost_type_1_ (buy_cost_type_1, this),
    buy_cost_1_ (buy_cost_1, this),
    buy_cost_type_2_ (buy_cost_type_2, this),
    buy_cost_2_ (buy_cost_2, this)
  {
  }

  vehicle_t::
  vehicle_t (const vehicle_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    vehicle_code_ (x.vehicle_code_, f, this),
    vehicle_icon_name_ (x.vehicle_icon_name_, f, this),
    cast_time_ (x.cast_time_, f, this),
    org_speed_ (x.org_speed_, f, this),
    min_peak_time_ (x.min_peak_time_, f, this),
    max_peak_time_ (x.max_peak_time_, f, this),
    apply_regist_ (x.apply_regist_, f, this),
    min_speed_ (x.min_speed_, f, this),
    apply_speed_value_ (x.apply_speed_value_, f, this),
    vehicle_modeling_name_ (x.vehicle_modeling_name_, f, this),
    sell_cost_type_ (x.sell_cost_type_, f, this),
    sell_cost_ (x.sell_cost_, f, this),
    buy_cost_type_1_ (x.buy_cost_type_1_, f, this),
    buy_cost_1_ (x.buy_cost_1_, f, this),
    buy_cost_type_2_ (x.buy_cost_type_2_, f, this),
    buy_cost_2_ (x.buy_cost_2_, f, this)
  {
  }

  vehicle_t::
  vehicle_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    vehicle_code_ (this),
    vehicle_icon_name_ (this),
    cast_time_ (this),
    org_speed_ (this),
    min_peak_time_ (this),
    max_peak_time_ (this),
    apply_regist_ (this),
    min_speed_ (this),
    apply_speed_value_ (this),
    vehicle_modeling_name_ (this),
    sell_cost_type_ (this),
    sell_cost_ (this),
    buy_cost_type_1_ (this),
    buy_cost_1_ (this),
    buy_cost_type_2_ (this),
    buy_cost_2_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void vehicle_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"vehicle_code" && n.namespace_ ().empty ())
      {
        this->vehicle_code_.set (vehicle_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"vehicle_icon_name" && n.namespace_ ().empty ())
      {
        this->vehicle_icon_name_.set (vehicle_icon_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"cast_time" && n.namespace_ ().empty ())
      {
        this->cast_time_.set (cast_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"org_speed" && n.namespace_ ().empty ())
      {
        this->org_speed_.set (org_speed_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"min_peak_time" && n.namespace_ ().empty ())
      {
        this->min_peak_time_.set (min_peak_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"max_peak_time" && n.namespace_ ().empty ())
      {
        this->max_peak_time_.set (max_peak_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"apply_regist" && n.namespace_ ().empty ())
      {
        this->apply_regist_.set (apply_regist_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"min_speed" && n.namespace_ ().empty ())
      {
        this->min_speed_.set (min_speed_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"apply_speed_value" && n.namespace_ ().empty ())
      {
        this->apply_speed_value_.set (apply_speed_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"vehicle_modeling_name" && n.namespace_ ().empty ())
      {
        this->vehicle_modeling_name_.set (vehicle_modeling_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sell_cost_type" && n.namespace_ ().empty ())
      {
        this->sell_cost_type_.set (sell_cost_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sell_cost" && n.namespace_ ().empty ())
      {
        this->sell_cost_.set (sell_cost_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_type_1" && n.namespace_ ().empty ())
      {
        this->buy_cost_type_1_.set (buy_cost_type_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_1" && n.namespace_ ().empty ())
      {
        this->buy_cost_1_.set (buy_cost_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_type_2" && n.namespace_ ().empty ())
      {
        this->buy_cost_type_2_.set (buy_cost_type_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_2" && n.namespace_ ().empty ())
      {
        this->buy_cost_2_.set (buy_cost_2_traits::create (i, f, this));
        continue;
      }
    }

    if (!vehicle_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"vehicle_code",
        L"");
    }

    if (!vehicle_icon_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"vehicle_icon_name",
        L"");
    }

    if (!cast_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"cast_time",
        L"");
    }

    if (!org_speed_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"org_speed",
        L"");
    }

    if (!min_peak_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"min_peak_time",
        L"");
    }

    if (!max_peak_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"max_peak_time",
        L"");
    }

    if (!apply_regist_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"apply_regist",
        L"");
    }

    if (!min_speed_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"min_speed",
        L"");
    }

    if (!apply_speed_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"apply_speed_value",
        L"");
    }

    if (!vehicle_modeling_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"vehicle_modeling_name",
        L"");
    }

    if (!sell_cost_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sell_cost_type",
        L"");
    }

    if (!sell_cost_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sell_cost",
        L"");
    }

    if (!buy_cost_type_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_type_1",
        L"");
    }

    if (!buy_cost_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_1",
        L"");
    }

    if (!buy_cost_type_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_type_2",
        L"");
    }

    if (!buy_cost_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_2",
        L"");
    }
  }

  vehicle_t* vehicle_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class vehicle_t (*this, f, c);
  }

  vehicle_t& vehicle_t::
  operator= (const vehicle_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->vehicle_code_ = x.vehicle_code_;
      this->vehicle_icon_name_ = x.vehicle_icon_name_;
      this->cast_time_ = x.cast_time_;
      this->org_speed_ = x.org_speed_;
      this->min_peak_time_ = x.min_peak_time_;
      this->max_peak_time_ = x.max_peak_time_;
      this->apply_regist_ = x.apply_regist_;
      this->min_speed_ = x.min_speed_;
      this->apply_speed_value_ = x.apply_speed_value_;
      this->vehicle_modeling_name_ = x.vehicle_modeling_name_;
      this->sell_cost_type_ = x.sell_cost_type_;
      this->sell_cost_ = x.sell_cost_;
      this->buy_cost_type_1_ = x.buy_cost_type_1_;
      this->buy_cost_1_ = x.buy_cost_1_;
      this->buy_cost_type_2_ = x.buy_cost_type_2_;
      this->buy_cost_2_ = x.buy_cost_2_;
    }

    return *this;
  }

  vehicle_t::
  ~vehicle_t ()
  {
  }

  // vehicle_table
  //

  vehicle_table::
  vehicle_table ()
  : ::xml_schema::type (),
    vehicle_template_ (this)
  {
  }

  vehicle_table::
  vehicle_table (const vehicle_table& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    vehicle_template_ (x.vehicle_template_, f, this)
  {
  }

  vehicle_table::
  vehicle_table (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    vehicle_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void vehicle_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // vehicle_template
      //
      if (n.name () == L"vehicle_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< vehicle_template_type > r (
          vehicle_template_traits::create (i, f, this));

        this->vehicle_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  vehicle_table* vehicle_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class vehicle_table (*this, f, c);
  }

  vehicle_table& vehicle_table::
  operator= (const vehicle_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->vehicle_template_ = x.vehicle_template_;
    }

    return *this;
  }

  vehicle_table::
  ~vehicle_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (const ::std::wstring& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::vehicle_table > (
      ::gdt::vehicle_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (const ::std::wstring& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::vehicle_table > (
      ::gdt::vehicle_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (const ::std::wstring& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::vehicle_table > (
      ::gdt::vehicle_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::vehicle_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::vehicle_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::vehicle_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (::std::istream& is,
                  const ::std::wstring& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::vehicle_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (::std::istream& is,
                  const ::std::wstring& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::vehicle_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (::std::istream& is,
                  const ::std::wstring& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::vehicle_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::vehicle_table > (
      ::gdt::vehicle_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::vehicle_table > (
      ::gdt::vehicle_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::vehicle_table > (
      ::gdt::vehicle_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::vehicle_table > (
        ::gdt::vehicle_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"vehicle_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::vehicle_table > r (
        ::xsd::cxx::tree::traits< ::gdt::vehicle_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"vehicle_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::vehicle_table >
  vehicle_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"vehicle_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::vehicle_table > r (
        ::xsd::cxx::tree::traits< ::gdt::vehicle_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"vehicle_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  vehicle_table_ (::std::ostream& o,
                  const ::gdt::vehicle_table& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::vehicle_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  vehicle_table_ (::std::ostream& o,
                  const ::gdt::vehicle_table& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::vehicle_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  vehicle_table_ (::std::ostream& o,
                  const ::gdt::vehicle_table& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::vehicle_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  vehicle_table_ (::xercesc::XMLFormatTarget& t,
                  const ::gdt::vehicle_table& s,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::vehicle_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  vehicle_table_ (::xercesc::XMLFormatTarget& t,
                  const ::gdt::vehicle_table& s,
                  ::xml_schema::error_handler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::vehicle_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  vehicle_table_ (::xercesc::XMLFormatTarget& t,
                  const ::gdt::vehicle_table& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::namespace_infomap& m,
                  const ::std::wstring& e,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::vehicle_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  vehicle_table_ (::xercesc::DOMDocument& d,
                  const ::gdt::vehicle_table& s,
                  ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"vehicle_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"vehicle_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  vehicle_table_ (const ::gdt::vehicle_table& s,
                  const ::xml_schema::namespace_infomap& m,
                  ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"vehicle_table",
        L"",
        m, f));

    ::gdt::vehicle_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const vehicle_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // vehicle_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"vehicle_code",
          e));

      a << i.vehicle_code ();
    }

    // vehicle_icon_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"vehicle_icon_name",
          e));

      a << i.vehicle_icon_name ();
    }

    // cast_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"cast_time",
          e));

      a << i.cast_time ();
    }

    // org_speed
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"org_speed",
          e));

      a << i.org_speed ();
    }

    // min_peak_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"min_peak_time",
          e));

      a << i.min_peak_time ();
    }

    // max_peak_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"max_peak_time",
          e));

      a << i.max_peak_time ();
    }

    // apply_regist
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"apply_regist",
          e));

      a << i.apply_regist ();
    }

    // min_speed
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"min_speed",
          e));

      a << i.min_speed ();
    }

    // apply_speed_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"apply_speed_value",
          e));

      a << i.apply_speed_value ();
    }

    // vehicle_modeling_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"vehicle_modeling_name",
          e));

      a << i.vehicle_modeling_name ();
    }

    // sell_cost_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sell_cost_type",
          e));

      a << i.sell_cost_type ();
    }

    // sell_cost
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sell_cost",
          e));

      a << i.sell_cost ();
    }

    // buy_cost_type_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_type_1",
          e));

      a << i.buy_cost_type_1 ();
    }

    // buy_cost_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_1",
          e));

      a << i.buy_cost_1 ();
    }

    // buy_cost_type_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_type_2",
          e));

      a << i.buy_cost_type_2 ();
    }

    // buy_cost_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_2",
          e));

      a << i.buy_cost_2 ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const vehicle_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // vehicle_template
    //
    for (vehicle_table::vehicle_template_const_iterator
         b (i.vehicle_template ().begin ()), n (i.vehicle_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"vehicle_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

