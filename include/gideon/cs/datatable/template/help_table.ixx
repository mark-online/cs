// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_HELP_TABLE_IXX
#define GDT_HELP_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // help_t
  // 

  inline
  const help_t::id_type& help_t::
  id () const
  {
    return this->id_.get ();
  }

  inline
  help_t::id_type& help_t::
  id ()
  {
    return this->id_.get ();
  }

  inline
  void help_t::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  inline
  void help_t::
  id (::std::unique_ptr< id_type > x)
  {
    this->id_.set (std::move (x));
  }

  inline
  const help_t::title_ko_kr_type& help_t::
  title_ko_kr () const
  {
    return this->title_ko_kr_.get ();
  }

  inline
  help_t::title_ko_kr_type& help_t::
  title_ko_kr ()
  {
    return this->title_ko_kr_.get ();
  }

  inline
  void help_t::
  title_ko_kr (const title_ko_kr_type& x)
  {
    this->title_ko_kr_.set (x);
  }

  inline
  void help_t::
  title_ko_kr (::std::unique_ptr< title_ko_kr_type > x)
  {
    this->title_ko_kr_.set (std::move (x));
  }

  inline
  const help_t::title_en_us_type& help_t::
  title_en_us () const
  {
    return this->title_en_us_.get ();
  }

  inline
  help_t::title_en_us_type& help_t::
  title_en_us ()
  {
    return this->title_en_us_.get ();
  }

  inline
  void help_t::
  title_en_us (const title_en_us_type& x)
  {
    this->title_en_us_.set (x);
  }

  inline
  void help_t::
  title_en_us (::std::unique_ptr< title_en_us_type > x)
  {
    this->title_en_us_.set (std::move (x));
  }


  // help_table
  // 

  inline
  const help_table::help_template_sequence& help_table::
  help_template () const
  {
    return this->help_template_;
  }

  inline
  help_table::help_template_sequence& help_table::
  help_template ()
  {
    return this->help_template_;
  }

  inline
  void help_table::
  help_template (const help_template_sequence& s)
  {
    this->help_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_HELP_TABLE_IXX
