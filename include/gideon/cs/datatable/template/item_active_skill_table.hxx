// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from item_active_skill_table.xsd.
 */

#ifndef GDT_ITEM_ACTIVE_SKILL_TABLE_HXX
#define GDT_ITEM_ACTIVE_SKILL_TABLE_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

// Begin prologue.
//
#include "shared_types.hxx"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "xml_schema.hxx"

// Forward declarations.
//
namespace gdt
{
  class item_active_skill_t;
  class item_active_skill_table;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#ifndef XSD_DONT_INCLUDE_INLINE
#define XSD_DONT_INCLUDE_INLINE

#include "shared_types.hxx"

#undef XSD_DONT_INCLUDE_INLINE
#else

#include "shared_types.hxx"

#endif // XSD_DONT_INCLUDE_INLINE

/**
 * @brief C++ namespace for the %
 * schema namespace.
 */
namespace gdt
{
  /**
   * @brief Class corresponding to the %item_active_skill_t schema type.
   *
   * @nosubgrouping
   */
  class GIDEON_CS_API item_active_skill_t: public ::xml_schema::type
  {
    public:
    /**
     * @name skill_code
     *
     * @brief Accessor and modifier functions for the %skill_code
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::skill_code_t skill_code_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< skill_code_type, wchar_t > skill_code_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const skill_code_type&
    skill_code () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    skill_code_type&
    skill_code ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    skill_code (const skill_code_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    skill_code (::std::unique_ptr< skill_code_type > p);

    //@}

    /**
     * @name effect_level
     *
     * @brief Accessor and modifier functions for the %effect_level
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte effect_level_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< effect_level_type, wchar_t > effect_level_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const effect_level_type&
    effect_level () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    effect_level_type&
    effect_level ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    effect_level (const effect_level_type& x);

    //@}

    /**
     * @name top_threat_apply_value
     *
     * @brief Accessor and modifier functions for the %top_threat_apply_value
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short top_threat_apply_value_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< top_threat_apply_value_type, wchar_t > top_threat_apply_value_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const top_threat_apply_value_type&
    top_threat_apply_value () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    top_threat_apply_value_type&
    top_threat_apply_value ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    top_threat_apply_value (const top_threat_apply_value_type& x);

    //@}

    /**
     * @name skill_type
     *
     * @brief Accessor and modifier functions for the %skill_type
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::skill_type_t skill_type_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< skill_type_type, wchar_t > skill_type_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const skill_type_type&
    skill_type () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    skill_type_type&
    skill_type ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    skill_type (const skill_type_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    skill_type (::std::unique_ptr< skill_type_type > p);

    //@}

    /**
     * @name usable_state
     *
     * @brief Accessor and modifier functions for the %usable_state
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::character_state_t usable_state_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< usable_state_type, wchar_t > usable_state_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const usable_state_type&
    usable_state () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    usable_state_type&
    usable_state ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    usable_state (const usable_state_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    usable_state (::std::unique_ptr< usable_state_type > p);

    //@}

    /**
     * @name transition_state
     *
     * @brief Accessor and modifier functions for the %transition_state
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte transition_state_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< transition_state_type, wchar_t > transition_state_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const transition_state_type&
    transition_state () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    transition_state_type&
    transition_state ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    transition_state (const transition_state_type& x);

    //@}

    /**
     * @name check_mez_type
     *
     * @brief Accessor and modifier functions for the %check_mez_type
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte check_mez_type_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< check_mez_type_type, wchar_t > check_mez_type_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const check_mez_type_type&
    check_mez_type () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    check_mez_type_type&
    check_mez_type ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    check_mez_type (const check_mez_type_type& x);

    //@}

    /**
     * @name projectile_speed
     *
     * @brief Accessor and modifier functions for the %projectile_speed
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int projectile_speed_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< projectile_speed_type, wchar_t > projectile_speed_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const projectile_speed_type&
    projectile_speed () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    projectile_speed_type&
    projectile_speed ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    projectile_speed (const projectile_speed_type& x);

    //@}

    /**
     * @name can_cast_on_moving
     *
     * @brief Accessor and modifier functions for the %can_cast_on_moving
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean can_cast_on_moving_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< can_cast_on_moving_type, wchar_t > can_cast_on_moving_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const can_cast_on_moving_type&
    can_cast_on_moving () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    can_cast_on_moving_type&
    can_cast_on_moving ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    can_cast_on_moving (const can_cast_on_moving_type& x);

    //@}

    /**
     * @name cast_type
     *
     * @brief Accessor and modifier functions for the %cast_type
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::cast_type_t cast_type_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< cast_type_type, wchar_t > cast_type_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const cast_type_type&
    cast_type () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    cast_type_type&
    cast_type ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    cast_type (const cast_type_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    cast_type (::std::unique_ptr< cast_type_type > p);

    //@}

    /**
     * @name cast_time
     *
     * @brief Accessor and modifier functions for the %cast_time
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int cast_time_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< cast_time_type, wchar_t > cast_time_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const cast_time_type&
    cast_time () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    cast_time_type&
    cast_time ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    cast_time (const cast_time_type& x);

    //@}

    /**
     * @name min_distance
     *
     * @brief Accessor and modifier functions for the %min_distance
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int min_distance_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< min_distance_type, wchar_t > min_distance_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const min_distance_type&
    min_distance () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    min_distance_type&
    min_distance ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    min_distance (const min_distance_type& x);

    //@}

    /**
     * @name max_distance
     *
     * @brief Accessor and modifier functions for the %max_distance
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int max_distance_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< max_distance_type, wchar_t > max_distance_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const max_distance_type&
    max_distance () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    max_distance_type&
    max_distance ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    max_distance (const max_distance_type& x);

    //@}

    /**
     * @name cooldown_time
     *
     * @brief Accessor and modifier functions for the %cooldown_time
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int cooldown_time_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< cooldown_time_type, wchar_t > cooldown_time_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const cooldown_time_type&
    cooldown_time () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    cooldown_time_type&
    cooldown_time ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    cooldown_time (const cooldown_time_type& x);

    //@}

    /**
     * @name global_cooldown_time_index
     *
     * @brief Accessor and modifier functions for the %global_cooldown_time_index
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte global_cooldown_time_index_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< global_cooldown_time_index_type, wchar_t > global_cooldown_time_index_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const global_cooldown_time_index_type&
    global_cooldown_time_index () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    global_cooldown_time_index_type&
    global_cooldown_time_index ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    global_cooldown_time_index (const global_cooldown_time_index_type& x);

    //@}

    /**
     * @name global_cooldown_time
     *
     * @brief Accessor and modifier functions for the %global_cooldown_time
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int global_cooldown_time_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< global_cooldown_time_type, wchar_t > global_cooldown_time_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const global_cooldown_time_type&
    global_cooldown_time () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    global_cooldown_time_type&
    global_cooldown_time ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    global_cooldown_time (const global_cooldown_time_type& x);

    //@}

    /**
     * @name caster_activate_mil_sec_1
     *
     * @brief Accessor and modifier functions for the %caster_activate_mil_sec_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int caster_activate_mil_sec_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< caster_activate_mil_sec_1_type, wchar_t > caster_activate_mil_sec_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const caster_activate_mil_sec_1_type&
    caster_activate_mil_sec_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    caster_activate_mil_sec_1_type&
    caster_activate_mil_sec_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    caster_activate_mil_sec_1 (const caster_activate_mil_sec_1_type& x);

    //@}

    /**
     * @name caster_activate_interval_mil_sec_1
     *
     * @brief Accessor and modifier functions for the %caster_activate_interval_mil_sec_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int caster_activate_interval_mil_sec_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< caster_activate_interval_mil_sec_1_type, wchar_t > caster_activate_interval_mil_sec_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const caster_activate_interval_mil_sec_1_type&
    caster_activate_interval_mil_sec_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    caster_activate_interval_mil_sec_1_type&
    caster_activate_interval_mil_sec_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    caster_activate_interval_mil_sec_1 (const caster_activate_interval_mil_sec_1_type& x);

    //@}

    /**
     * @name caster_activate_mil_sec_2
     *
     * @brief Accessor and modifier functions for the %caster_activate_mil_sec_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int caster_activate_mil_sec_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< caster_activate_mil_sec_2_type, wchar_t > caster_activate_mil_sec_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const caster_activate_mil_sec_2_type&
    caster_activate_mil_sec_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    caster_activate_mil_sec_2_type&
    caster_activate_mil_sec_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    caster_activate_mil_sec_2 (const caster_activate_mil_sec_2_type& x);

    //@}

    /**
     * @name caster_activate_interval_mil_sec_2
     *
     * @brief Accessor and modifier functions for the %caster_activate_interval_mil_sec_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int caster_activate_interval_mil_sec_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< caster_activate_interval_mil_sec_2_type, wchar_t > caster_activate_interval_mil_sec_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const caster_activate_interval_mil_sec_2_type&
    caster_activate_interval_mil_sec_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    caster_activate_interval_mil_sec_2_type&
    caster_activate_interval_mil_sec_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    caster_activate_interval_mil_sec_2 (const caster_activate_interval_mil_sec_2_type& x);

    //@}

    /**
     * @name castee_activate_mil_sec_1
     *
     * @brief Accessor and modifier functions for the %castee_activate_mil_sec_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int castee_activate_mil_sec_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< castee_activate_mil_sec_1_type, wchar_t > castee_activate_mil_sec_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const castee_activate_mil_sec_1_type&
    castee_activate_mil_sec_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    castee_activate_mil_sec_1_type&
    castee_activate_mil_sec_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    castee_activate_mil_sec_1 (const castee_activate_mil_sec_1_type& x);

    //@}

    /**
     * @name castee_activate_interval_mil_sec_1
     *
     * @brief Accessor and modifier functions for the %castee_activate_interval_mil_sec_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int castee_activate_interval_mil_sec_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< castee_activate_interval_mil_sec_1_type, wchar_t > castee_activate_interval_mil_sec_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const castee_activate_interval_mil_sec_1_type&
    castee_activate_interval_mil_sec_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    castee_activate_interval_mil_sec_1_type&
    castee_activate_interval_mil_sec_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    castee_activate_interval_mil_sec_1 (const castee_activate_interval_mil_sec_1_type& x);

    //@}

    /**
     * @name castee_activate_mil_sec_2
     *
     * @brief Accessor and modifier functions for the %castee_activate_mil_sec_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int castee_activate_mil_sec_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< castee_activate_mil_sec_2_type, wchar_t > castee_activate_mil_sec_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const castee_activate_mil_sec_2_type&
    castee_activate_mil_sec_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    castee_activate_mil_sec_2_type&
    castee_activate_mil_sec_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    castee_activate_mil_sec_2 (const castee_activate_mil_sec_2_type& x);

    //@}

    /**
     * @name castee_activate_interval_mil_sec_2
     *
     * @brief Accessor and modifier functions for the %castee_activate_interval_mil_sec_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int castee_activate_interval_mil_sec_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< castee_activate_interval_mil_sec_2_type, wchar_t > castee_activate_interval_mil_sec_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const castee_activate_interval_mil_sec_2_type&
    castee_activate_interval_mil_sec_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    castee_activate_interval_mil_sec_2_type&
    castee_activate_interval_mil_sec_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    castee_activate_interval_mil_sec_2 (const castee_activate_interval_mil_sec_2_type& x);

    //@}

    /**
     * @name skill_effect_index
     *
     * @brief Accessor and modifier functions for the %skill_effect_index
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int skill_effect_index_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< skill_effect_index_type, wchar_t > skill_effect_index_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const skill_effect_index_type&
    skill_effect_index () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    skill_effect_index_type&
    skill_effect_index ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    skill_effect_index (const skill_effect_index_type& x);

    //@}

    /**
     * @name caster_effect_value_1
     *
     * @brief Accessor and modifier functions for the %caster_effect_value_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int caster_effect_value_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< caster_effect_value_1_type, wchar_t > caster_effect_value_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const caster_effect_value_1_type&
    caster_effect_value_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    caster_effect_value_1_type&
    caster_effect_value_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    caster_effect_value_1 (const caster_effect_value_1_type& x);

    //@}

    /**
     * @name caster_effect_value_2
     *
     * @brief Accessor and modifier functions for the %caster_effect_value_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int caster_effect_value_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< caster_effect_value_2_type, wchar_t > caster_effect_value_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const caster_effect_value_2_type&
    caster_effect_value_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    caster_effect_value_2_type&
    caster_effect_value_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    caster_effect_value_2 (const caster_effect_value_2_type& x);

    //@}

    /**
     * @name castee_effect_value_1
     *
     * @brief Accessor and modifier functions for the %castee_effect_value_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int castee_effect_value_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< castee_effect_value_1_type, wchar_t > castee_effect_value_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const castee_effect_value_1_type&
    castee_effect_value_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    castee_effect_value_1_type&
    castee_effect_value_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    castee_effect_value_1 (const castee_effect_value_1_type& x);

    //@}

    /**
     * @name castee_effect_value_2
     *
     * @brief Accessor and modifier functions for the %castee_effect_value_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int castee_effect_value_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< castee_effect_value_2_type, wchar_t > castee_effect_value_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const castee_effect_value_2_type&
    castee_effect_value_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    castee_effect_value_2_type&
    castee_effect_value_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    castee_effect_value_2 (const castee_effect_value_2_type& x);

    //@}

    /**
     * @name casting_animation_name
     *
     * @brief Accessor and modifier functions for the %casting_animation_name
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string casting_animation_name_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< casting_animation_name_type, wchar_t > casting_animation_name_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const casting_animation_name_type&
    casting_animation_name () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    casting_animation_name_type&
    casting_animation_name ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    casting_animation_name (const casting_animation_name_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    casting_animation_name (::std::unique_ptr< casting_animation_name_type > p);

    //@}

    /**
     * @name casting_draw_animation_name
     *
     * @brief Accessor and modifier functions for the %casting_draw_animation_name
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string casting_draw_animation_name_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< casting_draw_animation_name_type, wchar_t > casting_draw_animation_name_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const casting_draw_animation_name_type&
    casting_draw_animation_name () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    casting_draw_animation_name_type&
    casting_draw_animation_name ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    casting_draw_animation_name (const casting_draw_animation_name_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    casting_draw_animation_name (::std::unique_ptr< casting_draw_animation_name_type > p);

    //@}

    /**
     * @name casting_effect
     *
     * @brief Accessor and modifier functions for the %casting_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string casting_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< casting_effect_type, wchar_t > casting_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const casting_effect_type&
    casting_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    casting_effect_type&
    casting_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    casting_effect (const casting_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    casting_effect (::std::unique_ptr< casting_effect_type > p);

    //@}

    /**
     * @name animation_transition_time
     *
     * @brief Accessor and modifier functions for the %animation_transition_time
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int animation_transition_time_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< animation_transition_time_type, wchar_t > animation_transition_time_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const animation_transition_time_type&
    animation_transition_time () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    animation_transition_time_type&
    animation_transition_time ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    animation_transition_time (const animation_transition_time_type& x);

    //@}

    /**
     * @name caster_animation_name
     *
     * @brief Accessor and modifier functions for the %caster_animation_name
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string caster_animation_name_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< caster_animation_name_type, wchar_t > caster_animation_name_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const caster_animation_name_type&
    caster_animation_name () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    caster_animation_name_type&
    caster_animation_name ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    caster_animation_name (const caster_animation_name_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    caster_animation_name (::std::unique_ptr< caster_animation_name_type > p);

    //@}

    /**
     * @name caster_effect
     *
     * @brief Accessor and modifier functions for the %caster_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string caster_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< caster_effect_type, wchar_t > caster_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const caster_effect_type&
    caster_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    caster_effect_type&
    caster_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    caster_effect (const caster_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    caster_effect (::std::unique_ptr< caster_effect_type > p);

    //@}

    /**
     * @name trail_effect
     *
     * @brief Accessor and modifier functions for the %trail_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string trail_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< trail_effect_type, wchar_t > trail_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const trail_effect_type&
    trail_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    trail_effect_type&
    trail_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    trail_effect (const trail_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    trail_effect (::std::unique_ptr< trail_effect_type > p);

    //@}

    /**
     * @name attacker1_caster_effect
     *
     * @brief Accessor and modifier functions for the %attacker1_caster_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string attacker1_caster_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< attacker1_caster_effect_type, wchar_t > attacker1_caster_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const attacker1_caster_effect_type&
    attacker1_caster_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    attacker1_caster_effect_type&
    attacker1_caster_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    attacker1_caster_effect (const attacker1_caster_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    attacker1_caster_effect (::std::unique_ptr< attacker1_caster_effect_type > p);

    //@}

    /**
     * @name attacker2_caster_effect
     *
     * @brief Accessor and modifier functions for the %attacker2_caster_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string attacker2_caster_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< attacker2_caster_effect_type, wchar_t > attacker2_caster_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const attacker2_caster_effect_type&
    attacker2_caster_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    attacker2_caster_effect_type&
    attacker2_caster_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    attacker2_caster_effect (const attacker2_caster_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    attacker2_caster_effect (::std::unique_ptr< attacker2_caster_effect_type > p);

    //@}

    /**
     * @name castee_animation_name
     *
     * @brief Accessor and modifier functions for the %castee_animation_name
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string castee_animation_name_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< castee_animation_name_type, wchar_t > castee_animation_name_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const castee_animation_name_type&
    castee_animation_name () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    castee_animation_name_type&
    castee_animation_name ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    castee_animation_name (const castee_animation_name_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    castee_animation_name (::std::unique_ptr< castee_animation_name_type > p);

    //@}

    /**
     * @name castee_interval_time
     *
     * @brief Accessor and modifier functions for the %castee_interval_time
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int castee_interval_time_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< castee_interval_time_type, wchar_t > castee_interval_time_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const castee_interval_time_type&
    castee_interval_time () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    castee_interval_time_type&
    castee_interval_time ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    castee_interval_time (const castee_interval_time_type& x);

    //@}

    /**
     * @name attacked1_castee_effect
     *
     * @brief Accessor and modifier functions for the %attacked1_castee_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string attacked1_castee_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< attacked1_castee_effect_type, wchar_t > attacked1_castee_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const attacked1_castee_effect_type&
    attacked1_castee_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    attacked1_castee_effect_type&
    attacked1_castee_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    attacked1_castee_effect (const attacked1_castee_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    attacked1_castee_effect (::std::unique_ptr< attacked1_castee_effect_type > p);

    //@}

    /**
     * @name attacked2_castee_effect
     *
     * @brief Accessor and modifier functions for the %attacked2_castee_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string attacked2_castee_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< attacked2_castee_effect_type, wchar_t > attacked2_castee_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const attacked2_castee_effect_type&
    attacked2_castee_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    attacked2_castee_effect_type&
    attacked2_castee_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    attacked2_castee_effect (const attacked2_castee_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    attacked2_castee_effect (::std::unique_ptr< attacked2_castee_effect_type > p);

    //@}

    /**
     * @name area_effect
     *
     * @brief Accessor and modifier functions for the %area_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string area_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< area_effect_type, wchar_t > area_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const area_effect_type&
    area_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    area_effect_type&
    area_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    area_effect (const area_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    area_effect (::std::unique_ptr< area_effect_type > p);

    //@}

    /**
     * @name projectile_name
     *
     * @brief Accessor and modifier functions for the %projectile_name
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string projectile_name_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< projectile_name_type, wchar_t > projectile_name_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const projectile_name_type&
    projectile_name () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    projectile_name_type&
    projectile_name ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    projectile_name (const projectile_name_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    projectile_name (::std::unique_ptr< projectile_name_type > p);

    //@}

    /**
     * @name projectile_particle
     *
     * @brief Accessor and modifier functions for the %projectile_particle
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string projectile_particle_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< projectile_particle_type, wchar_t > projectile_particle_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const projectile_particle_type&
    projectile_particle () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    projectile_particle_type&
    projectile_particle ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    projectile_particle (const projectile_particle_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    projectile_particle (::std::unique_ptr< projectile_particle_type > p);

    //@}

    /**
     * @name projectile_sound
     *
     * @brief Accessor and modifier functions for the %projectile_sound
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string projectile_sound_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< projectile_sound_type, wchar_t > projectile_sound_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const projectile_sound_type&
    projectile_sound () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    projectile_sound_type&
    projectile_sound ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    projectile_sound (const projectile_sound_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    projectile_sound (::std::unique_ptr< projectile_sound_type > p);

    //@}

    /**
     * @name projectile_starting_point
     *
     * @brief Accessor and modifier functions for the %projectile_starting_point
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string projectile_starting_point_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< projectile_starting_point_type, wchar_t > projectile_starting_point_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const projectile_starting_point_type&
    projectile_starting_point () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    projectile_starting_point_type&
    projectile_starting_point ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    projectile_starting_point (const projectile_starting_point_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    projectile_starting_point (::std::unique_ptr< projectile_starting_point_type > p);

    //@}

    /**
     * @name projectile_end_point
     *
     * @brief Accessor and modifier functions for the %projectile_end_point
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string projectile_end_point_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< projectile_end_point_type, wchar_t > projectile_end_point_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const projectile_end_point_type&
    projectile_end_point () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    projectile_end_point_type&
    projectile_end_point ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    projectile_end_point (const projectile_end_point_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    projectile_end_point (::std::unique_ptr< projectile_end_point_type > p);

    //@}

    /**
     * @name projectile_trail_particle
     *
     * @brief Accessor and modifier functions for the %projectile_trail_particle
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string projectile_trail_particle_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< projectile_trail_particle_type, wchar_t > projectile_trail_particle_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const projectile_trail_particle_type&
    projectile_trail_particle () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    projectile_trail_particle_type&
    projectile_trail_particle ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    projectile_trail_particle (const projectile_trail_particle_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    projectile_trail_particle (::std::unique_ptr< projectile_trail_particle_type > p);

    //@}

    /**
     * @name projectile_light_rgb_value
     *
     * @brief Accessor and modifier functions for the %projectile_light_rgb_value
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::float_list_t projectile_light_rgb_value_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< projectile_light_rgb_value_type, wchar_t > projectile_light_rgb_value_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const projectile_light_rgb_value_type&
    projectile_light_rgb_value () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    projectile_light_rgb_value_type&
    projectile_light_rgb_value ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    projectile_light_rgb_value (const projectile_light_rgb_value_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    projectile_light_rgb_value (::std::unique_ptr< projectile_light_rgb_value_type > p);

    //@}

    /**
     * @name projectile_light_value
     *
     * @brief Accessor and modifier functions for the %projectile_light_value
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::float_ projectile_light_value_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< projectile_light_value_type, wchar_t > projectile_light_value_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const projectile_light_value_type&
    projectile_light_value () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    projectile_light_value_type&
    projectile_light_value ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    projectile_light_value (const projectile_light_value_type& x);

    //@}

    /**
     * @name projectile_light_range_value
     *
     * @brief Accessor and modifier functions for the %projectile_light_range_value
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::float_ projectile_light_range_value_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< projectile_light_range_value_type, wchar_t > projectile_light_range_value_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const projectile_light_range_value_type&
    projectile_light_range_value () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    projectile_light_range_value_type&
    projectile_light_range_value ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    projectile_light_range_value (const projectile_light_range_value_type& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Default constructor.
     *
     * Note that this constructor leaves required elements and
     * attributes uninitialized.
     */
    item_active_skill_t ();

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    item_active_skill_t (const skill_code_type&,
                         const effect_level_type&,
                         const top_threat_apply_value_type&,
                         const skill_type_type&,
                         const usable_state_type&,
                         const transition_state_type&,
                         const check_mez_type_type&,
                         const projectile_speed_type&,
                         const can_cast_on_moving_type&,
                         const cast_type_type&,
                         const cast_time_type&,
                         const min_distance_type&,
                         const max_distance_type&,
                         const cooldown_time_type&,
                         const global_cooldown_time_index_type&,
                         const global_cooldown_time_type&,
                         const caster_activate_mil_sec_1_type&,
                         const caster_activate_interval_mil_sec_1_type&,
                         const caster_activate_mil_sec_2_type&,
                         const caster_activate_interval_mil_sec_2_type&,
                         const castee_activate_mil_sec_1_type&,
                         const castee_activate_interval_mil_sec_1_type&,
                         const castee_activate_mil_sec_2_type&,
                         const castee_activate_interval_mil_sec_2_type&,
                         const skill_effect_index_type&,
                         const caster_effect_value_1_type&,
                         const caster_effect_value_2_type&,
                         const castee_effect_value_1_type&,
                         const castee_effect_value_2_type&,
                         const casting_animation_name_type&,
                         const casting_draw_animation_name_type&,
                         const casting_effect_type&,
                         const animation_transition_time_type&,
                         const caster_animation_name_type&,
                         const caster_effect_type&,
                         const trail_effect_type&,
                         const attacker1_caster_effect_type&,
                         const attacker2_caster_effect_type&,
                         const castee_animation_name_type&,
                         const castee_interval_time_type&,
                         const attacked1_castee_effect_type&,
                         const attacked2_castee_effect_type&,
                         const area_effect_type&,
                         const projectile_name_type&,
                         const projectile_particle_type&,
                         const projectile_sound_type&,
                         const projectile_starting_point_type&,
                         const projectile_end_point_type&,
                         const projectile_trail_particle_type&,
                         const projectile_light_rgb_value_type&,
                         const projectile_light_value_type&,
                         const projectile_light_range_value_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    item_active_skill_t (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    item_active_skill_t (const item_active_skill_t& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual item_active_skill_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    item_active_skill_t&
    operator= (const item_active_skill_t& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~item_active_skill_t ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< skill_code_type > skill_code_;
    ::xsd::cxx::tree::one< effect_level_type > effect_level_;
    ::xsd::cxx::tree::one< top_threat_apply_value_type > top_threat_apply_value_;
    ::xsd::cxx::tree::one< skill_type_type > skill_type_;
    ::xsd::cxx::tree::one< usable_state_type > usable_state_;
    ::xsd::cxx::tree::one< transition_state_type > transition_state_;
    ::xsd::cxx::tree::one< check_mez_type_type > check_mez_type_;
    ::xsd::cxx::tree::one< projectile_speed_type > projectile_speed_;
    ::xsd::cxx::tree::one< can_cast_on_moving_type > can_cast_on_moving_;
    ::xsd::cxx::tree::one< cast_type_type > cast_type_;
    ::xsd::cxx::tree::one< cast_time_type > cast_time_;
    ::xsd::cxx::tree::one< min_distance_type > min_distance_;
    ::xsd::cxx::tree::one< max_distance_type > max_distance_;
    ::xsd::cxx::tree::one< cooldown_time_type > cooldown_time_;
    ::xsd::cxx::tree::one< global_cooldown_time_index_type > global_cooldown_time_index_;
    ::xsd::cxx::tree::one< global_cooldown_time_type > global_cooldown_time_;
    ::xsd::cxx::tree::one< caster_activate_mil_sec_1_type > caster_activate_mil_sec_1_;
    ::xsd::cxx::tree::one< caster_activate_interval_mil_sec_1_type > caster_activate_interval_mil_sec_1_;
    ::xsd::cxx::tree::one< caster_activate_mil_sec_2_type > caster_activate_mil_sec_2_;
    ::xsd::cxx::tree::one< caster_activate_interval_mil_sec_2_type > caster_activate_interval_mil_sec_2_;
    ::xsd::cxx::tree::one< castee_activate_mil_sec_1_type > castee_activate_mil_sec_1_;
    ::xsd::cxx::tree::one< castee_activate_interval_mil_sec_1_type > castee_activate_interval_mil_sec_1_;
    ::xsd::cxx::tree::one< castee_activate_mil_sec_2_type > castee_activate_mil_sec_2_;
    ::xsd::cxx::tree::one< castee_activate_interval_mil_sec_2_type > castee_activate_interval_mil_sec_2_;
    ::xsd::cxx::tree::one< skill_effect_index_type > skill_effect_index_;
    ::xsd::cxx::tree::one< caster_effect_value_1_type > caster_effect_value_1_;
    ::xsd::cxx::tree::one< caster_effect_value_2_type > caster_effect_value_2_;
    ::xsd::cxx::tree::one< castee_effect_value_1_type > castee_effect_value_1_;
    ::xsd::cxx::tree::one< castee_effect_value_2_type > castee_effect_value_2_;
    ::xsd::cxx::tree::one< casting_animation_name_type > casting_animation_name_;
    ::xsd::cxx::tree::one< casting_draw_animation_name_type > casting_draw_animation_name_;
    ::xsd::cxx::tree::one< casting_effect_type > casting_effect_;
    ::xsd::cxx::tree::one< animation_transition_time_type > animation_transition_time_;
    ::xsd::cxx::tree::one< caster_animation_name_type > caster_animation_name_;
    ::xsd::cxx::tree::one< caster_effect_type > caster_effect_;
    ::xsd::cxx::tree::one< trail_effect_type > trail_effect_;
    ::xsd::cxx::tree::one< attacker1_caster_effect_type > attacker1_caster_effect_;
    ::xsd::cxx::tree::one< attacker2_caster_effect_type > attacker2_caster_effect_;
    ::xsd::cxx::tree::one< castee_animation_name_type > castee_animation_name_;
    ::xsd::cxx::tree::one< castee_interval_time_type > castee_interval_time_;
    ::xsd::cxx::tree::one< attacked1_castee_effect_type > attacked1_castee_effect_;
    ::xsd::cxx::tree::one< attacked2_castee_effect_type > attacked2_castee_effect_;
    ::xsd::cxx::tree::one< area_effect_type > area_effect_;
    ::xsd::cxx::tree::one< projectile_name_type > projectile_name_;
    ::xsd::cxx::tree::one< projectile_particle_type > projectile_particle_;
    ::xsd::cxx::tree::one< projectile_sound_type > projectile_sound_;
    ::xsd::cxx::tree::one< projectile_starting_point_type > projectile_starting_point_;
    ::xsd::cxx::tree::one< projectile_end_point_type > projectile_end_point_;
    ::xsd::cxx::tree::one< projectile_trail_particle_type > projectile_trail_particle_;
    ::xsd::cxx::tree::one< projectile_light_rgb_value_type > projectile_light_rgb_value_;
    ::xsd::cxx::tree::one< projectile_light_value_type > projectile_light_value_;
    ::xsd::cxx::tree::one< projectile_light_range_value_type > projectile_light_range_value_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %item_active_skill_table schema type.
   *
   * @nosubgrouping
   */
  class GIDEON_CS_API item_active_skill_table: public ::xml_schema::type
  {
    public:
    /**
     * @name item_active_skill_template
     *
     * @brief Accessor and modifier functions for the %item_active_skill_template
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::gdt::item_active_skill_t item_active_skill_template_type;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< item_active_skill_template_type > item_active_skill_template_sequence;

    /**
     * @brief Element iterator type.
     */
    typedef item_active_skill_template_sequence::iterator item_active_skill_template_iterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef item_active_skill_template_sequence::const_iterator item_active_skill_template_const_iterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< item_active_skill_template_type, wchar_t > item_active_skill_template_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const item_active_skill_template_sequence&
    item_active_skill_template () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    item_active_skill_template_sequence&
    item_active_skill_template ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    item_active_skill_template (const item_active_skill_template_sequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    item_active_skill_table ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    item_active_skill_table (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    item_active_skill_table (const item_active_skill_table& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual item_active_skill_table*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    item_active_skill_table&
    operator= (const item_active_skill_table& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~item_active_skill_table ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    item_active_skill_template_sequence item_active_skill_template_;

    //@endcond
  };
}

#ifndef XSD_DONT_INCLUDE_INLINE

#include "shared_types.ixx"

#endif // XSD_DONT_INCLUDE_INLINE

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace gdt
{
  /**
   * @name Parsing functions for the %item_active_skill_table document root.
   */
  //@{

  /**
   * @brief Parse a URI or a local file.
   *
   * @param uri A URI or a local file name.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (const ::std::wstring& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a URI or a local file with an error handler.
   *
   * @param uri A URI or a local file name.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (const ::std::wstring& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a URI or a local file with a Xerces-C++ DOM error
   * handler.
   *
   * @param uri A URI or a local file name.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (const ::std::wstring& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream.
   *
   * @param is A standrad input stream.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with an error handler.
   *
   * @param is A standrad input stream.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with a Xerces-C++ DOM error
   * handler.
   *
   * @param is A standrad input stream.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with a resource id.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function uses exceptions to report parsing errors.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::std::istream& is,
                            const ::std::wstring& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with a resource id and an
   * error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::std::istream& is,
                            const ::std::wstring& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with a resource id and a
   * Xerces-C++ DOM error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::std::istream& is,
                            const ::std::wstring& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ input source.
   *
   * @param is A Xerces-C++ input source.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ input source with an error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
   * error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A pointer to the Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function is normally used together with the keep_dom and
   * own_dom parsing flags to assign ownership of the DOM document
   * to the object model.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

  //@}
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace gdt
{
  /**
   * @name Serialization functions for the %item_active_skill_table document root.
   */
  //@{

  /**
   * @brief Serialize to a standard output stream.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  GIDEON_CS_API
  void
  item_active_skill_table_ (::std::ostream& os,
                            const ::gdt::item_active_skill_table& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a standard output stream with an error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  GIDEON_CS_API
  void
  item_active_skill_table_ (::std::ostream& os,
                            const ::gdt::item_active_skill_table& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a standard output stream with a Xerces-C++ DOM
   * error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  GIDEON_CS_API
  void
  item_active_skill_table_ (::std::ostream& os,
                            const ::gdt::item_active_skill_table& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  GIDEON_CS_API
  void
  item_active_skill_table_ (::xercesc::XMLFormatTarget& ft,
                            const ::gdt::item_active_skill_table& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with an error
   * handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  GIDEON_CS_API
  void
  item_active_skill_table_ (::xercesc::XMLFormatTarget& ft,
                            const ::gdt::item_active_skill_table& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with a
   * Xerces-C++ DOM error handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  GIDEON_CS_API
  void
  item_active_skill_table_ (::xercesc::XMLFormatTarget& ft,
                            const ::gdt::item_active_skill_table& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to an existing Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param x An object model to serialize.
   * @param f Serialization flags.
   *
   * Note that it is your responsibility to create the DOM document
   * with the correct root element as well as set the necessary
   * namespace mapping attributes.
   */
  GIDEON_CS_API
  void
  item_active_skill_table_ (::xercesc::DOMDocument& d,
                            const ::gdt::item_active_skill_table& x,
                            ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a new Xerces-C++ DOM document.
   *
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param f Serialization flags.
   * @return A pointer to the new Xerces-C++ DOM document.
   */
  GIDEON_CS_API
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  item_active_skill_table_ (const ::gdt::item_active_skill_table& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

  //@}

  GIDEON_CS_API
  void
  operator<< (::xercesc::DOMElement&, const item_active_skill_t&);

  GIDEON_CS_API
  void
  operator<< (::xercesc::DOMElement&, const item_active_skill_table&);
}

#ifndef XSD_DONT_INCLUDE_INLINE
#include "item_active_skill_table.ixx"
#endif // XSD_DONT_INCLUDE_INLINE

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_ITEM_ACTIVE_SKILL_TABLE_HXX
