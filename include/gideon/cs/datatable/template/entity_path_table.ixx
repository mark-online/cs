// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_ENTITY_PATH_TABLE_IXX
#define GDT_ENTITY_PATH_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // entity_path_t
  // 

  inline
  const entity_path_t::path_node_sequence& entity_path_t::
  path_node () const
  {
    return this->path_node_;
  }

  inline
  entity_path_t::path_node_sequence& entity_path_t::
  path_node ()
  {
    return this->path_node_;
  }

  inline
  void entity_path_t::
  path_node (const path_node_sequence& s)
  {
    this->path_node_ = s;
  }

  inline
  const entity_path_t::entity_path_code_type& entity_path_t::
  entity_path_code () const
  {
    return this->entity_path_code_.get ();
  }

  inline
  entity_path_t::entity_path_code_type& entity_path_t::
  entity_path_code ()
  {
    return this->entity_path_code_.get ();
  }

  inline
  void entity_path_t::
  entity_path_code (const entity_path_code_type& x)
  {
    this->entity_path_code_.set (x);
  }

  inline
  void entity_path_t::
  entity_path_code (::std::unique_ptr< entity_path_code_type > x)
  {
    this->entity_path_code_.set (std::move (x));
  }

  inline
  const entity_path_t::is_looping_type& entity_path_t::
  is_looping () const
  {
    return this->is_looping_.get ();
  }

  inline
  entity_path_t::is_looping_type& entity_path_t::
  is_looping ()
  {
    return this->is_looping_.get ();
  }

  inline
  void entity_path_t::
  is_looping (const is_looping_type& x)
  {
    this->is_looping_.set (x);
  }


  // path_node_t
  // 

  inline
  const path_node_t::x_type& path_node_t::
  x () const
  {
    return this->x_.get ();
  }

  inline
  path_node_t::x_type& path_node_t::
  x ()
  {
    return this->x_.get ();
  }

  inline
  void path_node_t::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  inline
  const path_node_t::y_type& path_node_t::
  y () const
  {
    return this->y_.get ();
  }

  inline
  path_node_t::y_type& path_node_t::
  y ()
  {
    return this->y_.get ();
  }

  inline
  void path_node_t::
  y (const y_type& x)
  {
    this->y_.set (x);
  }

  inline
  const path_node_t::z_type& path_node_t::
  z () const
  {
    return this->z_.get ();
  }

  inline
  path_node_t::z_type& path_node_t::
  z ()
  {
    return this->z_.get ();
  }

  inline
  void path_node_t::
  z (const z_type& x)
  {
    this->z_.set (x);
  }

  inline
  const path_node_t::heading_type& path_node_t::
  heading () const
  {
    return this->heading_.get ();
  }

  inline
  path_node_t::heading_type& path_node_t::
  heading ()
  {
    return this->heading_.get ();
  }

  inline
  void path_node_t::
  heading (const heading_type& x)
  {
    this->heading_.set (x);
  }

  inline
  const path_node_t::rest_time_type& path_node_t::
  rest_time () const
  {
    return this->rest_time_.get ();
  }

  inline
  path_node_t::rest_time_type& path_node_t::
  rest_time ()
  {
    return this->rest_time_.get ();
  }

  inline
  void path_node_t::
  rest_time (const rest_time_type& x)
  {
    this->rest_time_.set (x);
  }


  // entity_path_table
  // 

  inline
  const entity_path_table::entity_path_template_sequence& entity_path_table::
  entity_path_template () const
  {
    return this->entity_path_template_;
  }

  inline
  entity_path_table::entity_path_template_sequence& entity_path_table::
  entity_path_template ()
  {
    return this->entity_path_template_;
  }

  inline
  void entity_path_table::
  entity_path_template (const entity_path_template_sequence& s)
  {
    this->entity_path_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_ENTITY_PATH_TABLE_IXX
