// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "region_coordinates.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // coordinates_t
  //

  coordinates_t::
  coordinates_t ()
  : ::xml_schema::type (),
    region_code_ (this),
    radius_ (this),
    x_ (this),
    y_ (this),
    z_ (this),
    x1_ (this),
    x2_ (this),
    y1_ (this),
    y2_ (this)
  {
  }

  coordinates_t::
  coordinates_t (const region_code_type& region_code,
                 const radius_type& radius,
                 const x_type& x,
                 const y_type& y,
                 const z_type& z,
                 const x1_type& x1,
                 const x2_type& x2,
                 const y1_type& y1,
                 const y2_type& y2)
  : ::xml_schema::type (),
    region_code_ (region_code, this),
    radius_ (radius, this),
    x_ (x, this),
    y_ (y, this),
    z_ (z, this),
    x1_ (x1, this),
    x2_ (x2, this),
    y1_ (y1, this),
    y2_ (y2, this)
  {
  }

  coordinates_t::
  coordinates_t (const coordinates_t& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    region_code_ (x.region_code_, f, this),
    radius_ (x.radius_, f, this),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    z_ (x.z_, f, this),
    x1_ (x.x1_, f, this),
    x2_ (x.x2_, f, this),
    y1_ (x.y1_, f, this),
    y2_ (x.y2_, f, this)
  {
  }

  coordinates_t::
  coordinates_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    region_code_ (this),
    radius_ (this),
    x_ (this),
    y_ (this),
    z_ (this),
    x1_ (this),
    x2_ (this),
    y1_ (this),
    y2_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void coordinates_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"region_code" && n.namespace_ ().empty ())
      {
        this->region_code_.set (region_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"radius" && n.namespace_ ().empty ())
      {
        this->radius_.set (radius_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"x" && n.namespace_ ().empty ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"y" && n.namespace_ ().empty ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"z" && n.namespace_ ().empty ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"x1" && n.namespace_ ().empty ())
      {
        this->x1_.set (x1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"x2" && n.namespace_ ().empty ())
      {
        this->x2_.set (x2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"y1" && n.namespace_ ().empty ())
      {
        this->y1_.set (y1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"y2" && n.namespace_ ().empty ())
      {
        this->y2_.set (y2_traits::create (i, f, this));
        continue;
      }
    }

    if (!region_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"region_code",
        L"");
    }

    if (!radius_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"radius",
        L"");
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"x",
        L"");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"y",
        L"");
    }

    if (!z_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"z",
        L"");
    }

    if (!x1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"x1",
        L"");
    }

    if (!x2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"x2",
        L"");
    }

    if (!y1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"y1",
        L"");
    }

    if (!y2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"y2",
        L"");
    }
  }

  coordinates_t* coordinates_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class coordinates_t (*this, f, c);
  }

  coordinates_t& coordinates_t::
  operator= (const coordinates_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->region_code_ = x.region_code_;
      this->radius_ = x.radius_;
      this->x_ = x.x_;
      this->y_ = x.y_;
      this->z_ = x.z_;
      this->x1_ = x.x1_;
      this->x2_ = x.x2_;
      this->y1_ = x.y1_;
      this->y2_ = x.y2_;
    }

    return *this;
  }

  coordinates_t::
  ~coordinates_t ()
  {
  }

  // region_coordinates
  //

  region_coordinates::
  region_coordinates ()
  : ::xml_schema::type (),
    coordinates_ (this)
  {
  }

  region_coordinates::
  region_coordinates (const region_coordinates& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    coordinates_ (x.coordinates_, f, this)
  {
  }

  region_coordinates::
  region_coordinates (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    coordinates_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void region_coordinates::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // coordinates
      //
      if (n.name () == L"coordinates" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< coordinates_type > r (
          coordinates_traits::create (i, f, this));

        this->coordinates_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  region_coordinates* region_coordinates::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class region_coordinates (*this, f, c);
  }

  region_coordinates& region_coordinates::
  operator= (const region_coordinates& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->coordinates_ = x.coordinates_;
    }

    return *this;
  }

  region_coordinates::
  ~region_coordinates ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (const ::std::wstring& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::region_coordinates > (
      ::gdt::region_coordinates_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (const ::std::wstring& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::region_coordinates > (
      ::gdt::region_coordinates_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (const ::std::wstring& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::region_coordinates > (
      ::gdt::region_coordinates_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::region_coordinates_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::region_coordinates_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::region_coordinates_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (::std::istream& is,
                       const ::std::wstring& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::region_coordinates_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (::std::istream& is,
                       const ::std::wstring& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::region_coordinates_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (::std::istream& is,
                       const ::std::wstring& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::region_coordinates_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::region_coordinates > (
      ::gdt::region_coordinates_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::region_coordinates > (
      ::gdt::region_coordinates_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::region_coordinates > (
      ::gdt::region_coordinates_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::region_coordinates > (
        ::gdt::region_coordinates_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"region_coordinates" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::region_coordinates > r (
        ::xsd::cxx::tree::traits< ::gdt::region_coordinates, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"region_coordinates",
      L"");
  }

  ::std::unique_ptr< ::gdt::region_coordinates >
  region_coordinates_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"region_coordinates" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::region_coordinates > r (
        ::xsd::cxx::tree::traits< ::gdt::region_coordinates, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"region_coordinates",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  region_coordinates_ (::std::ostream& o,
                       const ::gdt::region_coordinates& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::region_coordinates_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  region_coordinates_ (::std::ostream& o,
                       const ::gdt::region_coordinates& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::region_coordinates_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  region_coordinates_ (::std::ostream& o,
                       const ::gdt::region_coordinates& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::region_coordinates_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  region_coordinates_ (::xercesc::XMLFormatTarget& t,
                       const ::gdt::region_coordinates& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::region_coordinates_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  region_coordinates_ (::xercesc::XMLFormatTarget& t,
                       const ::gdt::region_coordinates& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::region_coordinates_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  region_coordinates_ (::xercesc::XMLFormatTarget& t,
                       const ::gdt::region_coordinates& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::region_coordinates_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  region_coordinates_ (::xercesc::DOMDocument& d,
                       const ::gdt::region_coordinates& s,
                       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"region_coordinates" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"region_coordinates",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  region_coordinates_ (const ::gdt::region_coordinates& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"region_coordinates",
        L"",
        m, f));

    ::gdt::region_coordinates_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const coordinates_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // region_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"region_code",
          e));

      a << i.region_code ();
    }

    // radius
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"radius",
          e));

      a << i.radius ();
    }

    // x
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"x",
          e));

      a << i.x ();
    }

    // y
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"y",
          e));

      a << i.y ();
    }

    // z
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"z",
          e));

      a << i.z ();
    }

    // x1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"x1",
          e));

      a << i.x1 ();
    }

    // x2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"x2",
          e));

      a << i.x2 ();
    }

    // y1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"y1",
          e));

      a << i.y1 ();
    }

    // y2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"y2",
          e));

      a << i.y2 ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const region_coordinates& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // coordinates
    //
    for (region_coordinates::coordinates_const_iterator
         b (i.coordinates ().begin ()), n (i.coordinates ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"coordinates",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

