// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "equip_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // equip_t
  //

  equip_t::
  equip_t ()
  : ::xml_schema::type (),
    item_code_ (this),
    min_level_ (this),
    item_grade_ (this),
    item_enchant_level_ (this),
    equip_part_ (this),
    equip_type_ (this),
    material_type_ (this),
    looting_mil_sec_ (this),
    apply_script_1_ (this),
    apply_value_1_ (this),
    apply_script_2_ (this),
    apply_value_2_ (this),
    apply_script_3_ (this),
    apply_value_3_ (this),
    apply_script_4_ (this),
    apply_value_4_ (this),
    item_suffix_id_ (this),
    min_socket_count_ (this),
    max_socket_count_ (this),
    fragment_code_ (this),
    upgrade_rate_ (this),
    need_upgrade_item_code_ (this),
    need_upgrade_item_count_ (this),
    use_revision_upgrade_rate_item_ (this),
    pre_upgrade_code_ (this),
    next_upgrade_code_ (this),
    sell_cost_type_ (this),
    sell_cost_ (this),
    buy_cost_type_1_ (this),
    buy_cost_1_ (this),
    buy_cost_type_2_ (this),
    buy_cost_2_ (this),
    wear_type_ (this),
    mount_point_ (this),
    unmount_point_ (this),
    modeling_name_ (this),
    effect_name_ (this),
    material_name_ (this),
    base_trail_name_ (this),
    icon_name_ (this)
  {
  }

  equip_t::
  equip_t (const item_code_type& item_code,
           const min_level_type& min_level,
           const item_grade_type& item_grade,
           const item_enchant_level_type& item_enchant_level,
           const equip_part_type& equip_part,
           const equip_type_type& equip_type,
           const material_type_type& material_type,
           const looting_mil_sec_type& looting_mil_sec,
           const apply_script_1_type& apply_script_1,
           const apply_value_1_type& apply_value_1,
           const apply_script_2_type& apply_script_2,
           const apply_value_2_type& apply_value_2,
           const apply_script_3_type& apply_script_3,
           const apply_value_3_type& apply_value_3,
           const apply_script_4_type& apply_script_4,
           const apply_value_4_type& apply_value_4,
           const item_suffix_id_type& item_suffix_id,
           const min_socket_count_type& min_socket_count,
           const max_socket_count_type& max_socket_count,
           const fragment_code_type& fragment_code,
           const upgrade_rate_type& upgrade_rate,
           const need_upgrade_item_code_type& need_upgrade_item_code,
           const need_upgrade_item_count_type& need_upgrade_item_count,
           const use_revision_upgrade_rate_item_type& use_revision_upgrade_rate_item,
           const pre_upgrade_code_type& pre_upgrade_code,
           const next_upgrade_code_type& next_upgrade_code,
           const sell_cost_type_type& sell_cost_type,
           const sell_cost_type1& sell_cost,
           const buy_cost_type_1_type& buy_cost_type_1,
           const buy_cost_1_type& buy_cost_1,
           const buy_cost_type_2_type& buy_cost_type_2,
           const buy_cost_2_type& buy_cost_2,
           const wear_type_type& wear_type,
           const mount_point_type& mount_point,
           const unmount_point_type& unmount_point,
           const modeling_name_type& modeling_name,
           const effect_name_type& effect_name,
           const material_name_type& material_name,
           const base_trail_name_type& base_trail_name,
           const icon_name_type& icon_name)
  : ::xml_schema::type (),
    item_code_ (item_code, this),
    min_level_ (min_level, this),
    item_grade_ (item_grade, this),
    item_enchant_level_ (item_enchant_level, this),
    equip_part_ (equip_part, this),
    equip_type_ (equip_type, this),
    material_type_ (material_type, this),
    looting_mil_sec_ (looting_mil_sec, this),
    apply_script_1_ (apply_script_1, this),
    apply_value_1_ (apply_value_1, this),
    apply_script_2_ (apply_script_2, this),
    apply_value_2_ (apply_value_2, this),
    apply_script_3_ (apply_script_3, this),
    apply_value_3_ (apply_value_3, this),
    apply_script_4_ (apply_script_4, this),
    apply_value_4_ (apply_value_4, this),
    item_suffix_id_ (item_suffix_id, this),
    min_socket_count_ (min_socket_count, this),
    max_socket_count_ (max_socket_count, this),
    fragment_code_ (fragment_code, this),
    upgrade_rate_ (upgrade_rate, this),
    need_upgrade_item_code_ (need_upgrade_item_code, this),
    need_upgrade_item_count_ (need_upgrade_item_count, this),
    use_revision_upgrade_rate_item_ (use_revision_upgrade_rate_item, this),
    pre_upgrade_code_ (pre_upgrade_code, this),
    next_upgrade_code_ (next_upgrade_code, this),
    sell_cost_type_ (sell_cost_type, this),
    sell_cost_ (sell_cost, this),
    buy_cost_type_1_ (buy_cost_type_1, this),
    buy_cost_1_ (buy_cost_1, this),
    buy_cost_type_2_ (buy_cost_type_2, this),
    buy_cost_2_ (buy_cost_2, this),
    wear_type_ (wear_type, this),
    mount_point_ (mount_point, this),
    unmount_point_ (unmount_point, this),
    modeling_name_ (modeling_name, this),
    effect_name_ (effect_name, this),
    material_name_ (material_name, this),
    base_trail_name_ (base_trail_name, this),
    icon_name_ (icon_name, this)
  {
  }

  equip_t::
  equip_t (const equip_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    item_code_ (x.item_code_, f, this),
    min_level_ (x.min_level_, f, this),
    item_grade_ (x.item_grade_, f, this),
    item_enchant_level_ (x.item_enchant_level_, f, this),
    equip_part_ (x.equip_part_, f, this),
    equip_type_ (x.equip_type_, f, this),
    material_type_ (x.material_type_, f, this),
    looting_mil_sec_ (x.looting_mil_sec_, f, this),
    apply_script_1_ (x.apply_script_1_, f, this),
    apply_value_1_ (x.apply_value_1_, f, this),
    apply_script_2_ (x.apply_script_2_, f, this),
    apply_value_2_ (x.apply_value_2_, f, this),
    apply_script_3_ (x.apply_script_3_, f, this),
    apply_value_3_ (x.apply_value_3_, f, this),
    apply_script_4_ (x.apply_script_4_, f, this),
    apply_value_4_ (x.apply_value_4_, f, this),
    item_suffix_id_ (x.item_suffix_id_, f, this),
    min_socket_count_ (x.min_socket_count_, f, this),
    max_socket_count_ (x.max_socket_count_, f, this),
    fragment_code_ (x.fragment_code_, f, this),
    upgrade_rate_ (x.upgrade_rate_, f, this),
    need_upgrade_item_code_ (x.need_upgrade_item_code_, f, this),
    need_upgrade_item_count_ (x.need_upgrade_item_count_, f, this),
    use_revision_upgrade_rate_item_ (x.use_revision_upgrade_rate_item_, f, this),
    pre_upgrade_code_ (x.pre_upgrade_code_, f, this),
    next_upgrade_code_ (x.next_upgrade_code_, f, this),
    sell_cost_type_ (x.sell_cost_type_, f, this),
    sell_cost_ (x.sell_cost_, f, this),
    buy_cost_type_1_ (x.buy_cost_type_1_, f, this),
    buy_cost_1_ (x.buy_cost_1_, f, this),
    buy_cost_type_2_ (x.buy_cost_type_2_, f, this),
    buy_cost_2_ (x.buy_cost_2_, f, this),
    wear_type_ (x.wear_type_, f, this),
    mount_point_ (x.mount_point_, f, this),
    unmount_point_ (x.unmount_point_, f, this),
    modeling_name_ (x.modeling_name_, f, this),
    effect_name_ (x.effect_name_, f, this),
    material_name_ (x.material_name_, f, this),
    base_trail_name_ (x.base_trail_name_, f, this),
    icon_name_ (x.icon_name_, f, this)
  {
  }

  equip_t::
  equip_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    item_code_ (this),
    min_level_ (this),
    item_grade_ (this),
    item_enchant_level_ (this),
    equip_part_ (this),
    equip_type_ (this),
    material_type_ (this),
    looting_mil_sec_ (this),
    apply_script_1_ (this),
    apply_value_1_ (this),
    apply_script_2_ (this),
    apply_value_2_ (this),
    apply_script_3_ (this),
    apply_value_3_ (this),
    apply_script_4_ (this),
    apply_value_4_ (this),
    item_suffix_id_ (this),
    min_socket_count_ (this),
    max_socket_count_ (this),
    fragment_code_ (this),
    upgrade_rate_ (this),
    need_upgrade_item_code_ (this),
    need_upgrade_item_count_ (this),
    use_revision_upgrade_rate_item_ (this),
    pre_upgrade_code_ (this),
    next_upgrade_code_ (this),
    sell_cost_type_ (this),
    sell_cost_ (this),
    buy_cost_type_1_ (this),
    buy_cost_1_ (this),
    buy_cost_type_2_ (this),
    buy_cost_2_ (this),
    wear_type_ (this),
    mount_point_ (this),
    unmount_point_ (this),
    modeling_name_ (this),
    effect_name_ (this),
    material_name_ (this),
    base_trail_name_ (this),
    icon_name_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void equip_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"item_code" && n.namespace_ ().empty ())
      {
        this->item_code_.set (item_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"min_level" && n.namespace_ ().empty ())
      {
        this->min_level_.set (min_level_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"item_grade" && n.namespace_ ().empty ())
      {
        this->item_grade_.set (item_grade_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"item_enchant_level" && n.namespace_ ().empty ())
      {
        this->item_enchant_level_.set (item_enchant_level_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"equip_part" && n.namespace_ ().empty ())
      {
        this->equip_part_.set (equip_part_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"equip_type" && n.namespace_ ().empty ())
      {
        this->equip_type_.set (equip_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"material_type" && n.namespace_ ().empty ())
      {
        this->material_type_.set (material_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"looting_mil_sec" && n.namespace_ ().empty ())
      {
        this->looting_mil_sec_.set (looting_mil_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"apply_script_1" && n.namespace_ ().empty ())
      {
        this->apply_script_1_.set (apply_script_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"apply_value_1" && n.namespace_ ().empty ())
      {
        this->apply_value_1_.set (apply_value_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"apply_script_2" && n.namespace_ ().empty ())
      {
        this->apply_script_2_.set (apply_script_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"apply_value_2" && n.namespace_ ().empty ())
      {
        this->apply_value_2_.set (apply_value_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"apply_script_3" && n.namespace_ ().empty ())
      {
        this->apply_script_3_.set (apply_script_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"apply_value_3" && n.namespace_ ().empty ())
      {
        this->apply_value_3_.set (apply_value_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"apply_script_4" && n.namespace_ ().empty ())
      {
        this->apply_script_4_.set (apply_script_4_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"apply_value_4" && n.namespace_ ().empty ())
      {
        this->apply_value_4_.set (apply_value_4_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"item_suffix_id" && n.namespace_ ().empty ())
      {
        this->item_suffix_id_.set (item_suffix_id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"min_socket_count" && n.namespace_ ().empty ())
      {
        this->min_socket_count_.set (min_socket_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"max_socket_count" && n.namespace_ ().empty ())
      {
        this->max_socket_count_.set (max_socket_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"fragment_code" && n.namespace_ ().empty ())
      {
        this->fragment_code_.set (fragment_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"upgrade_rate" && n.namespace_ ().empty ())
      {
        this->upgrade_rate_.set (upgrade_rate_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"need_upgrade_item_code" && n.namespace_ ().empty ())
      {
        this->need_upgrade_item_code_.set (need_upgrade_item_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"need_upgrade_item_count" && n.namespace_ ().empty ())
      {
        this->need_upgrade_item_count_.set (need_upgrade_item_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"use_revision_upgrade_rate_item" && n.namespace_ ().empty ())
      {
        this->use_revision_upgrade_rate_item_.set (use_revision_upgrade_rate_item_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"pre_upgrade_code" && n.namespace_ ().empty ())
      {
        this->pre_upgrade_code_.set (pre_upgrade_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"next_upgrade_code" && n.namespace_ ().empty ())
      {
        this->next_upgrade_code_.set (next_upgrade_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sell_cost_type" && n.namespace_ ().empty ())
      {
        this->sell_cost_type_.set (sell_cost_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sell_cost" && n.namespace_ ().empty ())
      {
        this->sell_cost_.set (sell_cost_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_type_1" && n.namespace_ ().empty ())
      {
        this->buy_cost_type_1_.set (buy_cost_type_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_1" && n.namespace_ ().empty ())
      {
        this->buy_cost_1_.set (buy_cost_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_type_2" && n.namespace_ ().empty ())
      {
        this->buy_cost_type_2_.set (buy_cost_type_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_2" && n.namespace_ ().empty ())
      {
        this->buy_cost_2_.set (buy_cost_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"wear_type" && n.namespace_ ().empty ())
      {
        this->wear_type_.set (wear_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"mount_point" && n.namespace_ ().empty ())
      {
        this->mount_point_.set (mount_point_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"unmount_point" && n.namespace_ ().empty ())
      {
        this->unmount_point_.set (unmount_point_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"modeling_name" && n.namespace_ ().empty ())
      {
        this->modeling_name_.set (modeling_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"effect_name" && n.namespace_ ().empty ())
      {
        this->effect_name_.set (effect_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"material_name" && n.namespace_ ().empty ())
      {
        this->material_name_.set (material_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"base_trail_name" && n.namespace_ ().empty ())
      {
        this->base_trail_name_.set (base_trail_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"icon_name" && n.namespace_ ().empty ())
      {
        this->icon_name_.set (icon_name_traits::create (i, f, this));
        continue;
      }
    }

    if (!item_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"item_code",
        L"");
    }

    if (!min_level_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"min_level",
        L"");
    }

    if (!item_grade_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"item_grade",
        L"");
    }

    if (!item_enchant_level_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"item_enchant_level",
        L"");
    }

    if (!equip_part_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"equip_part",
        L"");
    }

    if (!equip_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"equip_type",
        L"");
    }

    if (!material_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"material_type",
        L"");
    }

    if (!looting_mil_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"looting_mil_sec",
        L"");
    }

    if (!apply_script_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"apply_script_1",
        L"");
    }

    if (!apply_value_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"apply_value_1",
        L"");
    }

    if (!apply_script_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"apply_script_2",
        L"");
    }

    if (!apply_value_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"apply_value_2",
        L"");
    }

    if (!apply_script_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"apply_script_3",
        L"");
    }

    if (!apply_value_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"apply_value_3",
        L"");
    }

    if (!apply_script_4_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"apply_script_4",
        L"");
    }

    if (!apply_value_4_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"apply_value_4",
        L"");
    }

    if (!item_suffix_id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"item_suffix_id",
        L"");
    }

    if (!min_socket_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"min_socket_count",
        L"");
    }

    if (!max_socket_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"max_socket_count",
        L"");
    }

    if (!fragment_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"fragment_code",
        L"");
    }

    if (!upgrade_rate_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"upgrade_rate",
        L"");
    }

    if (!need_upgrade_item_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"need_upgrade_item_code",
        L"");
    }

    if (!need_upgrade_item_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"need_upgrade_item_count",
        L"");
    }

    if (!use_revision_upgrade_rate_item_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"use_revision_upgrade_rate_item",
        L"");
    }

    if (!pre_upgrade_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"pre_upgrade_code",
        L"");
    }

    if (!next_upgrade_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"next_upgrade_code",
        L"");
    }

    if (!sell_cost_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sell_cost_type",
        L"");
    }

    if (!sell_cost_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sell_cost",
        L"");
    }

    if (!buy_cost_type_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_type_1",
        L"");
    }

    if (!buy_cost_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_1",
        L"");
    }

    if (!buy_cost_type_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_type_2",
        L"");
    }

    if (!buy_cost_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_2",
        L"");
    }

    if (!wear_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"wear_type",
        L"");
    }

    if (!mount_point_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"mount_point",
        L"");
    }

    if (!unmount_point_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"unmount_point",
        L"");
    }

    if (!modeling_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"modeling_name",
        L"");
    }

    if (!effect_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"effect_name",
        L"");
    }

    if (!material_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"material_name",
        L"");
    }

    if (!base_trail_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"base_trail_name",
        L"");
    }

    if (!icon_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"icon_name",
        L"");
    }
  }

  equip_t* equip_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class equip_t (*this, f, c);
  }

  equip_t& equip_t::
  operator= (const equip_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->item_code_ = x.item_code_;
      this->min_level_ = x.min_level_;
      this->item_grade_ = x.item_grade_;
      this->item_enchant_level_ = x.item_enchant_level_;
      this->equip_part_ = x.equip_part_;
      this->equip_type_ = x.equip_type_;
      this->material_type_ = x.material_type_;
      this->looting_mil_sec_ = x.looting_mil_sec_;
      this->apply_script_1_ = x.apply_script_1_;
      this->apply_value_1_ = x.apply_value_1_;
      this->apply_script_2_ = x.apply_script_2_;
      this->apply_value_2_ = x.apply_value_2_;
      this->apply_script_3_ = x.apply_script_3_;
      this->apply_value_3_ = x.apply_value_3_;
      this->apply_script_4_ = x.apply_script_4_;
      this->apply_value_4_ = x.apply_value_4_;
      this->item_suffix_id_ = x.item_suffix_id_;
      this->min_socket_count_ = x.min_socket_count_;
      this->max_socket_count_ = x.max_socket_count_;
      this->fragment_code_ = x.fragment_code_;
      this->upgrade_rate_ = x.upgrade_rate_;
      this->need_upgrade_item_code_ = x.need_upgrade_item_code_;
      this->need_upgrade_item_count_ = x.need_upgrade_item_count_;
      this->use_revision_upgrade_rate_item_ = x.use_revision_upgrade_rate_item_;
      this->pre_upgrade_code_ = x.pre_upgrade_code_;
      this->next_upgrade_code_ = x.next_upgrade_code_;
      this->sell_cost_type_ = x.sell_cost_type_;
      this->sell_cost_ = x.sell_cost_;
      this->buy_cost_type_1_ = x.buy_cost_type_1_;
      this->buy_cost_1_ = x.buy_cost_1_;
      this->buy_cost_type_2_ = x.buy_cost_type_2_;
      this->buy_cost_2_ = x.buy_cost_2_;
      this->wear_type_ = x.wear_type_;
      this->mount_point_ = x.mount_point_;
      this->unmount_point_ = x.unmount_point_;
      this->modeling_name_ = x.modeling_name_;
      this->effect_name_ = x.effect_name_;
      this->material_name_ = x.material_name_;
      this->base_trail_name_ = x.base_trail_name_;
      this->icon_name_ = x.icon_name_;
    }

    return *this;
  }

  equip_t::
  ~equip_t ()
  {
  }

  // equip_table
  //

  equip_table::
  equip_table ()
  : ::xml_schema::type (),
    equip_template_ (this)
  {
  }

  equip_table::
  equip_table (const equip_table& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    equip_template_ (x.equip_template_, f, this)
  {
  }

  equip_table::
  equip_table (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    equip_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void equip_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // equip_template
      //
      if (n.name () == L"equip_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< equip_template_type > r (
          equip_template_traits::create (i, f, this));

        this->equip_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  equip_table* equip_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class equip_table (*this, f, c);
  }

  equip_table& equip_table::
  operator= (const equip_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->equip_template_ = x.equip_template_;
    }

    return *this;
  }

  equip_table::
  ~equip_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (const ::std::wstring& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::equip_table > (
      ::gdt::equip_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (const ::std::wstring& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::equip_table > (
      ::gdt::equip_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (const ::std::wstring& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::equip_table > (
      ::gdt::equip_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::equip_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::equip_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::equip_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (::std::istream& is,
                const ::std::wstring& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::equip_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (::std::istream& is,
                const ::std::wstring& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::equip_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (::std::istream& is,
                const ::std::wstring& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::equip_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::equip_table > (
      ::gdt::equip_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::equip_table > (
      ::gdt::equip_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::equip_table > (
      ::gdt::equip_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::equip_table > (
        ::gdt::equip_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"equip_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::equip_table > r (
        ::xsd::cxx::tree::traits< ::gdt::equip_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"equip_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::equip_table >
  equip_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"equip_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::equip_table > r (
        ::xsd::cxx::tree::traits< ::gdt::equip_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"equip_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  equip_table_ (::std::ostream& o,
                const ::gdt::equip_table& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::equip_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  equip_table_ (::std::ostream& o,
                const ::gdt::equip_table& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::equip_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  equip_table_ (::std::ostream& o,
                const ::gdt::equip_table& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::equip_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  equip_table_ (::xercesc::XMLFormatTarget& t,
                const ::gdt::equip_table& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::equip_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  equip_table_ (::xercesc::XMLFormatTarget& t,
                const ::gdt::equip_table& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::equip_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  equip_table_ (::xercesc::XMLFormatTarget& t,
                const ::gdt::equip_table& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::equip_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  equip_table_ (::xercesc::DOMDocument& d,
                const ::gdt::equip_table& s,
                ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"equip_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"equip_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  equip_table_ (const ::gdt::equip_table& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"equip_table",
        L"",
        m, f));

    ::gdt::equip_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const equip_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // item_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"item_code",
          e));

      a << i.item_code ();
    }

    // min_level
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"min_level",
          e));

      a << i.min_level ();
    }

    // item_grade
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"item_grade",
          e));

      a << i.item_grade ();
    }

    // item_enchant_level
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"item_enchant_level",
          e));

      a << i.item_enchant_level ();
    }

    // equip_part
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"equip_part",
          e));

      a << i.equip_part ();
    }

    // equip_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"equip_type",
          e));

      a << i.equip_type ();
    }

    // material_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"material_type",
          e));

      a << i.material_type ();
    }

    // looting_mil_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"looting_mil_sec",
          e));

      a << i.looting_mil_sec ();
    }

    // apply_script_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"apply_script_1",
          e));

      a << i.apply_script_1 ();
    }

    // apply_value_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"apply_value_1",
          e));

      a << i.apply_value_1 ();
    }

    // apply_script_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"apply_script_2",
          e));

      a << i.apply_script_2 ();
    }

    // apply_value_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"apply_value_2",
          e));

      a << i.apply_value_2 ();
    }

    // apply_script_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"apply_script_3",
          e));

      a << i.apply_script_3 ();
    }

    // apply_value_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"apply_value_3",
          e));

      a << i.apply_value_3 ();
    }

    // apply_script_4
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"apply_script_4",
          e));

      a << i.apply_script_4 ();
    }

    // apply_value_4
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"apply_value_4",
          e));

      a << i.apply_value_4 ();
    }

    // item_suffix_id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"item_suffix_id",
          e));

      a << i.item_suffix_id ();
    }

    // min_socket_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"min_socket_count",
          e));

      a << i.min_socket_count ();
    }

    // max_socket_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"max_socket_count",
          e));

      a << i.max_socket_count ();
    }

    // fragment_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"fragment_code",
          e));

      a << i.fragment_code ();
    }

    // upgrade_rate
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"upgrade_rate",
          e));

      a << i.upgrade_rate ();
    }

    // need_upgrade_item_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"need_upgrade_item_code",
          e));

      a << i.need_upgrade_item_code ();
    }

    // need_upgrade_item_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"need_upgrade_item_count",
          e));

      a << i.need_upgrade_item_count ();
    }

    // use_revision_upgrade_rate_item
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"use_revision_upgrade_rate_item",
          e));

      a << i.use_revision_upgrade_rate_item ();
    }

    // pre_upgrade_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"pre_upgrade_code",
          e));

      a << i.pre_upgrade_code ();
    }

    // next_upgrade_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"next_upgrade_code",
          e));

      a << i.next_upgrade_code ();
    }

    // sell_cost_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sell_cost_type",
          e));

      a << i.sell_cost_type ();
    }

    // sell_cost
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sell_cost",
          e));

      a << i.sell_cost ();
    }

    // buy_cost_type_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_type_1",
          e));

      a << i.buy_cost_type_1 ();
    }

    // buy_cost_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_1",
          e));

      a << i.buy_cost_1 ();
    }

    // buy_cost_type_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_type_2",
          e));

      a << i.buy_cost_type_2 ();
    }

    // buy_cost_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_2",
          e));

      a << i.buy_cost_2 ();
    }

    // wear_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"wear_type",
          e));

      a << i.wear_type ();
    }

    // mount_point
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"mount_point",
          e));

      a << i.mount_point ();
    }

    // unmount_point
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"unmount_point",
          e));

      a << i.unmount_point ();
    }

    // modeling_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"modeling_name",
          e));

      a << i.modeling_name ();
    }

    // effect_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"effect_name",
          e));

      a << i.effect_name ();
    }

    // material_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"material_name",
          e));

      a << i.material_name ();
    }

    // base_trail_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"base_trail_name",
          e));

      a << i.base_trail_name ();
    }

    // icon_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"icon_name",
          e));

      a << i.icon_name ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const equip_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // equip_template
    //
    for (equip_table::equip_template_const_iterator
         b (i.equip_template ().begin ()), n (i.equip_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"equip_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

