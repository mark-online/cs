// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_REPROCESS_TABLE_IXX
#define GDT_REPROCESS_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // reprocess_t
  // 

  inline
  const reprocess_t::item_code_type& reprocess_t::
  item_code () const
  {
    return this->item_code_.get ();
  }

  inline
  reprocess_t::item_code_type& reprocess_t::
  item_code ()
  {
    return this->item_code_.get ();
  }

  inline
  void reprocess_t::
  item_code (const item_code_type& x)
  {
    this->item_code_.set (x);
  }

  inline
  const reprocess_t::craft_type_type& reprocess_t::
  craft_type () const
  {
    return this->craft_type_.get ();
  }

  inline
  reprocess_t::craft_type_type& reprocess_t::
  craft_type ()
  {
    return this->craft_type_.get ();
  }

  inline
  void reprocess_t::
  craft_type (const craft_type_type& x)
  {
    this->craft_type_.set (x);
  }

  inline
  void reprocess_t::
  craft_type (::std::unique_ptr< craft_type_type > x)
  {
    this->craft_type_.set (std::move (x));
  }

  inline
  const reprocess_t::drop_count_type& reprocess_t::
  drop_count () const
  {
    return this->drop_count_.get ();
  }

  inline
  reprocess_t::drop_count_type& reprocess_t::
  drop_count ()
  {
    return this->drop_count_.get ();
  }

  inline
  void reprocess_t::
  drop_count (const drop_count_type& x)
  {
    this->drop_count_.set (x);
  }

  inline
  const reprocess_t::drop_rate_1_type& reprocess_t::
  drop_rate_1 () const
  {
    return this->drop_rate_1_.get ();
  }

  inline
  reprocess_t::drop_rate_1_type& reprocess_t::
  drop_rate_1 ()
  {
    return this->drop_rate_1_.get ();
  }

  inline
  void reprocess_t::
  drop_rate_1 (const drop_rate_1_type& x)
  {
    this->drop_rate_1_.set (x);
  }

  inline
  const reprocess_t::item_code_1_type& reprocess_t::
  item_code_1 () const
  {
    return this->item_code_1_.get ();
  }

  inline
  reprocess_t::item_code_1_type& reprocess_t::
  item_code_1 ()
  {
    return this->item_code_1_.get ();
  }

  inline
  void reprocess_t::
  item_code_1 (const item_code_1_type& x)
  {
    this->item_code_1_.set (x);
  }

  inline
  const reprocess_t::min_item_count_1_type& reprocess_t::
  min_item_count_1 () const
  {
    return this->min_item_count_1_.get ();
  }

  inline
  reprocess_t::min_item_count_1_type& reprocess_t::
  min_item_count_1 ()
  {
    return this->min_item_count_1_.get ();
  }

  inline
  void reprocess_t::
  min_item_count_1 (const min_item_count_1_type& x)
  {
    this->min_item_count_1_.set (x);
  }

  inline
  const reprocess_t::max_item_count_1_type& reprocess_t::
  max_item_count_1 () const
  {
    return this->max_item_count_1_.get ();
  }

  inline
  reprocess_t::max_item_count_1_type& reprocess_t::
  max_item_count_1 ()
  {
    return this->max_item_count_1_.get ();
  }

  inline
  void reprocess_t::
  max_item_count_1 (const max_item_count_1_type& x)
  {
    this->max_item_count_1_.set (x);
  }

  inline
  const reprocess_t::drop_rate_2_type& reprocess_t::
  drop_rate_2 () const
  {
    return this->drop_rate_2_.get ();
  }

  inline
  reprocess_t::drop_rate_2_type& reprocess_t::
  drop_rate_2 ()
  {
    return this->drop_rate_2_.get ();
  }

  inline
  void reprocess_t::
  drop_rate_2 (const drop_rate_2_type& x)
  {
    this->drop_rate_2_.set (x);
  }

  inline
  const reprocess_t::item_code_2_type& reprocess_t::
  item_code_2 () const
  {
    return this->item_code_2_.get ();
  }

  inline
  reprocess_t::item_code_2_type& reprocess_t::
  item_code_2 ()
  {
    return this->item_code_2_.get ();
  }

  inline
  void reprocess_t::
  item_code_2 (const item_code_2_type& x)
  {
    this->item_code_2_.set (x);
  }

  inline
  const reprocess_t::min_item_count_2_type& reprocess_t::
  min_item_count_2 () const
  {
    return this->min_item_count_2_.get ();
  }

  inline
  reprocess_t::min_item_count_2_type& reprocess_t::
  min_item_count_2 ()
  {
    return this->min_item_count_2_.get ();
  }

  inline
  void reprocess_t::
  min_item_count_2 (const min_item_count_2_type& x)
  {
    this->min_item_count_2_.set (x);
  }

  inline
  const reprocess_t::max_item_count_2_type& reprocess_t::
  max_item_count_2 () const
  {
    return this->max_item_count_2_.get ();
  }

  inline
  reprocess_t::max_item_count_2_type& reprocess_t::
  max_item_count_2 ()
  {
    return this->max_item_count_2_.get ();
  }

  inline
  void reprocess_t::
  max_item_count_2 (const max_item_count_2_type& x)
  {
    this->max_item_count_2_.set (x);
  }

  inline
  const reprocess_t::drop_rate_3_type& reprocess_t::
  drop_rate_3 () const
  {
    return this->drop_rate_3_.get ();
  }

  inline
  reprocess_t::drop_rate_3_type& reprocess_t::
  drop_rate_3 ()
  {
    return this->drop_rate_3_.get ();
  }

  inline
  void reprocess_t::
  drop_rate_3 (const drop_rate_3_type& x)
  {
    this->drop_rate_3_.set (x);
  }

  inline
  const reprocess_t::item_code_3_type& reprocess_t::
  item_code_3 () const
  {
    return this->item_code_3_.get ();
  }

  inline
  reprocess_t::item_code_3_type& reprocess_t::
  item_code_3 ()
  {
    return this->item_code_3_.get ();
  }

  inline
  void reprocess_t::
  item_code_3 (const item_code_3_type& x)
  {
    this->item_code_3_.set (x);
  }

  inline
  const reprocess_t::min_item_count_3_type& reprocess_t::
  min_item_count_3 () const
  {
    return this->min_item_count_3_.get ();
  }

  inline
  reprocess_t::min_item_count_3_type& reprocess_t::
  min_item_count_3 ()
  {
    return this->min_item_count_3_.get ();
  }

  inline
  void reprocess_t::
  min_item_count_3 (const min_item_count_3_type& x)
  {
    this->min_item_count_3_.set (x);
  }

  inline
  const reprocess_t::max_item_count_3_type& reprocess_t::
  max_item_count_3 () const
  {
    return this->max_item_count_3_.get ();
  }

  inline
  reprocess_t::max_item_count_3_type& reprocess_t::
  max_item_count_3 ()
  {
    return this->max_item_count_3_.get ();
  }

  inline
  void reprocess_t::
  max_item_count_3 (const max_item_count_3_type& x)
  {
    this->max_item_count_3_.set (x);
  }

  inline
  const reprocess_t::drop_rate_4_type& reprocess_t::
  drop_rate_4 () const
  {
    return this->drop_rate_4_.get ();
  }

  inline
  reprocess_t::drop_rate_4_type& reprocess_t::
  drop_rate_4 ()
  {
    return this->drop_rate_4_.get ();
  }

  inline
  void reprocess_t::
  drop_rate_4 (const drop_rate_4_type& x)
  {
    this->drop_rate_4_.set (x);
  }

  inline
  const reprocess_t::item_code_4_type& reprocess_t::
  item_code_4 () const
  {
    return this->item_code_4_.get ();
  }

  inline
  reprocess_t::item_code_4_type& reprocess_t::
  item_code_4 ()
  {
    return this->item_code_4_.get ();
  }

  inline
  void reprocess_t::
  item_code_4 (const item_code_4_type& x)
  {
    this->item_code_4_.set (x);
  }

  inline
  const reprocess_t::min_item_count_4_type& reprocess_t::
  min_item_count_4 () const
  {
    return this->min_item_count_4_.get ();
  }

  inline
  reprocess_t::min_item_count_4_type& reprocess_t::
  min_item_count_4 ()
  {
    return this->min_item_count_4_.get ();
  }

  inline
  void reprocess_t::
  min_item_count_4 (const min_item_count_4_type& x)
  {
    this->min_item_count_4_.set (x);
  }

  inline
  const reprocess_t::max_item_count_4_type& reprocess_t::
  max_item_count_4 () const
  {
    return this->max_item_count_4_.get ();
  }

  inline
  reprocess_t::max_item_count_4_type& reprocess_t::
  max_item_count_4 ()
  {
    return this->max_item_count_4_.get ();
  }

  inline
  void reprocess_t::
  max_item_count_4 (const max_item_count_4_type& x)
  {
    this->max_item_count_4_.set (x);
  }


  // reprocess_table
  // 

  inline
  const reprocess_table::reprocess_template_sequence& reprocess_table::
  reprocess_template () const
  {
    return this->reprocess_template_;
  }

  inline
  reprocess_table::reprocess_template_sequence& reprocess_table::
  reprocess_template ()
  {
    return this->reprocess_template_;
  }

  inline
  void reprocess_table::
  reprocess_template (const reprocess_template_sequence& s)
  {
    this->reprocess_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_REPROCESS_TABLE_IXX
