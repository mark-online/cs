// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_FACTION_TABLE_IXX
#define GDT_FACTION_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // faction_t
  // 

  inline
  const faction_t::faction_code_type& faction_t::
  faction_code () const
  {
    return this->faction_code_.get ();
  }

  inline
  faction_t::faction_code_type& faction_t::
  faction_code ()
  {
    return this->faction_code_.get ();
  }

  inline
  void faction_t::
  faction_code (const faction_code_type& x)
  {
    this->faction_code_.set (x);
  }

  inline
  void faction_t::
  faction_code (::std::unique_ptr< faction_code_type > x)
  {
    this->faction_code_.set (std::move (x));
  }

  inline
  const faction_t::our_mask_type& faction_t::
  our_mask () const
  {
    return this->our_mask_.get ();
  }

  inline
  faction_t::our_mask_type& faction_t::
  our_mask ()
  {
    return this->our_mask_.get ();
  }

  inline
  void faction_t::
  our_mask (const our_mask_type& x)
  {
    this->our_mask_.set (x);
  }

  inline
  const faction_t::friendly_mask_type& faction_t::
  friendly_mask () const
  {
    return this->friendly_mask_.get ();
  }

  inline
  faction_t::friendly_mask_type& faction_t::
  friendly_mask ()
  {
    return this->friendly_mask_.get ();
  }

  inline
  void faction_t::
  friendly_mask (const friendly_mask_type& x)
  {
    this->friendly_mask_.set (x);
  }

  inline
  const faction_t::hostile_mask_type& faction_t::
  hostile_mask () const
  {
    return this->hostile_mask_.get ();
  }

  inline
  faction_t::hostile_mask_type& faction_t::
  hostile_mask ()
  {
    return this->hostile_mask_.get ();
  }

  inline
  void faction_t::
  hostile_mask (const hostile_mask_type& x)
  {
    this->hostile_mask_.set (x);
  }

  inline
  const faction_t::friendly_factions_optional& faction_t::
  friendly_factions () const
  {
    return this->friendly_factions_;
  }

  inline
  faction_t::friendly_factions_optional& faction_t::
  friendly_factions ()
  {
    return this->friendly_factions_;
  }

  inline
  void faction_t::
  friendly_factions (const friendly_factions_type& x)
  {
    this->friendly_factions_.set (x);
  }

  inline
  void faction_t::
  friendly_factions (const friendly_factions_optional& x)
  {
    this->friendly_factions_ = x;
  }

  inline
  void faction_t::
  friendly_factions (::std::unique_ptr< friendly_factions_type > x)
  {
    this->friendly_factions_.set (std::move (x));
  }

  inline
  const faction_t::hostile_factions_optional& faction_t::
  hostile_factions () const
  {
    return this->hostile_factions_;
  }

  inline
  faction_t::hostile_factions_optional& faction_t::
  hostile_factions ()
  {
    return this->hostile_factions_;
  }

  inline
  void faction_t::
  hostile_factions (const hostile_factions_type& x)
  {
    this->hostile_factions_.set (x);
  }

  inline
  void faction_t::
  hostile_factions (const hostile_factions_optional& x)
  {
    this->hostile_factions_ = x;
  }

  inline
  void faction_t::
  hostile_factions (::std::unique_ptr< hostile_factions_type > x)
  {
    this->hostile_factions_.set (std::move (x));
  }


  // faction_list_t
  //

  inline
  faction_list_t::
  faction_list_t ()
  : ::xsd::cxx::tree::list< ::xml_schema::unsigned_byte, wchar_t > (this)
  {
  }

  inline
  faction_list_t::
  faction_list_t (size_type n, const ::xml_schema::unsigned_byte& x)
  : ::xsd::cxx::tree::list< ::xml_schema::unsigned_byte, wchar_t > (n, x, this)
  {
  }

  inline
  faction_list_t::
  faction_list_t (const faction_list_t& o,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::simple_type (o, f, c),
    ::xsd::cxx::tree::list< ::xml_schema::unsigned_byte, wchar_t > (o, f, this)
  {
  }

  // faction_table
  // 

  inline
  const faction_table::faction_template_sequence& faction_table::
  faction_template () const
  {
    return this->faction_template_;
  }

  inline
  faction_table::faction_template_sequence& faction_table::
  faction_template ()
  {
    return this->faction_template_;
  }

  inline
  void faction_table::
  faction_template (const faction_template_sequence& s)
  {
    this->faction_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_FACTION_TABLE_IXX
