// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "recipe_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // recipe_t
  //

  recipe_t::
  recipe_t ()
  : ::xml_schema::type (),
    recipe_code_ (this),
    is_recipe_item_ (this),
    craft_type_ (this),
    looting_mil_sec_ (this),
    complete_mil_sec_ (this),
    complete_item_code_ (this),
    need_item_1_ (this),
    need_item_count_1_ (this),
    need_item_2_ (this),
    need_item_count_2_ (this),
    need_item_3_ (this),
    need_item_count_3_ (this),
    stack_count_ (this),
    sell_cost_type_ (this),
    sell_cost_ (this),
    buy_cost_type_1_ (this),
    buy_cost_1_ (this),
    buy_cost_type_2_ (this),
    buy_cost_2_ (this),
    icon_name_ (this)
  {
  }

  recipe_t::
  recipe_t (const recipe_code_type& recipe_code,
            const is_recipe_item_type& is_recipe_item,
            const craft_type_type& craft_type,
            const looting_mil_sec_type& looting_mil_sec,
            const complete_mil_sec_type& complete_mil_sec,
            const complete_item_code_type& complete_item_code,
            const need_item_1_type& need_item_1,
            const need_item_count_1_type& need_item_count_1,
            const need_item_2_type& need_item_2,
            const need_item_count_2_type& need_item_count_2,
            const need_item_3_type& need_item_3,
            const need_item_count_3_type& need_item_count_3,
            const stack_count_type& stack_count,
            const sell_cost_type_type& sell_cost_type,
            const sell_cost_type1& sell_cost,
            const buy_cost_type_1_type& buy_cost_type_1,
            const buy_cost_1_type& buy_cost_1,
            const buy_cost_type_2_type& buy_cost_type_2,
            const buy_cost_2_type& buy_cost_2,
            const icon_name_type& icon_name)
  : ::xml_schema::type (),
    recipe_code_ (recipe_code, this),
    is_recipe_item_ (is_recipe_item, this),
    craft_type_ (craft_type, this),
    looting_mil_sec_ (looting_mil_sec, this),
    complete_mil_sec_ (complete_mil_sec, this),
    complete_item_code_ (complete_item_code, this),
    need_item_1_ (need_item_1, this),
    need_item_count_1_ (need_item_count_1, this),
    need_item_2_ (need_item_2, this),
    need_item_count_2_ (need_item_count_2, this),
    need_item_3_ (need_item_3, this),
    need_item_count_3_ (need_item_count_3, this),
    stack_count_ (stack_count, this),
    sell_cost_type_ (sell_cost_type, this),
    sell_cost_ (sell_cost, this),
    buy_cost_type_1_ (buy_cost_type_1, this),
    buy_cost_1_ (buy_cost_1, this),
    buy_cost_type_2_ (buy_cost_type_2, this),
    buy_cost_2_ (buy_cost_2, this),
    icon_name_ (icon_name, this)
  {
  }

  recipe_t::
  recipe_t (const recipe_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    recipe_code_ (x.recipe_code_, f, this),
    is_recipe_item_ (x.is_recipe_item_, f, this),
    craft_type_ (x.craft_type_, f, this),
    looting_mil_sec_ (x.looting_mil_sec_, f, this),
    complete_mil_sec_ (x.complete_mil_sec_, f, this),
    complete_item_code_ (x.complete_item_code_, f, this),
    need_item_1_ (x.need_item_1_, f, this),
    need_item_count_1_ (x.need_item_count_1_, f, this),
    need_item_2_ (x.need_item_2_, f, this),
    need_item_count_2_ (x.need_item_count_2_, f, this),
    need_item_3_ (x.need_item_3_, f, this),
    need_item_count_3_ (x.need_item_count_3_, f, this),
    stack_count_ (x.stack_count_, f, this),
    sell_cost_type_ (x.sell_cost_type_, f, this),
    sell_cost_ (x.sell_cost_, f, this),
    buy_cost_type_1_ (x.buy_cost_type_1_, f, this),
    buy_cost_1_ (x.buy_cost_1_, f, this),
    buy_cost_type_2_ (x.buy_cost_type_2_, f, this),
    buy_cost_2_ (x.buy_cost_2_, f, this),
    icon_name_ (x.icon_name_, f, this)
  {
  }

  recipe_t::
  recipe_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    recipe_code_ (this),
    is_recipe_item_ (this),
    craft_type_ (this),
    looting_mil_sec_ (this),
    complete_mil_sec_ (this),
    complete_item_code_ (this),
    need_item_1_ (this),
    need_item_count_1_ (this),
    need_item_2_ (this),
    need_item_count_2_ (this),
    need_item_3_ (this),
    need_item_count_3_ (this),
    stack_count_ (this),
    sell_cost_type_ (this),
    sell_cost_ (this),
    buy_cost_type_1_ (this),
    buy_cost_1_ (this),
    buy_cost_type_2_ (this),
    buy_cost_2_ (this),
    icon_name_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void recipe_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"recipe_code" && n.namespace_ ().empty ())
      {
        this->recipe_code_.set (recipe_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"is_recipe_item" && n.namespace_ ().empty ())
      {
        this->is_recipe_item_.set (is_recipe_item_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"craft_type" && n.namespace_ ().empty ())
      {
        this->craft_type_.set (craft_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"looting_mil_sec" && n.namespace_ ().empty ())
      {
        this->looting_mil_sec_.set (looting_mil_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"complete_mil_sec" && n.namespace_ ().empty ())
      {
        this->complete_mil_sec_.set (complete_mil_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"complete_item_code" && n.namespace_ ().empty ())
      {
        this->complete_item_code_.set (complete_item_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"need_item_1" && n.namespace_ ().empty ())
      {
        this->need_item_1_.set (need_item_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"need_item_count_1" && n.namespace_ ().empty ())
      {
        this->need_item_count_1_.set (need_item_count_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"need_item_2" && n.namespace_ ().empty ())
      {
        this->need_item_2_.set (need_item_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"need_item_count_2" && n.namespace_ ().empty ())
      {
        this->need_item_count_2_.set (need_item_count_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"need_item_3" && n.namespace_ ().empty ())
      {
        this->need_item_3_.set (need_item_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"need_item_count_3" && n.namespace_ ().empty ())
      {
        this->need_item_count_3_.set (need_item_count_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"stack_count" && n.namespace_ ().empty ())
      {
        this->stack_count_.set (stack_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sell_cost_type" && n.namespace_ ().empty ())
      {
        this->sell_cost_type_.set (sell_cost_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sell_cost" && n.namespace_ ().empty ())
      {
        this->sell_cost_.set (sell_cost_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_type_1" && n.namespace_ ().empty ())
      {
        this->buy_cost_type_1_.set (buy_cost_type_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_1" && n.namespace_ ().empty ())
      {
        this->buy_cost_1_.set (buy_cost_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_type_2" && n.namespace_ ().empty ())
      {
        this->buy_cost_type_2_.set (buy_cost_type_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_2" && n.namespace_ ().empty ())
      {
        this->buy_cost_2_.set (buy_cost_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"icon_name" && n.namespace_ ().empty ())
      {
        this->icon_name_.set (icon_name_traits::create (i, f, this));
        continue;
      }
    }

    if (!recipe_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"recipe_code",
        L"");
    }

    if (!is_recipe_item_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"is_recipe_item",
        L"");
    }

    if (!craft_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"craft_type",
        L"");
    }

    if (!looting_mil_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"looting_mil_sec",
        L"");
    }

    if (!complete_mil_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"complete_mil_sec",
        L"");
    }

    if (!complete_item_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"complete_item_code",
        L"");
    }

    if (!need_item_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"need_item_1",
        L"");
    }

    if (!need_item_count_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"need_item_count_1",
        L"");
    }

    if (!need_item_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"need_item_2",
        L"");
    }

    if (!need_item_count_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"need_item_count_2",
        L"");
    }

    if (!need_item_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"need_item_3",
        L"");
    }

    if (!need_item_count_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"need_item_count_3",
        L"");
    }

    if (!stack_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"stack_count",
        L"");
    }

    if (!sell_cost_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sell_cost_type",
        L"");
    }

    if (!sell_cost_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sell_cost",
        L"");
    }

    if (!buy_cost_type_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_type_1",
        L"");
    }

    if (!buy_cost_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_1",
        L"");
    }

    if (!buy_cost_type_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_type_2",
        L"");
    }

    if (!buy_cost_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_2",
        L"");
    }

    if (!icon_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"icon_name",
        L"");
    }
  }

  recipe_t* recipe_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class recipe_t (*this, f, c);
  }

  recipe_t& recipe_t::
  operator= (const recipe_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->recipe_code_ = x.recipe_code_;
      this->is_recipe_item_ = x.is_recipe_item_;
      this->craft_type_ = x.craft_type_;
      this->looting_mil_sec_ = x.looting_mil_sec_;
      this->complete_mil_sec_ = x.complete_mil_sec_;
      this->complete_item_code_ = x.complete_item_code_;
      this->need_item_1_ = x.need_item_1_;
      this->need_item_count_1_ = x.need_item_count_1_;
      this->need_item_2_ = x.need_item_2_;
      this->need_item_count_2_ = x.need_item_count_2_;
      this->need_item_3_ = x.need_item_3_;
      this->need_item_count_3_ = x.need_item_count_3_;
      this->stack_count_ = x.stack_count_;
      this->sell_cost_type_ = x.sell_cost_type_;
      this->sell_cost_ = x.sell_cost_;
      this->buy_cost_type_1_ = x.buy_cost_type_1_;
      this->buy_cost_1_ = x.buy_cost_1_;
      this->buy_cost_type_2_ = x.buy_cost_type_2_;
      this->buy_cost_2_ = x.buy_cost_2_;
      this->icon_name_ = x.icon_name_;
    }

    return *this;
  }

  recipe_t::
  ~recipe_t ()
  {
  }

  // recipe_table
  //

  recipe_table::
  recipe_table ()
  : ::xml_schema::type (),
    recipe_template_ (this)
  {
  }

  recipe_table::
  recipe_table (const recipe_table& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    recipe_template_ (x.recipe_template_, f, this)
  {
  }

  recipe_table::
  recipe_table (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    recipe_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void recipe_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // recipe_template
      //
      if (n.name () == L"recipe_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< recipe_template_type > r (
          recipe_template_traits::create (i, f, this));

        this->recipe_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  recipe_table* recipe_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class recipe_table (*this, f, c);
  }

  recipe_table& recipe_table::
  operator= (const recipe_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->recipe_template_ = x.recipe_template_;
    }

    return *this;
  }

  recipe_table::
  ~recipe_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (const ::std::wstring& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::recipe_table > (
      ::gdt::recipe_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (const ::std::wstring& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::recipe_table > (
      ::gdt::recipe_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (const ::std::wstring& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::recipe_table > (
      ::gdt::recipe_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::recipe_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::recipe_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::recipe_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::recipe_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::recipe_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::recipe_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::recipe_table > (
      ::gdt::recipe_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::recipe_table > (
      ::gdt::recipe_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::recipe_table > (
      ::gdt::recipe_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::recipe_table > (
        ::gdt::recipe_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"recipe_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::recipe_table > r (
        ::xsd::cxx::tree::traits< ::gdt::recipe_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"recipe_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::recipe_table >
  recipe_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"recipe_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::recipe_table > r (
        ::xsd::cxx::tree::traits< ::gdt::recipe_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"recipe_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  recipe_table_ (::std::ostream& o,
                 const ::gdt::recipe_table& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::recipe_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  recipe_table_ (::std::ostream& o,
                 const ::gdt::recipe_table& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::recipe_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  recipe_table_ (::std::ostream& o,
                 const ::gdt::recipe_table& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::recipe_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  recipe_table_ (::xercesc::XMLFormatTarget& t,
                 const ::gdt::recipe_table& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::recipe_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  recipe_table_ (::xercesc::XMLFormatTarget& t,
                 const ::gdt::recipe_table& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::recipe_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  recipe_table_ (::xercesc::XMLFormatTarget& t,
                 const ::gdt::recipe_table& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::recipe_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  recipe_table_ (::xercesc::DOMDocument& d,
                 const ::gdt::recipe_table& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"recipe_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"recipe_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  recipe_table_ (const ::gdt::recipe_table& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"recipe_table",
        L"",
        m, f));

    ::gdt::recipe_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const recipe_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // recipe_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"recipe_code",
          e));

      a << i.recipe_code ();
    }

    // is_recipe_item
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"is_recipe_item",
          e));

      a << i.is_recipe_item ();
    }

    // craft_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"craft_type",
          e));

      a << i.craft_type ();
    }

    // looting_mil_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"looting_mil_sec",
          e));

      a << i.looting_mil_sec ();
    }

    // complete_mil_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"complete_mil_sec",
          e));

      a << i.complete_mil_sec ();
    }

    // complete_item_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"complete_item_code",
          e));

      a << i.complete_item_code ();
    }

    // need_item_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"need_item_1",
          e));

      a << i.need_item_1 ();
    }

    // need_item_count_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"need_item_count_1",
          e));

      a << i.need_item_count_1 ();
    }

    // need_item_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"need_item_2",
          e));

      a << i.need_item_2 ();
    }

    // need_item_count_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"need_item_count_2",
          e));

      a << i.need_item_count_2 ();
    }

    // need_item_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"need_item_3",
          e));

      a << i.need_item_3 ();
    }

    // need_item_count_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"need_item_count_3",
          e));

      a << i.need_item_count_3 ();
    }

    // stack_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"stack_count",
          e));

      a << i.stack_count ();
    }

    // sell_cost_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sell_cost_type",
          e));

      a << i.sell_cost_type ();
    }

    // sell_cost
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sell_cost",
          e));

      a << i.sell_cost ();
    }

    // buy_cost_type_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_type_1",
          e));

      a << i.buy_cost_type_1 ();
    }

    // buy_cost_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_1",
          e));

      a << i.buy_cost_1 ();
    }

    // buy_cost_type_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_type_2",
          e));

      a << i.buy_cost_type_2 ();
    }

    // buy_cost_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_2",
          e));

      a << i.buy_cost_2 ();
    }

    // icon_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"icon_name",
          e));

      a << i.icon_name ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const recipe_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // recipe_template
    //
    for (recipe_table::recipe_template_const_iterator
         b (i.recipe_template ().begin ()), n (i.recipe_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"recipe_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

