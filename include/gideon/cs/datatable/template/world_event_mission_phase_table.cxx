// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "world_event_mission_phase_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // world_event_mission_phase_t
  //

  world_event_mission_phase_t::
  world_event_mission_phase_t ()
  : ::xml_schema::type (),
    world_event_code_ (::xml_schema::flags (), this),
    mission_phase_ (::xml_schema::flags (), this),
    mission_round_count_ (::xml_schema::flags (), this),
    start_region_code_ (::xml_schema::flags (), this),
    reward_cost_type_ (::xml_schema::flags (), this),
    reward_cost_value_ (::xml_schema::flags (), this),
    should_public_party_ (::xml_schema::flags (), this)
  {
  }

  world_event_mission_phase_t::
  world_event_mission_phase_t (const world_event_code_type& world_event_code,
                               const mission_phase_type& mission_phase,
                               const mission_round_count_type& mission_round_count,
                               const start_region_code_type& start_region_code,
                               const reward_cost_type_type& reward_cost_type,
                               const reward_cost_value_type& reward_cost_value,
                               const should_public_party_type& should_public_party)
  : ::xml_schema::type (),
    world_event_code_ (world_event_code, ::xml_schema::flags (), this),
    mission_phase_ (mission_phase, ::xml_schema::flags (), this),
    mission_round_count_ (mission_round_count, ::xml_schema::flags (), this),
    start_region_code_ (start_region_code, ::xml_schema::flags (), this),
    reward_cost_type_ (reward_cost_type, ::xml_schema::flags (), this),
    reward_cost_value_ (reward_cost_value, ::xml_schema::flags (), this),
    should_public_party_ (should_public_party, ::xml_schema::flags (), this)
  {
  }

  world_event_mission_phase_t::
  world_event_mission_phase_t (const world_event_mission_phase_t& x,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    world_event_code_ (x.world_event_code_, f, this),
    mission_phase_ (x.mission_phase_, f, this),
    mission_round_count_ (x.mission_round_count_, f, this),
    start_region_code_ (x.start_region_code_, f, this),
    reward_cost_type_ (x.reward_cost_type_, f, this),
    reward_cost_value_ (x.reward_cost_value_, f, this),
    should_public_party_ (x.should_public_party_, f, this)
  {
  }

  world_event_mission_phase_t::
  world_event_mission_phase_t (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f,
                               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    world_event_code_ (f, this),
    mission_phase_ (f, this),
    mission_round_count_ (f, this),
    start_region_code_ (f, this),
    reward_cost_type_ (f, this),
    reward_cost_value_ (f, this),
    should_public_party_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, true);
      this->parse (p, f);
    }
  }

  void world_event_mission_phase_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"world_event_code" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< world_event_code_type > r (
          world_event_code_traits::create (i, f, this));

        this->world_event_code_.set (r);
        continue;
      }

      if (n.name () == L"mission_phase" && n.namespace_ ().empty ())
      {
        this->mission_phase_.set (mission_phase_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"mission_round_count" && n.namespace_ ().empty ())
      {
        this->mission_round_count_.set (mission_round_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"start_region_code" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< start_region_code_type > r (
          start_region_code_traits::create (i, f, this));

        this->start_region_code_.set (r);
        continue;
      }

      if (n.name () == L"reward_cost_type" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< reward_cost_type_type > r (
          reward_cost_type_traits::create (i, f, this));

        this->reward_cost_type_.set (r);
        continue;
      }

      if (n.name () == L"reward_cost_value" && n.namespace_ ().empty ())
      {
        this->reward_cost_value_.set (reward_cost_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"should_public_party" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< should_public_party_type > r (
          should_public_party_traits::create (i, f, this));

        this->should_public_party_.set (r);
        continue;
      }
    }

    if (!world_event_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"world_event_code",
        L"");
    }

    if (!mission_phase_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"mission_phase",
        L"");
    }

    if (!mission_round_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"mission_round_count",
        L"");
    }

    if (!start_region_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"start_region_code",
        L"");
    }

    if (!reward_cost_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"reward_cost_type",
        L"");
    }

    if (!reward_cost_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"reward_cost_value",
        L"");
    }

    if (!should_public_party_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"should_public_party",
        L"");
    }
  }

  world_event_mission_phase_t* world_event_mission_phase_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class world_event_mission_phase_t (*this, f, c);
  }

  world_event_mission_phase_t::
  ~world_event_mission_phase_t ()
  {
  }

  // world_event_mission_phase_table
  //

  world_event_mission_phase_table::
  world_event_mission_phase_table ()
  : ::xml_schema::type (),
    world_event_mission_phase_template_ (::xml_schema::flags (), this)
  {
  }

  world_event_mission_phase_table::
  world_event_mission_phase_table (const world_event_mission_phase_table& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    world_event_mission_phase_template_ (x.world_event_mission_phase_template_, f, this)
  {
  }

  world_event_mission_phase_table::
  world_event_mission_phase_table (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    world_event_mission_phase_template_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
      this->parse (p, f);
    }
  }

  void world_event_mission_phase_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // world_event_mission_phase_template
      //
      if (n.name () == L"world_event_mission_phase_template" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< world_event_mission_phase_template_type > r (
          world_event_mission_phase_template_traits::create (i, f, this));

        this->world_event_mission_phase_template_.push_back (r);
        continue;
      }

      break;
    }
  }

  world_event_mission_phase_table* world_event_mission_phase_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class world_event_mission_phase_table (*this, f, c);
  }

  world_event_mission_phase_table::
  ~world_event_mission_phase_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (const ::std::wstring& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    ::std::auto_ptr< ::gdt::world_event_mission_phase_table > r (
      ::gdt::world_event_mission_phase_table_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (const ::std::wstring& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    ::std::auto_ptr< ::gdt::world_event_mission_phase_table > r (
      ::gdt::world_event_mission_phase_table_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (const ::std::wstring& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    ::std::auto_ptr< ::gdt::world_event_mission_phase_table > r (
      ::gdt::world_event_mission_phase_table_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::world_event_mission_phase_table_ (isrc, f, p);
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::world_event_mission_phase_table_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::world_event_mission_phase_table_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (::std::istream& is,
                                    const ::std::wstring& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::world_event_mission_phase_table_ (isrc, f, p);
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (::std::istream& is,
                                    const ::std::wstring& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::world_event_mission_phase_table_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (::std::istream& is,
                                    const ::std::wstring& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::world_event_mission_phase_table_ (isrc, h, f, p);
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    ::std::auto_ptr< ::gdt::world_event_mission_phase_table > r (
      ::gdt::world_event_mission_phase_table_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    ::std::auto_ptr< ::gdt::world_event_mission_phase_table > r (
      ::gdt::world_event_mission_phase_table_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    ::std::auto_ptr< ::gdt::world_event_mission_phase_table > r (
      ::gdt::world_event_mission_phase_table_ (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::gdt::world_event_mission_phase_table > r (
        ::gdt::world_event_mission_phase_table_ (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"world_event_mission_phase_table" &&
        n.namespace_ () == L"")
    {
      ::std::auto_ptr< ::gdt::world_event_mission_phase_table > r (
        ::xsd::cxx::tree::traits< ::gdt::world_event_mission_phase_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"world_event_mission_phase_table",
      L"");
  }

  ::std::auto_ptr< ::gdt::world_event_mission_phase_table >
  world_event_mission_phase_table_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"world_event_mission_phase_table" &&
        n.namespace_ () == L"")
    {
      ::std::auto_ptr< ::gdt::world_event_mission_phase_table > r (
        ::xsd::cxx::tree::traits< ::gdt::world_event_mission_phase_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"world_event_mission_phase_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  world_event_mission_phase_table_ (::std::ostream& o,
                                    const ::gdt::world_event_mission_phase_table& s,
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e,
                                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::gdt::world_event_mission_phase_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  world_event_mission_phase_table_ (::std::ostream& o,
                                    const ::gdt::world_event_mission_phase_table& s,
                                    ::xml_schema::error_handler& h,
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e,
                                    ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::gdt::world_event_mission_phase_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  world_event_mission_phase_table_ (::std::ostream& o,
                                    const ::gdt::world_event_mission_phase_table& s,
                                    ::xercesc::DOMErrorHandler& h,
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e,
                                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::gdt::world_event_mission_phase_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  world_event_mission_phase_table_ (::xercesc::XMLFormatTarget& t,
                                    const ::gdt::world_event_mission_phase_table& s,
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e,
                                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::gdt::world_event_mission_phase_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  world_event_mission_phase_table_ (::xercesc::XMLFormatTarget& t,
                                    const ::gdt::world_event_mission_phase_table& s,
                                    ::xml_schema::error_handler& h,
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e,
                                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::gdt::world_event_mission_phase_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  world_event_mission_phase_table_ (::xercesc::XMLFormatTarget& t,
                                    const ::gdt::world_event_mission_phase_table& s,
                                    ::xercesc::DOMErrorHandler& h,
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e,
                                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::gdt::world_event_mission_phase_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  world_event_mission_phase_table_ (::xercesc::DOMDocument& d,
                                    const ::gdt::world_event_mission_phase_table& s,
                                    ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"world_event_mission_phase_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"world_event_mission_phase_table",
        L"");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  world_event_mission_phase_table_ (const ::gdt::world_event_mission_phase_table& s,
                                    const ::xml_schema::namespace_infomap& m,
                                    ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"world_event_mission_phase_table",
        L"",
        m, f));

    ::gdt::world_event_mission_phase_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const world_event_mission_phase_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // world_event_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"world_event_code",
          e));

      a << i.world_event_code ();
    }

    // mission_phase
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"mission_phase",
          e));

      a << i.mission_phase ();
    }

    // mission_round_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"mission_round_count",
          e));

      a << i.mission_round_count ();
    }

    // start_region_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"start_region_code",
          e));

      a << i.start_region_code ();
    }

    // reward_cost_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"reward_cost_type",
          e));

      a << i.reward_cost_type ();
    }

    // reward_cost_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"reward_cost_value",
          e));

      a << i.reward_cost_value ();
    }

    // should_public_party
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"should_public_party",
          e));

      a << i.should_public_party ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const world_event_mission_phase_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // world_event_mission_phase_template
    //
    for (world_event_mission_phase_table::world_event_mission_phase_template_const_iterator
         b (i.world_event_mission_phase_template ().begin ()), n (i.world_event_mission_phase_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"world_event_mission_phase_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

