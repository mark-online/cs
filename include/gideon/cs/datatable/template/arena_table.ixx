// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_ARENA_TABLE_IXX
#define GDT_ARENA_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // arena_t
  // 

  inline
  const arena_t::arena_map_code_type& arena_t::
  arena_map_code () const
  {
    return this->arena_map_code_.get ();
  }

  inline
  arena_t::arena_map_code_type& arena_t::
  arena_map_code ()
  {
    return this->arena_map_code_.get ();
  }

  inline
  void arena_t::
  arena_map_code (const arena_map_code_type& x)
  {
    this->arena_map_code_.set (x);
  }

  inline
  void arena_t::
  arena_map_code (::std::unique_ptr< arena_map_code_type > x)
  {
    this->arena_map_code_.set (std::move (x));
  }

  inline
  const arena_t::x_sector_count_type& arena_t::
  x_sector_count () const
  {
    return this->x_sector_count_.get ();
  }

  inline
  arena_t::x_sector_count_type& arena_t::
  x_sector_count ()
  {
    return this->x_sector_count_.get ();
  }

  inline
  void arena_t::
  x_sector_count (const x_sector_count_type& x)
  {
    this->x_sector_count_.set (x);
  }

  inline
  const arena_t::y_sector_count_type& arena_t::
  y_sector_count () const
  {
    return this->y_sector_count_.get ();
  }

  inline
  arena_t::y_sector_count_type& arena_t::
  y_sector_count ()
  {
    return this->y_sector_count_.get ();
  }

  inline
  void arena_t::
  y_sector_count (const y_sector_count_type& x)
  {
    this->y_sector_count_.set (x);
  }

  inline
  const arena_t::z_sector_count_type& arena_t::
  z_sector_count () const
  {
    return this->z_sector_count_.get ();
  }

  inline
  arena_t::z_sector_count_type& arena_t::
  z_sector_count ()
  {
    return this->z_sector_count_.get ();
  }

  inline
  void arena_t::
  z_sector_count (const z_sector_count_type& x)
  {
    this->z_sector_count_.set (x);
  }

  inline
  const arena_t::sector_length_type& arena_t::
  sector_length () const
  {
    return this->sector_length_.get ();
  }

  inline
  arena_t::sector_length_type& arena_t::
  sector_length ()
  {
    return this->sector_length_.get ();
  }

  inline
  void arena_t::
  sector_length (const sector_length_type& x)
  {
    this->sector_length_.set (x);
  }

  inline
  const arena_t::min_player_count_type& arena_t::
  min_player_count () const
  {
    return this->min_player_count_.get ();
  }

  inline
  arena_t::min_player_count_type& arena_t::
  min_player_count ()
  {
    return this->min_player_count_.get ();
  }

  inline
  void arena_t::
  min_player_count (const min_player_count_type& x)
  {
    this->min_player_count_.set (x);
  }

  inline
  const arena_t::max_player_count_type& arena_t::
  max_player_count () const
  {
    return this->max_player_count_.get ();
  }

  inline
  arena_t::max_player_count_type& arena_t::
  max_player_count ()
  {
    return this->max_player_count_.get ();
  }

  inline
  void arena_t::
  max_player_count (const max_player_count_type& x)
  {
    this->max_player_count_.set (x);
  }

  inline
  const arena_t::arena_mode_type_type& arena_t::
  arena_mode_type () const
  {
    return this->arena_mode_type_.get ();
  }

  inline
  arena_t::arena_mode_type_type& arena_t::
  arena_mode_type ()
  {
    return this->arena_mode_type_.get ();
  }

  inline
  void arena_t::
  arena_mode_type (const arena_mode_type_type& x)
  {
    this->arena_mode_type_.set (x);
  }

  inline
  void arena_t::
  arena_mode_type (::std::unique_ptr< arena_mode_type_type > x)
  {
    this->arena_mode_type_.set (std::move (x));
  }

  inline
  const arena_t::can_mount_vehicle_type& arena_t::
  can_mount_vehicle () const
  {
    return this->can_mount_vehicle_.get ();
  }

  inline
  arena_t::can_mount_vehicle_type& arena_t::
  can_mount_vehicle ()
  {
    return this->can_mount_vehicle_.get ();
  }

  inline
  void arena_t::
  can_mount_vehicle (const can_mount_vehicle_type& x)
  {
    this->can_mount_vehicle_.set (x);
  }

  inline
  const arena_t::can_glider_type& arena_t::
  can_glider () const
  {
    return this->can_glider_.get ();
  }

  inline
  arena_t::can_glider_type& arena_t::
  can_glider ()
  {
    return this->can_glider_.get ();
  }

  inline
  void arena_t::
  can_glider (const can_glider_type& x)
  {
    this->can_glider_.set (x);
  }

  inline
  const arena_t::match_time_type& arena_t::
  match_time () const
  {
    return this->match_time_.get ();
  }

  inline
  arena_t::match_time_type& arena_t::
  match_time ()
  {
    return this->match_time_.get ();
  }

  inline
  void arena_t::
  match_time (const match_time_type& x)
  {
    this->match_time_.set (x);
  }


  // arena_mode_type_t
  // 


  // arenas
  // 

  inline
  const arenas::arena_template_sequence& arenas::
  arena_template () const
  {
    return this->arena_template_;
  }

  inline
  arenas::arena_template_sequence& arenas::
  arena_template ()
  {
    return this->arena_template_;
  }

  inline
  void arenas::
  arena_template (const arena_template_sequence& s)
  {
    this->arena_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_ARENA_TABLE_IXX
