// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "anchor_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // anchor_t
  //

  anchor_t::
  anchor_t ()
  : ::xml_schema::type (),
    anchor_code_ (this),
    achor_function_type_ (this),
    cooldown_mil_sec_ (this),
    live_sec_ (this),
    global_cooldown_index_ (this),
    global_cooldown_mil_sec_ (this),
    hp_ (this),
    defence_ (this),
    min_attack_power_ (this),
    max_attack_power_ (this),
    physical_attack_power_ (this),
    magic_attack_power_ (this),
    light_attribute_ (this),
    dark_attribute_ (this),
    fire_attribute_ (this),
    ice_attribute_ (this),
    light_attribute_regist_ (this),
    dark_attribute_regist_ (this),
    fire_attribute_regist_ (this),
    ice_attribute_regist_ (this),
    skill_code_ (this),
    active_interval_mil_sec_ (this),
    stack_count_ (this),
    sell_cost_type_ (this),
    sell_cost_ (this),
    buy_cost_type_1_ (this),
    buy_cost_1_ (this),
    buy_cost_type_2_ (this),
    buy_cost_2_ (this),
    modeling_radius_ (this),
    icon_name_ (this),
    build_modeling_ (this),
    build_animation_ (this),
    build_sec_ (this),
    build_effect_ (this),
    broken_animation_ (this),
    broken_effect_ (this),
    complete_modeling_ (this)
  {
  }

  anchor_t::
  anchor_t (const anchor_code_type& anchor_code,
            const achor_function_type_type& achor_function_type,
            const cooldown_mil_sec_type& cooldown_mil_sec,
            const live_sec_type& live_sec,
            const global_cooldown_index_type& global_cooldown_index,
            const global_cooldown_mil_sec_type& global_cooldown_mil_sec,
            const hp_type& hp,
            const defence_type& defence,
            const min_attack_power_type& min_attack_power,
            const max_attack_power_type& max_attack_power,
            const physical_attack_power_type& physical_attack_power,
            const magic_attack_power_type& magic_attack_power,
            const light_attribute_type& light_attribute,
            const dark_attribute_type& dark_attribute,
            const fire_attribute_type& fire_attribute,
            const ice_attribute_type& ice_attribute,
            const light_attribute_regist_type& light_attribute_regist,
            const dark_attribute_regist_type& dark_attribute_regist,
            const fire_attribute_regist_type& fire_attribute_regist,
            const ice_attribute_regist_type& ice_attribute_regist,
            const skill_code_type& skill_code,
            const active_interval_mil_sec_type& active_interval_mil_sec,
            const stack_count_type& stack_count,
            const sell_cost_type_type& sell_cost_type,
            const sell_cost_type1& sell_cost,
            const buy_cost_type_1_type& buy_cost_type_1,
            const buy_cost_1_type& buy_cost_1,
            const buy_cost_type_2_type& buy_cost_type_2,
            const buy_cost_2_type& buy_cost_2,
            const modeling_radius_type& modeling_radius,
            const icon_name_type& icon_name,
            const build_modeling_type& build_modeling,
            const build_animation_type& build_animation,
            const build_sec_type& build_sec,
            const build_effect_type& build_effect,
            const broken_animation_type& broken_animation,
            const broken_effect_type& broken_effect,
            const complete_modeling_type& complete_modeling)
  : ::xml_schema::type (),
    anchor_code_ (anchor_code, this),
    achor_function_type_ (achor_function_type, this),
    cooldown_mil_sec_ (cooldown_mil_sec, this),
    live_sec_ (live_sec, this),
    global_cooldown_index_ (global_cooldown_index, this),
    global_cooldown_mil_sec_ (global_cooldown_mil_sec, this),
    hp_ (hp, this),
    defence_ (defence, this),
    min_attack_power_ (min_attack_power, this),
    max_attack_power_ (max_attack_power, this),
    physical_attack_power_ (physical_attack_power, this),
    magic_attack_power_ (magic_attack_power, this),
    light_attribute_ (light_attribute, this),
    dark_attribute_ (dark_attribute, this),
    fire_attribute_ (fire_attribute, this),
    ice_attribute_ (ice_attribute, this),
    light_attribute_regist_ (light_attribute_regist, this),
    dark_attribute_regist_ (dark_attribute_regist, this),
    fire_attribute_regist_ (fire_attribute_regist, this),
    ice_attribute_regist_ (ice_attribute_regist, this),
    skill_code_ (skill_code, this),
    active_interval_mil_sec_ (active_interval_mil_sec, this),
    stack_count_ (stack_count, this),
    sell_cost_type_ (sell_cost_type, this),
    sell_cost_ (sell_cost, this),
    buy_cost_type_1_ (buy_cost_type_1, this),
    buy_cost_1_ (buy_cost_1, this),
    buy_cost_type_2_ (buy_cost_type_2, this),
    buy_cost_2_ (buy_cost_2, this),
    modeling_radius_ (modeling_radius, this),
    icon_name_ (icon_name, this),
    build_modeling_ (build_modeling, this),
    build_animation_ (build_animation, this),
    build_sec_ (build_sec, this),
    build_effect_ (build_effect, this),
    broken_animation_ (broken_animation, this),
    broken_effect_ (broken_effect, this),
    complete_modeling_ (complete_modeling, this)
  {
  }

  anchor_t::
  anchor_t (const anchor_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    anchor_code_ (x.anchor_code_, f, this),
    achor_function_type_ (x.achor_function_type_, f, this),
    cooldown_mil_sec_ (x.cooldown_mil_sec_, f, this),
    live_sec_ (x.live_sec_, f, this),
    global_cooldown_index_ (x.global_cooldown_index_, f, this),
    global_cooldown_mil_sec_ (x.global_cooldown_mil_sec_, f, this),
    hp_ (x.hp_, f, this),
    defence_ (x.defence_, f, this),
    min_attack_power_ (x.min_attack_power_, f, this),
    max_attack_power_ (x.max_attack_power_, f, this),
    physical_attack_power_ (x.physical_attack_power_, f, this),
    magic_attack_power_ (x.magic_attack_power_, f, this),
    light_attribute_ (x.light_attribute_, f, this),
    dark_attribute_ (x.dark_attribute_, f, this),
    fire_attribute_ (x.fire_attribute_, f, this),
    ice_attribute_ (x.ice_attribute_, f, this),
    light_attribute_regist_ (x.light_attribute_regist_, f, this),
    dark_attribute_regist_ (x.dark_attribute_regist_, f, this),
    fire_attribute_regist_ (x.fire_attribute_regist_, f, this),
    ice_attribute_regist_ (x.ice_attribute_regist_, f, this),
    skill_code_ (x.skill_code_, f, this),
    active_interval_mil_sec_ (x.active_interval_mil_sec_, f, this),
    stack_count_ (x.stack_count_, f, this),
    sell_cost_type_ (x.sell_cost_type_, f, this),
    sell_cost_ (x.sell_cost_, f, this),
    buy_cost_type_1_ (x.buy_cost_type_1_, f, this),
    buy_cost_1_ (x.buy_cost_1_, f, this),
    buy_cost_type_2_ (x.buy_cost_type_2_, f, this),
    buy_cost_2_ (x.buy_cost_2_, f, this),
    modeling_radius_ (x.modeling_radius_, f, this),
    icon_name_ (x.icon_name_, f, this),
    build_modeling_ (x.build_modeling_, f, this),
    build_animation_ (x.build_animation_, f, this),
    build_sec_ (x.build_sec_, f, this),
    build_effect_ (x.build_effect_, f, this),
    broken_animation_ (x.broken_animation_, f, this),
    broken_effect_ (x.broken_effect_, f, this),
    complete_modeling_ (x.complete_modeling_, f, this)
  {
  }

  anchor_t::
  anchor_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    anchor_code_ (this),
    achor_function_type_ (this),
    cooldown_mil_sec_ (this),
    live_sec_ (this),
    global_cooldown_index_ (this),
    global_cooldown_mil_sec_ (this),
    hp_ (this),
    defence_ (this),
    min_attack_power_ (this),
    max_attack_power_ (this),
    physical_attack_power_ (this),
    magic_attack_power_ (this),
    light_attribute_ (this),
    dark_attribute_ (this),
    fire_attribute_ (this),
    ice_attribute_ (this),
    light_attribute_regist_ (this),
    dark_attribute_regist_ (this),
    fire_attribute_regist_ (this),
    ice_attribute_regist_ (this),
    skill_code_ (this),
    active_interval_mil_sec_ (this),
    stack_count_ (this),
    sell_cost_type_ (this),
    sell_cost_ (this),
    buy_cost_type_1_ (this),
    buy_cost_1_ (this),
    buy_cost_type_2_ (this),
    buy_cost_2_ (this),
    modeling_radius_ (this),
    icon_name_ (this),
    build_modeling_ (this),
    build_animation_ (this),
    build_sec_ (this),
    build_effect_ (this),
    broken_animation_ (this),
    broken_effect_ (this),
    complete_modeling_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void anchor_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"anchor_code" && n.namespace_ ().empty ())
      {
        this->anchor_code_.set (anchor_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"achor_function_type" && n.namespace_ ().empty ())
      {
        this->achor_function_type_.set (achor_function_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"cooldown_mil_sec" && n.namespace_ ().empty ())
      {
        this->cooldown_mil_sec_.set (cooldown_mil_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"live_sec" && n.namespace_ ().empty ())
      {
        this->live_sec_.set (live_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"global_cooldown_index" && n.namespace_ ().empty ())
      {
        this->global_cooldown_index_.set (global_cooldown_index_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"global_cooldown_mil_sec" && n.namespace_ ().empty ())
      {
        this->global_cooldown_mil_sec_.set (global_cooldown_mil_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"hp" && n.namespace_ ().empty ())
      {
        this->hp_.set (hp_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"defence" && n.namespace_ ().empty ())
      {
        this->defence_.set (defence_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"min_attack_power" && n.namespace_ ().empty ())
      {
        this->min_attack_power_.set (min_attack_power_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"max_attack_power" && n.namespace_ ().empty ())
      {
        this->max_attack_power_.set (max_attack_power_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"physical_attack_power" && n.namespace_ ().empty ())
      {
        this->physical_attack_power_.set (physical_attack_power_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"magic_attack_power" && n.namespace_ ().empty ())
      {
        this->magic_attack_power_.set (magic_attack_power_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"light_attribute" && n.namespace_ ().empty ())
      {
        this->light_attribute_.set (light_attribute_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"dark_attribute" && n.namespace_ ().empty ())
      {
        this->dark_attribute_.set (dark_attribute_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"fire_attribute" && n.namespace_ ().empty ())
      {
        this->fire_attribute_.set (fire_attribute_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ice_attribute" && n.namespace_ ().empty ())
      {
        this->ice_attribute_.set (ice_attribute_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"light_attribute_regist" && n.namespace_ ().empty ())
      {
        this->light_attribute_regist_.set (light_attribute_regist_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"dark_attribute_regist" && n.namespace_ ().empty ())
      {
        this->dark_attribute_regist_.set (dark_attribute_regist_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"fire_attribute_regist" && n.namespace_ ().empty ())
      {
        this->fire_attribute_regist_.set (fire_attribute_regist_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"ice_attribute_regist" && n.namespace_ ().empty ())
      {
        this->ice_attribute_regist_.set (ice_attribute_regist_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"skill_code" && n.namespace_ ().empty ())
      {
        this->skill_code_.set (skill_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"active_interval_mil_sec" && n.namespace_ ().empty ())
      {
        this->active_interval_mil_sec_.set (active_interval_mil_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"stack_count" && n.namespace_ ().empty ())
      {
        this->stack_count_.set (stack_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sell_cost_type" && n.namespace_ ().empty ())
      {
        this->sell_cost_type_.set (sell_cost_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sell_cost" && n.namespace_ ().empty ())
      {
        this->sell_cost_.set (sell_cost_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_type_1" && n.namespace_ ().empty ())
      {
        this->buy_cost_type_1_.set (buy_cost_type_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_1" && n.namespace_ ().empty ())
      {
        this->buy_cost_1_.set (buy_cost_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_type_2" && n.namespace_ ().empty ())
      {
        this->buy_cost_type_2_.set (buy_cost_type_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"buy_cost_2" && n.namespace_ ().empty ())
      {
        this->buy_cost_2_.set (buy_cost_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"modeling_radius" && n.namespace_ ().empty ())
      {
        this->modeling_radius_.set (modeling_radius_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"icon_name" && n.namespace_ ().empty ())
      {
        this->icon_name_.set (icon_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"build_modeling" && n.namespace_ ().empty ())
      {
        this->build_modeling_.set (build_modeling_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"build_animation" && n.namespace_ ().empty ())
      {
        this->build_animation_.set (build_animation_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"build_sec" && n.namespace_ ().empty ())
      {
        this->build_sec_.set (build_sec_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"build_effect" && n.namespace_ ().empty ())
      {
        this->build_effect_.set (build_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"broken_animation" && n.namespace_ ().empty ())
      {
        this->broken_animation_.set (broken_animation_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"broken_effect" && n.namespace_ ().empty ())
      {
        this->broken_effect_.set (broken_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"complete_modeling" && n.namespace_ ().empty ())
      {
        this->complete_modeling_.set (complete_modeling_traits::create (i, f, this));
        continue;
      }
    }

    if (!anchor_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"anchor_code",
        L"");
    }

    if (!achor_function_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"achor_function_type",
        L"");
    }

    if (!cooldown_mil_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"cooldown_mil_sec",
        L"");
    }

    if (!live_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"live_sec",
        L"");
    }

    if (!global_cooldown_index_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"global_cooldown_index",
        L"");
    }

    if (!global_cooldown_mil_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"global_cooldown_mil_sec",
        L"");
    }

    if (!hp_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"hp",
        L"");
    }

    if (!defence_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"defence",
        L"");
    }

    if (!min_attack_power_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"min_attack_power",
        L"");
    }

    if (!max_attack_power_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"max_attack_power",
        L"");
    }

    if (!physical_attack_power_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"physical_attack_power",
        L"");
    }

    if (!magic_attack_power_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"magic_attack_power",
        L"");
    }

    if (!light_attribute_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"light_attribute",
        L"");
    }

    if (!dark_attribute_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"dark_attribute",
        L"");
    }

    if (!fire_attribute_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"fire_attribute",
        L"");
    }

    if (!ice_attribute_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ice_attribute",
        L"");
    }

    if (!light_attribute_regist_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"light_attribute_regist",
        L"");
    }

    if (!dark_attribute_regist_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"dark_attribute_regist",
        L"");
    }

    if (!fire_attribute_regist_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"fire_attribute_regist",
        L"");
    }

    if (!ice_attribute_regist_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"ice_attribute_regist",
        L"");
    }

    if (!skill_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"skill_code",
        L"");
    }

    if (!active_interval_mil_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"active_interval_mil_sec",
        L"");
    }

    if (!stack_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"stack_count",
        L"");
    }

    if (!sell_cost_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sell_cost_type",
        L"");
    }

    if (!sell_cost_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sell_cost",
        L"");
    }

    if (!buy_cost_type_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_type_1",
        L"");
    }

    if (!buy_cost_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_1",
        L"");
    }

    if (!buy_cost_type_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_type_2",
        L"");
    }

    if (!buy_cost_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"buy_cost_2",
        L"");
    }

    if (!modeling_radius_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"modeling_radius",
        L"");
    }

    if (!icon_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"icon_name",
        L"");
    }

    if (!build_modeling_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"build_modeling",
        L"");
    }

    if (!build_animation_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"build_animation",
        L"");
    }

    if (!build_sec_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"build_sec",
        L"");
    }

    if (!build_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"build_effect",
        L"");
    }

    if (!broken_animation_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"broken_animation",
        L"");
    }

    if (!broken_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"broken_effect",
        L"");
    }

    if (!complete_modeling_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"complete_modeling",
        L"");
    }
  }

  anchor_t* anchor_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class anchor_t (*this, f, c);
  }

  anchor_t& anchor_t::
  operator= (const anchor_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->anchor_code_ = x.anchor_code_;
      this->achor_function_type_ = x.achor_function_type_;
      this->cooldown_mil_sec_ = x.cooldown_mil_sec_;
      this->live_sec_ = x.live_sec_;
      this->global_cooldown_index_ = x.global_cooldown_index_;
      this->global_cooldown_mil_sec_ = x.global_cooldown_mil_sec_;
      this->hp_ = x.hp_;
      this->defence_ = x.defence_;
      this->min_attack_power_ = x.min_attack_power_;
      this->max_attack_power_ = x.max_attack_power_;
      this->physical_attack_power_ = x.physical_attack_power_;
      this->magic_attack_power_ = x.magic_attack_power_;
      this->light_attribute_ = x.light_attribute_;
      this->dark_attribute_ = x.dark_attribute_;
      this->fire_attribute_ = x.fire_attribute_;
      this->ice_attribute_ = x.ice_attribute_;
      this->light_attribute_regist_ = x.light_attribute_regist_;
      this->dark_attribute_regist_ = x.dark_attribute_regist_;
      this->fire_attribute_regist_ = x.fire_attribute_regist_;
      this->ice_attribute_regist_ = x.ice_attribute_regist_;
      this->skill_code_ = x.skill_code_;
      this->active_interval_mil_sec_ = x.active_interval_mil_sec_;
      this->stack_count_ = x.stack_count_;
      this->sell_cost_type_ = x.sell_cost_type_;
      this->sell_cost_ = x.sell_cost_;
      this->buy_cost_type_1_ = x.buy_cost_type_1_;
      this->buy_cost_1_ = x.buy_cost_1_;
      this->buy_cost_type_2_ = x.buy_cost_type_2_;
      this->buy_cost_2_ = x.buy_cost_2_;
      this->modeling_radius_ = x.modeling_radius_;
      this->icon_name_ = x.icon_name_;
      this->build_modeling_ = x.build_modeling_;
      this->build_animation_ = x.build_animation_;
      this->build_sec_ = x.build_sec_;
      this->build_effect_ = x.build_effect_;
      this->broken_animation_ = x.broken_animation_;
      this->broken_effect_ = x.broken_effect_;
      this->complete_modeling_ = x.complete_modeling_;
    }

    return *this;
  }

  anchor_t::
  ~anchor_t ()
  {
  }

  // anchor_table
  //

  anchor_table::
  anchor_table ()
  : ::xml_schema::type (),
    anchor_template_ (this)
  {
  }

  anchor_table::
  anchor_table (const anchor_table& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    anchor_template_ (x.anchor_template_, f, this)
  {
  }

  anchor_table::
  anchor_table (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    anchor_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void anchor_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // anchor_template
      //
      if (n.name () == L"anchor_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< anchor_template_type > r (
          anchor_template_traits::create (i, f, this));

        this->anchor_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  anchor_table* anchor_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class anchor_table (*this, f, c);
  }

  anchor_table& anchor_table::
  operator= (const anchor_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->anchor_template_ = x.anchor_template_;
    }

    return *this;
  }

  anchor_table::
  ~anchor_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (const ::std::wstring& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::anchor_table > (
      ::gdt::anchor_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (const ::std::wstring& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::anchor_table > (
      ::gdt::anchor_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (const ::std::wstring& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::anchor_table > (
      ::gdt::anchor_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::anchor_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::anchor_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::anchor_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::anchor_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::anchor_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::anchor_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::anchor_table > (
      ::gdt::anchor_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::anchor_table > (
      ::gdt::anchor_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::anchor_table > (
      ::gdt::anchor_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::anchor_table > (
        ::gdt::anchor_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"anchor_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::anchor_table > r (
        ::xsd::cxx::tree::traits< ::gdt::anchor_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"anchor_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::anchor_table >
  anchor_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"anchor_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::anchor_table > r (
        ::xsd::cxx::tree::traits< ::gdt::anchor_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"anchor_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  anchor_table_ (::std::ostream& o,
                 const ::gdt::anchor_table& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::anchor_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  anchor_table_ (::std::ostream& o,
                 const ::gdt::anchor_table& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::anchor_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  anchor_table_ (::std::ostream& o,
                 const ::gdt::anchor_table& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::anchor_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  anchor_table_ (::xercesc::XMLFormatTarget& t,
                 const ::gdt::anchor_table& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::anchor_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  anchor_table_ (::xercesc::XMLFormatTarget& t,
                 const ::gdt::anchor_table& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::anchor_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  anchor_table_ (::xercesc::XMLFormatTarget& t,
                 const ::gdt::anchor_table& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::anchor_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  anchor_table_ (::xercesc::DOMDocument& d,
                 const ::gdt::anchor_table& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"anchor_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"anchor_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  anchor_table_ (const ::gdt::anchor_table& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"anchor_table",
        L"",
        m, f));

    ::gdt::anchor_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const anchor_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // anchor_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"anchor_code",
          e));

      a << i.anchor_code ();
    }

    // achor_function_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"achor_function_type",
          e));

      a << i.achor_function_type ();
    }

    // cooldown_mil_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"cooldown_mil_sec",
          e));

      a << i.cooldown_mil_sec ();
    }

    // live_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"live_sec",
          e));

      a << i.live_sec ();
    }

    // global_cooldown_index
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"global_cooldown_index",
          e));

      a << i.global_cooldown_index ();
    }

    // global_cooldown_mil_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"global_cooldown_mil_sec",
          e));

      a << i.global_cooldown_mil_sec ();
    }

    // hp
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"hp",
          e));

      a << i.hp ();
    }

    // defence
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"defence",
          e));

      a << i.defence ();
    }

    // min_attack_power
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"min_attack_power",
          e));

      a << i.min_attack_power ();
    }

    // max_attack_power
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"max_attack_power",
          e));

      a << i.max_attack_power ();
    }

    // physical_attack_power
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"physical_attack_power",
          e));

      a << i.physical_attack_power ();
    }

    // magic_attack_power
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"magic_attack_power",
          e));

      a << i.magic_attack_power ();
    }

    // light_attribute
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"light_attribute",
          e));

      a << i.light_attribute ();
    }

    // dark_attribute
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"dark_attribute",
          e));

      a << i.dark_attribute ();
    }

    // fire_attribute
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"fire_attribute",
          e));

      a << i.fire_attribute ();
    }

    // ice_attribute
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ice_attribute",
          e));

      a << i.ice_attribute ();
    }

    // light_attribute_regist
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"light_attribute_regist",
          e));

      a << i.light_attribute_regist ();
    }

    // dark_attribute_regist
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"dark_attribute_regist",
          e));

      a << i.dark_attribute_regist ();
    }

    // fire_attribute_regist
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"fire_attribute_regist",
          e));

      a << i.fire_attribute_regist ();
    }

    // ice_attribute_regist
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"ice_attribute_regist",
          e));

      a << i.ice_attribute_regist ();
    }

    // skill_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"skill_code",
          e));

      a << i.skill_code ();
    }

    // active_interval_mil_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"active_interval_mil_sec",
          e));

      a << i.active_interval_mil_sec ();
    }

    // stack_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"stack_count",
          e));

      a << i.stack_count ();
    }

    // sell_cost_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sell_cost_type",
          e));

      a << i.sell_cost_type ();
    }

    // sell_cost
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sell_cost",
          e));

      a << i.sell_cost ();
    }

    // buy_cost_type_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_type_1",
          e));

      a << i.buy_cost_type_1 ();
    }

    // buy_cost_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_1",
          e));

      a << i.buy_cost_1 ();
    }

    // buy_cost_type_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_type_2",
          e));

      a << i.buy_cost_type_2 ();
    }

    // buy_cost_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"buy_cost_2",
          e));

      a << i.buy_cost_2 ();
    }

    // modeling_radius
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"modeling_radius",
          e));

      a << i.modeling_radius ();
    }

    // icon_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"icon_name",
          e));

      a << i.icon_name ();
    }

    // build_modeling
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"build_modeling",
          e));

      a << i.build_modeling ();
    }

    // build_animation
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"build_animation",
          e));

      a << i.build_animation ();
    }

    // build_sec
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"build_sec",
          e));

      a << i.build_sec ();
    }

    // build_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"build_effect",
          e));

      a << i.build_effect ();
    }

    // broken_animation
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"broken_animation",
          e));

      a << i.broken_animation ();
    }

    // broken_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"broken_effect",
          e));

      a << i.broken_effect ();
    }

    // complete_modeling
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"complete_modeling",
          e));

      a << i.complete_modeling ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const anchor_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // anchor_template
    //
    for (anchor_table::anchor_template_const_iterator
         b (i.anchor_template ().begin ()), n (i.anchor_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"anchor_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

