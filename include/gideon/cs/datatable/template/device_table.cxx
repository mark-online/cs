// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "device_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // device_t
  //

  device_t::
  device_t ()
  : ::xml_schema::type (),
    device_code_ (this),
    modeling_ (this),
    reactivate_interval_ (this),
    activate_animation_ (this),
    object_ambient_anim_ (this),
    cast_time_ (this),
    condition1_type_ (this),
    condition1_param1_ (this),
    condition1_param2_ (this),
    condition2_type_ (this),
    condition2_param1_ (this),
    condition2_param2_ (this),
    object_effect_ (this),
    object_activated_anim_ (this),
    object_activated_effect_ (this),
    activate_type_ (this),
    activate_param1_ (this),
    activate_param2_ (this),
    activate_param3_ (this),
    mount_datablock_name_ (this),
    start_dealy_time_min_ (this),
    start_dealy_time_max_ (this)
  {
  }

  device_t::
  device_t (const device_code_type& device_code,
            const modeling_type& modeling,
            const reactivate_interval_type& reactivate_interval,
            const activate_animation_type& activate_animation,
            const object_ambient_anim_type& object_ambient_anim,
            const cast_time_type& cast_time,
            const condition1_type_type& condition1_type,
            const condition1_param1_type& condition1_param1,
            const condition1_param2_type& condition1_param2,
            const condition2_type_type& condition2_type,
            const condition2_param1_type& condition2_param1,
            const condition2_param2_type& condition2_param2,
            const object_effect_type& object_effect,
            const object_activated_anim_type& object_activated_anim,
            const object_activated_effect_type& object_activated_effect,
            const activate_type_type& activate_type,
            const activate_param1_type& activate_param1,
            const activate_param2_type& activate_param2,
            const activate_param3_type& activate_param3,
            const mount_datablock_name_type& mount_datablock_name,
            const start_dealy_time_min_type& start_dealy_time_min,
            const start_dealy_time_max_type& start_dealy_time_max)
  : ::xml_schema::type (),
    device_code_ (device_code, this),
    modeling_ (modeling, this),
    reactivate_interval_ (reactivate_interval, this),
    activate_animation_ (activate_animation, this),
    object_ambient_anim_ (object_ambient_anim, this),
    cast_time_ (cast_time, this),
    condition1_type_ (condition1_type, this),
    condition1_param1_ (condition1_param1, this),
    condition1_param2_ (condition1_param2, this),
    condition2_type_ (condition2_type, this),
    condition2_param1_ (condition2_param1, this),
    condition2_param2_ (condition2_param2, this),
    object_effect_ (object_effect, this),
    object_activated_anim_ (object_activated_anim, this),
    object_activated_effect_ (object_activated_effect, this),
    activate_type_ (activate_type, this),
    activate_param1_ (activate_param1, this),
    activate_param2_ (activate_param2, this),
    activate_param3_ (activate_param3, this),
    mount_datablock_name_ (mount_datablock_name, this),
    start_dealy_time_min_ (start_dealy_time_min, this),
    start_dealy_time_max_ (start_dealy_time_max, this)
  {
  }

  device_t::
  device_t (const device_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    device_code_ (x.device_code_, f, this),
    modeling_ (x.modeling_, f, this),
    reactivate_interval_ (x.reactivate_interval_, f, this),
    activate_animation_ (x.activate_animation_, f, this),
    object_ambient_anim_ (x.object_ambient_anim_, f, this),
    cast_time_ (x.cast_time_, f, this),
    condition1_type_ (x.condition1_type_, f, this),
    condition1_param1_ (x.condition1_param1_, f, this),
    condition1_param2_ (x.condition1_param2_, f, this),
    condition2_type_ (x.condition2_type_, f, this),
    condition2_param1_ (x.condition2_param1_, f, this),
    condition2_param2_ (x.condition2_param2_, f, this),
    object_effect_ (x.object_effect_, f, this),
    object_activated_anim_ (x.object_activated_anim_, f, this),
    object_activated_effect_ (x.object_activated_effect_, f, this),
    activate_type_ (x.activate_type_, f, this),
    activate_param1_ (x.activate_param1_, f, this),
    activate_param2_ (x.activate_param2_, f, this),
    activate_param3_ (x.activate_param3_, f, this),
    mount_datablock_name_ (x.mount_datablock_name_, f, this),
    start_dealy_time_min_ (x.start_dealy_time_min_, f, this),
    start_dealy_time_max_ (x.start_dealy_time_max_, f, this)
  {
  }

  device_t::
  device_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    device_code_ (this),
    modeling_ (this),
    reactivate_interval_ (this),
    activate_animation_ (this),
    object_ambient_anim_ (this),
    cast_time_ (this),
    condition1_type_ (this),
    condition1_param1_ (this),
    condition1_param2_ (this),
    condition2_type_ (this),
    condition2_param1_ (this),
    condition2_param2_ (this),
    object_effect_ (this),
    object_activated_anim_ (this),
    object_activated_effect_ (this),
    activate_type_ (this),
    activate_param1_ (this),
    activate_param2_ (this),
    activate_param3_ (this),
    mount_datablock_name_ (this),
    start_dealy_time_min_ (this),
    start_dealy_time_max_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void device_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"device_code" && n.namespace_ ().empty ())
      {
        this->device_code_.set (device_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"modeling" && n.namespace_ ().empty ())
      {
        this->modeling_.set (modeling_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"reactivate_interval" && n.namespace_ ().empty ())
      {
        this->reactivate_interval_.set (reactivate_interval_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"activate_animation" && n.namespace_ ().empty ())
      {
        this->activate_animation_.set (activate_animation_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"object_ambient_anim" && n.namespace_ ().empty ())
      {
        this->object_ambient_anim_.set (object_ambient_anim_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"cast_time" && n.namespace_ ().empty ())
      {
        this->cast_time_.set (cast_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"condition1_type" && n.namespace_ ().empty ())
      {
        this->condition1_type_.set (condition1_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"condition1_param1" && n.namespace_ ().empty ())
      {
        this->condition1_param1_.set (condition1_param1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"condition1_param2" && n.namespace_ ().empty ())
      {
        this->condition1_param2_.set (condition1_param2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"condition2_type" && n.namespace_ ().empty ())
      {
        this->condition2_type_.set (condition2_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"condition2_param1" && n.namespace_ ().empty ())
      {
        this->condition2_param1_.set (condition2_param1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"condition2_param2" && n.namespace_ ().empty ())
      {
        this->condition2_param2_.set (condition2_param2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"object_effect" && n.namespace_ ().empty ())
      {
        this->object_effect_.set (object_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"object_activated_anim" && n.namespace_ ().empty ())
      {
        this->object_activated_anim_.set (object_activated_anim_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"object_activated_effect" && n.namespace_ ().empty ())
      {
        this->object_activated_effect_.set (object_activated_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"activate_type" && n.namespace_ ().empty ())
      {
        this->activate_type_.set (activate_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"activate_param1" && n.namespace_ ().empty ())
      {
        this->activate_param1_.set (activate_param1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"activate_param2" && n.namespace_ ().empty ())
      {
        this->activate_param2_.set (activate_param2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"activate_param3" && n.namespace_ ().empty ())
      {
        this->activate_param3_.set (activate_param3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"mount_datablock_name" && n.namespace_ ().empty ())
      {
        this->mount_datablock_name_.set (mount_datablock_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"start_dealy_time_min" && n.namespace_ ().empty ())
      {
        this->start_dealy_time_min_.set (start_dealy_time_min_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"start_dealy_time_max" && n.namespace_ ().empty ())
      {
        this->start_dealy_time_max_.set (start_dealy_time_max_traits::create (i, f, this));
        continue;
      }
    }

    if (!device_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"device_code",
        L"");
    }

    if (!modeling_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"modeling",
        L"");
    }

    if (!reactivate_interval_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"reactivate_interval",
        L"");
    }

    if (!activate_animation_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"activate_animation",
        L"");
    }

    if (!object_ambient_anim_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"object_ambient_anim",
        L"");
    }

    if (!cast_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"cast_time",
        L"");
    }

    if (!condition1_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"condition1_type",
        L"");
    }

    if (!condition1_param1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"condition1_param1",
        L"");
    }

    if (!condition1_param2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"condition1_param2",
        L"");
    }

    if (!condition2_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"condition2_type",
        L"");
    }

    if (!condition2_param1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"condition2_param1",
        L"");
    }

    if (!condition2_param2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"condition2_param2",
        L"");
    }

    if (!object_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"object_effect",
        L"");
    }

    if (!object_activated_anim_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"object_activated_anim",
        L"");
    }

    if (!object_activated_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"object_activated_effect",
        L"");
    }

    if (!activate_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"activate_type",
        L"");
    }

    if (!activate_param1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"activate_param1",
        L"");
    }

    if (!activate_param2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"activate_param2",
        L"");
    }

    if (!activate_param3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"activate_param3",
        L"");
    }

    if (!mount_datablock_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"mount_datablock_name",
        L"");
    }

    if (!start_dealy_time_min_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"start_dealy_time_min",
        L"");
    }

    if (!start_dealy_time_max_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"start_dealy_time_max",
        L"");
    }
  }

  device_t* device_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class device_t (*this, f, c);
  }

  device_t& device_t::
  operator= (const device_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->device_code_ = x.device_code_;
      this->modeling_ = x.modeling_;
      this->reactivate_interval_ = x.reactivate_interval_;
      this->activate_animation_ = x.activate_animation_;
      this->object_ambient_anim_ = x.object_ambient_anim_;
      this->cast_time_ = x.cast_time_;
      this->condition1_type_ = x.condition1_type_;
      this->condition1_param1_ = x.condition1_param1_;
      this->condition1_param2_ = x.condition1_param2_;
      this->condition2_type_ = x.condition2_type_;
      this->condition2_param1_ = x.condition2_param1_;
      this->condition2_param2_ = x.condition2_param2_;
      this->object_effect_ = x.object_effect_;
      this->object_activated_anim_ = x.object_activated_anim_;
      this->object_activated_effect_ = x.object_activated_effect_;
      this->activate_type_ = x.activate_type_;
      this->activate_param1_ = x.activate_param1_;
      this->activate_param2_ = x.activate_param2_;
      this->activate_param3_ = x.activate_param3_;
      this->mount_datablock_name_ = x.mount_datablock_name_;
      this->start_dealy_time_min_ = x.start_dealy_time_min_;
      this->start_dealy_time_max_ = x.start_dealy_time_max_;
    }

    return *this;
  }

  device_t::
  ~device_t ()
  {
  }

  // condition_type_t
  //

  condition_type_t::
  condition_type_t ()
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > ()
  {
  }

  condition_type_t::
  condition_type_t (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (_xsd_unsigned_byte_base)
  {
  }

  condition_type_t::
  condition_type_t (const condition_type_t& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (x, f, c)
  {
  }

  condition_type_t::
  condition_type_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (e, f, c)
  {
  }

  condition_type_t::
  condition_type_t (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (a, f, c)
  {
  }

  condition_type_t::
  condition_type_t (const ::std::wstring& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  condition_type_t* condition_type_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class condition_type_t (*this, f, c);
  }

  condition_type_t::
  ~condition_type_t ()
  {
  }

  // device_table
  //

  device_table::
  device_table ()
  : ::xml_schema::type (),
    device_template_ (this)
  {
  }

  device_table::
  device_table (const device_table& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    device_template_ (x.device_template_, f, this)
  {
  }

  device_table::
  device_table (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    device_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void device_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // device_template
      //
      if (n.name () == L"device_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< device_template_type > r (
          device_template_traits::create (i, f, this));

        this->device_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  device_table* device_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class device_table (*this, f, c);
  }

  device_table& device_table::
  operator= (const device_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->device_template_ = x.device_template_;
    }

    return *this;
  }

  device_table::
  ~device_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (const ::std::wstring& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::device_table > (
      ::gdt::device_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (const ::std::wstring& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::device_table > (
      ::gdt::device_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (const ::std::wstring& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::device_table > (
      ::gdt::device_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::device_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::device_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::device_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::device_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::device_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::device_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::device_table > (
      ::gdt::device_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::device_table > (
      ::gdt::device_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::device_table > (
      ::gdt::device_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::device_table > (
        ::gdt::device_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"device_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::device_table > r (
        ::xsd::cxx::tree::traits< ::gdt::device_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"device_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::device_table >
  device_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"device_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::device_table > r (
        ::xsd::cxx::tree::traits< ::gdt::device_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"device_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  device_table_ (::std::ostream& o,
                 const ::gdt::device_table& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::device_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  device_table_ (::std::ostream& o,
                 const ::gdt::device_table& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::device_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  device_table_ (::std::ostream& o,
                 const ::gdt::device_table& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::device_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  device_table_ (::xercesc::XMLFormatTarget& t,
                 const ::gdt::device_table& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::device_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  device_table_ (::xercesc::XMLFormatTarget& t,
                 const ::gdt::device_table& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::device_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  device_table_ (::xercesc::XMLFormatTarget& t,
                 const ::gdt::device_table& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::device_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  device_table_ (::xercesc::DOMDocument& d,
                 const ::gdt::device_table& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"device_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"device_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  device_table_ (const ::gdt::device_table& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"device_table",
        L"",
        m, f));

    ::gdt::device_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const device_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // device_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"device_code",
          e));

      a << i.device_code ();
    }

    // modeling
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"modeling",
          e));

      a << i.modeling ();
    }

    // reactivate_interval
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"reactivate_interval",
          e));

      a << i.reactivate_interval ();
    }

    // activate_animation
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"activate_animation",
          e));

      a << i.activate_animation ();
    }

    // object_ambient_anim
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"object_ambient_anim",
          e));

      a << i.object_ambient_anim ();
    }

    // cast_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"cast_time",
          e));

      a << i.cast_time ();
    }

    // condition1_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"condition1_type",
          e));

      a << i.condition1_type ();
    }

    // condition1_param1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"condition1_param1",
          e));

      a << i.condition1_param1 ();
    }

    // condition1_param2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"condition1_param2",
          e));

      a << i.condition1_param2 ();
    }

    // condition2_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"condition2_type",
          e));

      a << i.condition2_type ();
    }

    // condition2_param1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"condition2_param1",
          e));

      a << i.condition2_param1 ();
    }

    // condition2_param2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"condition2_param2",
          e));

      a << i.condition2_param2 ();
    }

    // object_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"object_effect",
          e));

      a << i.object_effect ();
    }

    // object_activated_anim
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"object_activated_anim",
          e));

      a << i.object_activated_anim ();
    }

    // object_activated_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"object_activated_effect",
          e));

      a << i.object_activated_effect ();
    }

    // activate_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"activate_type",
          e));

      a << i.activate_type ();
    }

    // activate_param1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"activate_param1",
          e));

      a << i.activate_param1 ();
    }

    // activate_param2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"activate_param2",
          e));

      a << i.activate_param2 ();
    }

    // activate_param3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"activate_param3",
          e));

      a << i.activate_param3 ();
    }

    // mount_datablock_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"mount_datablock_name",
          e));

      a << i.mount_datablock_name ();
    }

    // start_dealy_time_min
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"start_dealy_time_min",
          e));

      a << i.start_dealy_time_min ();
    }

    // start_dealy_time_max
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"start_dealy_time_max",
          e));

      a << i.start_dealy_time_max ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const condition_type_t& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const condition_type_t& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const condition_type_t& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const device_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // device_template
    //
    for (device_table::device_template_const_iterator
         b (i.device_template ().begin ()), n (i.device_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"device_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

