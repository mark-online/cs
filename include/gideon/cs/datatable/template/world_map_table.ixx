// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_WORLD_MAP_TABLE_IXX
#define GDT_WORLD_MAP_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // map_t
  // 

  inline
  const map_t::map_code_type& map_t::
  map_code () const
  {
    return this->map_code_.get ();
  }

  inline
  map_t::map_code_type& map_t::
  map_code ()
  {
    return this->map_code_.get ();
  }

  inline
  void map_t::
  map_code (const map_code_type& x)
  {
    this->map_code_.set (x);
  }

  inline
  void map_t::
  map_code (::std::unique_ptr< map_code_type > x)
  {
    this->map_code_.set (std::move (x));
  }

  inline
  const map_t::ko_name_type& map_t::
  ko_name () const
  {
    return this->ko_name_.get ();
  }

  inline
  map_t::ko_name_type& map_t::
  ko_name ()
  {
    return this->ko_name_.get ();
  }

  inline
  void map_t::
  ko_name (const ko_name_type& x)
  {
    this->ko_name_.set (x);
  }

  inline
  void map_t::
  ko_name (::std::unique_ptr< ko_name_type > x)
  {
    this->ko_name_.set (std::move (x));
  }

  inline
  const map_t::en_name_type& map_t::
  en_name () const
  {
    return this->en_name_.get ();
  }

  inline
  map_t::en_name_type& map_t::
  en_name ()
  {
    return this->en_name_.get ();
  }

  inline
  void map_t::
  en_name (const en_name_type& x)
  {
    this->en_name_.set (x);
  }

  inline
  void map_t::
  en_name (::std::unique_ptr< en_name_type > x)
  {
    this->en_name_.set (std::move (x));
  }

  inline
  const map_t::x_sector_count_type& map_t::
  x_sector_count () const
  {
    return this->x_sector_count_.get ();
  }

  inline
  map_t::x_sector_count_type& map_t::
  x_sector_count ()
  {
    return this->x_sector_count_.get ();
  }

  inline
  void map_t::
  x_sector_count (const x_sector_count_type& x)
  {
    this->x_sector_count_.set (x);
  }

  inline
  const map_t::y_sector_count_type& map_t::
  y_sector_count () const
  {
    return this->y_sector_count_.get ();
  }

  inline
  map_t::y_sector_count_type& map_t::
  y_sector_count ()
  {
    return this->y_sector_count_.get ();
  }

  inline
  void map_t::
  y_sector_count (const y_sector_count_type& x)
  {
    this->y_sector_count_.set (x);
  }

  inline
  const map_t::z_sector_count_type& map_t::
  z_sector_count () const
  {
    return this->z_sector_count_.get ();
  }

  inline
  map_t::z_sector_count_type& map_t::
  z_sector_count ()
  {
    return this->z_sector_count_.get ();
  }

  inline
  void map_t::
  z_sector_count (const z_sector_count_type& x)
  {
    this->z_sector_count_.set (x);
  }

  inline
  const map_t::sector_length_type& map_t::
  sector_length () const
  {
    return this->sector_length_.get ();
  }

  inline
  map_t::sector_length_type& map_t::
  sector_length ()
  {
    return this->sector_length_.get ();
  }

  inline
  void map_t::
  sector_length (const sector_length_type& x)
  {
    this->sector_length_.set (x);
  }

  inline
  const map_t::aggressive_level_diff_type& map_t::
  aggressive_level_diff () const
  {
    return this->aggressive_level_diff_.get ();
  }

  inline
  map_t::aggressive_level_diff_type& map_t::
  aggressive_level_diff ()
  {
    return this->aggressive_level_diff_.get ();
  }

  inline
  void map_t::
  aggressive_level_diff (const aggressive_level_diff_type& x)
  {
    this->aggressive_level_diff_.set (x);
  }

  inline
  const map_t::world_type_type& map_t::
  world_type () const
  {
    return this->world_type_.get ();
  }

  inline
  map_t::world_type_type& map_t::
  world_type ()
  {
    return this->world_type_.get ();
  }

  inline
  void map_t::
  world_type (const world_type_type& x)
  {
    this->world_type_.set (x);
  }


  // world_maps
  // 

  inline
  const world_maps::map_template_sequence& world_maps::
  map_template () const
  {
    return this->map_template_;
  }

  inline
  world_maps::map_template_sequence& world_maps::
  map_template ()
  {
    return this->map_template_;
  }

  inline
  void world_maps::
  map_template (const map_template_sequence& s)
  {
    this->map_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_WORLD_MAP_TABLE_IXX
