// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "event_trigger_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // evt_t
  //

  evt_t::
  evt_t ()
  : ::xml_schema::type (),
    map_code_ (this),
    entity_code_ (this),
    event_type_ (this),
    event_phase_mask_ (this),
    event_chance_ (this),
    event_flags_ (this),
    event_param1_ (this),
    event_param2_ (this),
    event_param3_ (this),
    event_param4_ (this),
    action1_type_ (this),
    action1_param1_ (this),
    action1_param2_ (this),
    action1_param3_ (this),
    action1_param4_ (this),
    action1_param5_ (this),
    action2_type_ (this),
    action2_param1_ (this),
    action2_param2_ (this),
    action2_param3_ (this),
    action2_param4_ (this),
    action2_param5_ (this),
    action3_type_ (this),
    action3_param1_ (this),
    action3_param2_ (this),
    action3_param3_ (this),
    action3_param4_ (this),
    action3_param5_ (this)
  {
  }

  evt_t::
  evt_t (const map_code_type& map_code,
         const entity_code_type& entity_code,
         const event_type_type& event_type,
         const event_phase_mask_type& event_phase_mask,
         const event_chance_type& event_chance,
         const event_flags_type& event_flags,
         const event_param1_type& event_param1,
         const event_param2_type& event_param2,
         const event_param3_type& event_param3,
         const event_param4_type& event_param4,
         const action1_type_type& action1_type,
         const action1_param1_type& action1_param1,
         const action1_param2_type& action1_param2,
         const action1_param3_type& action1_param3,
         const action1_param4_type& action1_param4,
         const action1_param5_type& action1_param5,
         const action2_type_type& action2_type,
         const action2_param1_type& action2_param1,
         const action2_param2_type& action2_param2,
         const action2_param3_type& action2_param3,
         const action2_param4_type& action2_param4,
         const action2_param5_type& action2_param5,
         const action3_type_type& action3_type,
         const action3_param1_type& action3_param1,
         const action3_param2_type& action3_param2,
         const action3_param3_type& action3_param3,
         const action3_param4_type& action3_param4,
         const action3_param5_type& action3_param5)
  : ::xml_schema::type (),
    map_code_ (map_code, this),
    entity_code_ (entity_code, this),
    event_type_ (event_type, this),
    event_phase_mask_ (event_phase_mask, this),
    event_chance_ (event_chance, this),
    event_flags_ (event_flags, this),
    event_param1_ (event_param1, this),
    event_param2_ (event_param2, this),
    event_param3_ (event_param3, this),
    event_param4_ (event_param4, this),
    action1_type_ (action1_type, this),
    action1_param1_ (action1_param1, this),
    action1_param2_ (action1_param2, this),
    action1_param3_ (action1_param3, this),
    action1_param4_ (action1_param4, this),
    action1_param5_ (action1_param5, this),
    action2_type_ (action2_type, this),
    action2_param1_ (action2_param1, this),
    action2_param2_ (action2_param2, this),
    action2_param3_ (action2_param3, this),
    action2_param4_ (action2_param4, this),
    action2_param5_ (action2_param5, this),
    action3_type_ (action3_type, this),
    action3_param1_ (action3_param1, this),
    action3_param2_ (action3_param2, this),
    action3_param3_ (action3_param3, this),
    action3_param4_ (action3_param4, this),
    action3_param5_ (action3_param5, this)
  {
  }

  evt_t::
  evt_t (const evt_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    map_code_ (x.map_code_, f, this),
    entity_code_ (x.entity_code_, f, this),
    event_type_ (x.event_type_, f, this),
    event_phase_mask_ (x.event_phase_mask_, f, this),
    event_chance_ (x.event_chance_, f, this),
    event_flags_ (x.event_flags_, f, this),
    event_param1_ (x.event_param1_, f, this),
    event_param2_ (x.event_param2_, f, this),
    event_param3_ (x.event_param3_, f, this),
    event_param4_ (x.event_param4_, f, this),
    action1_type_ (x.action1_type_, f, this),
    action1_param1_ (x.action1_param1_, f, this),
    action1_param2_ (x.action1_param2_, f, this),
    action1_param3_ (x.action1_param3_, f, this),
    action1_param4_ (x.action1_param4_, f, this),
    action1_param5_ (x.action1_param5_, f, this),
    action2_type_ (x.action2_type_, f, this),
    action2_param1_ (x.action2_param1_, f, this),
    action2_param2_ (x.action2_param2_, f, this),
    action2_param3_ (x.action2_param3_, f, this),
    action2_param4_ (x.action2_param4_, f, this),
    action2_param5_ (x.action2_param5_, f, this),
    action3_type_ (x.action3_type_, f, this),
    action3_param1_ (x.action3_param1_, f, this),
    action3_param2_ (x.action3_param2_, f, this),
    action3_param3_ (x.action3_param3_, f, this),
    action3_param4_ (x.action3_param4_, f, this),
    action3_param5_ (x.action3_param5_, f, this)
  {
  }

  evt_t::
  evt_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    map_code_ (this),
    entity_code_ (this),
    event_type_ (this),
    event_phase_mask_ (this),
    event_chance_ (this),
    event_flags_ (this),
    event_param1_ (this),
    event_param2_ (this),
    event_param3_ (this),
    event_param4_ (this),
    action1_type_ (this),
    action1_param1_ (this),
    action1_param2_ (this),
    action1_param3_ (this),
    action1_param4_ (this),
    action1_param5_ (this),
    action2_type_ (this),
    action2_param1_ (this),
    action2_param2_ (this),
    action2_param3_ (this),
    action2_param4_ (this),
    action2_param5_ (this),
    action3_type_ (this),
    action3_param1_ (this),
    action3_param2_ (this),
    action3_param3_ (this),
    action3_param4_ (this),
    action3_param5_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void evt_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"map_code" && n.namespace_ ().empty ())
      {
        this->map_code_.set (map_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"entity_code" && n.namespace_ ().empty ())
      {
        this->entity_code_.set (entity_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"event_type" && n.namespace_ ().empty ())
      {
        this->event_type_.set (event_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"event_phase_mask" && n.namespace_ ().empty ())
      {
        this->event_phase_mask_.set (event_phase_mask_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"event_chance" && n.namespace_ ().empty ())
      {
        this->event_chance_.set (event_chance_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"event_flags" && n.namespace_ ().empty ())
      {
        this->event_flags_.set (event_flags_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"event_param1" && n.namespace_ ().empty ())
      {
        this->event_param1_.set (event_param1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"event_param2" && n.namespace_ ().empty ())
      {
        this->event_param2_.set (event_param2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"event_param3" && n.namespace_ ().empty ())
      {
        this->event_param3_.set (event_param3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"event_param4" && n.namespace_ ().empty ())
      {
        this->event_param4_.set (event_param4_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action1_type" && n.namespace_ ().empty ())
      {
        this->action1_type_.set (action1_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action1_param1" && n.namespace_ ().empty ())
      {
        this->action1_param1_.set (action1_param1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action1_param2" && n.namespace_ ().empty ())
      {
        this->action1_param2_.set (action1_param2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action1_param3" && n.namespace_ ().empty ())
      {
        this->action1_param3_.set (action1_param3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action1_param4" && n.namespace_ ().empty ())
      {
        this->action1_param4_.set (action1_param4_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action1_param5" && n.namespace_ ().empty ())
      {
        this->action1_param5_.set (action1_param5_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action2_type" && n.namespace_ ().empty ())
      {
        this->action2_type_.set (action2_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action2_param1" && n.namespace_ ().empty ())
      {
        this->action2_param1_.set (action2_param1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action2_param2" && n.namespace_ ().empty ())
      {
        this->action2_param2_.set (action2_param2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action2_param3" && n.namespace_ ().empty ())
      {
        this->action2_param3_.set (action2_param3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action2_param4" && n.namespace_ ().empty ())
      {
        this->action2_param4_.set (action2_param4_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action2_param5" && n.namespace_ ().empty ())
      {
        this->action2_param5_.set (action2_param5_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action3_type" && n.namespace_ ().empty ())
      {
        this->action3_type_.set (action3_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action3_param1" && n.namespace_ ().empty ())
      {
        this->action3_param1_.set (action3_param1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action3_param2" && n.namespace_ ().empty ())
      {
        this->action3_param2_.set (action3_param2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action3_param3" && n.namespace_ ().empty ())
      {
        this->action3_param3_.set (action3_param3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action3_param4" && n.namespace_ ().empty ())
      {
        this->action3_param4_.set (action3_param4_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"action3_param5" && n.namespace_ ().empty ())
      {
        this->action3_param5_.set (action3_param5_traits::create (i, f, this));
        continue;
      }
    }

    if (!map_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"map_code",
        L"");
    }

    if (!entity_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"entity_code",
        L"");
    }

    if (!event_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"event_type",
        L"");
    }

    if (!event_phase_mask_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"event_phase_mask",
        L"");
    }

    if (!event_chance_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"event_chance",
        L"");
    }

    if (!event_flags_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"event_flags",
        L"");
    }

    if (!event_param1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"event_param1",
        L"");
    }

    if (!event_param2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"event_param2",
        L"");
    }

    if (!event_param3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"event_param3",
        L"");
    }

    if (!event_param4_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"event_param4",
        L"");
    }

    if (!action1_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action1_type",
        L"");
    }

    if (!action1_param1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action1_param1",
        L"");
    }

    if (!action1_param2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action1_param2",
        L"");
    }

    if (!action1_param3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action1_param3",
        L"");
    }

    if (!action1_param4_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action1_param4",
        L"");
    }

    if (!action1_param5_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action1_param5",
        L"");
    }

    if (!action2_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action2_type",
        L"");
    }

    if (!action2_param1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action2_param1",
        L"");
    }

    if (!action2_param2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action2_param2",
        L"");
    }

    if (!action2_param3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action2_param3",
        L"");
    }

    if (!action2_param4_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action2_param4",
        L"");
    }

    if (!action2_param5_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action2_param5",
        L"");
    }

    if (!action3_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action3_type",
        L"");
    }

    if (!action3_param1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action3_param1",
        L"");
    }

    if (!action3_param2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action3_param2",
        L"");
    }

    if (!action3_param3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action3_param3",
        L"");
    }

    if (!action3_param4_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action3_param4",
        L"");
    }

    if (!action3_param5_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"action3_param5",
        L"");
    }
  }

  evt_t* evt_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class evt_t (*this, f, c);
  }

  evt_t& evt_t::
  operator= (const evt_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->map_code_ = x.map_code_;
      this->entity_code_ = x.entity_code_;
      this->event_type_ = x.event_type_;
      this->event_phase_mask_ = x.event_phase_mask_;
      this->event_chance_ = x.event_chance_;
      this->event_flags_ = x.event_flags_;
      this->event_param1_ = x.event_param1_;
      this->event_param2_ = x.event_param2_;
      this->event_param3_ = x.event_param3_;
      this->event_param4_ = x.event_param4_;
      this->action1_type_ = x.action1_type_;
      this->action1_param1_ = x.action1_param1_;
      this->action1_param2_ = x.action1_param2_;
      this->action1_param3_ = x.action1_param3_;
      this->action1_param4_ = x.action1_param4_;
      this->action1_param5_ = x.action1_param5_;
      this->action2_type_ = x.action2_type_;
      this->action2_param1_ = x.action2_param1_;
      this->action2_param2_ = x.action2_param2_;
      this->action2_param3_ = x.action2_param3_;
      this->action2_param4_ = x.action2_param4_;
      this->action2_param5_ = x.action2_param5_;
      this->action3_type_ = x.action3_type_;
      this->action3_param1_ = x.action3_param1_;
      this->action3_param2_ = x.action3_param2_;
      this->action3_param3_ = x.action3_param3_;
      this->action3_param4_ = x.action3_param4_;
      this->action3_param5_ = x.action3_param5_;
    }

    return *this;
  }

  evt_t::
  ~evt_t ()
  {
  }

  // entity_code_t
  //

  entity_code_t::
  entity_code_t ()
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, wchar_t, ::xml_schema::simple_type > ()
  {
  }

  entity_code_t::
  entity_code_t (const ::xml_schema::unsigned_int& _xsd_unsigned_int_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, wchar_t, ::xml_schema::simple_type > (_xsd_unsigned_int_base)
  {
  }

  entity_code_t::
  entity_code_t (const entity_code_t& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, wchar_t, ::xml_schema::simple_type > (x, f, c)
  {
  }

  entity_code_t::
  entity_code_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, wchar_t, ::xml_schema::simple_type > (e, f, c)
  {
  }

  entity_code_t::
  entity_code_t (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, wchar_t, ::xml_schema::simple_type > (a, f, c)
  {
  }

  entity_code_t::
  entity_code_t (const ::std::wstring& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  entity_code_t* entity_code_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class entity_code_t (*this, f, c);
  }

  entity_code_t::
  ~entity_code_t ()
  {
  }

  // event_type_t
  //

  event_type_t::
  event_type_t ()
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type > ()
  {
  }

  event_type_t::
  event_type_t (const ::xml_schema::unsigned_short& _xsd_unsigned_short_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type > (_xsd_unsigned_short_base)
  {
  }

  event_type_t::
  event_type_t (const event_type_t& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type > (x, f, c)
  {
  }

  event_type_t::
  event_type_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type > (e, f, c)
  {
  }

  event_type_t::
  event_type_t (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type > (a, f, c)
  {
  }

  event_type_t::
  event_type_t (const ::std::wstring& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  event_type_t* event_type_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class event_type_t (*this, f, c);
  }

  event_type_t::
  ~event_type_t ()
  {
  }

  // action_type_t
  //

  action_type_t::
  action_type_t ()
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type > ()
  {
  }

  action_type_t::
  action_type_t (const ::xml_schema::unsigned_short& _xsd_unsigned_short_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type > (_xsd_unsigned_short_base)
  {
  }

  action_type_t::
  action_type_t (const action_type_t& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type > (x, f, c)
  {
  }

  action_type_t::
  action_type_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type > (e, f, c)
  {
  }

  action_type_t::
  action_type_t (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type > (a, f, c)
  {
  }

  action_type_t::
  action_type_t (const ::std::wstring& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  action_type_t* action_type_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class action_type_t (*this, f, c);
  }

  action_type_t::
  ~action_type_t ()
  {
  }

  // param_t
  //

  param_t::
  param_t ()
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > ()
  {
  }

  param_t::
  param_t (const ::xml_schema::integer& _xsd_integer_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (_xsd_integer_base)
  {
  }

  param_t::
  param_t (const param_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (x, f, c)
  {
  }

  param_t::
  param_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (e, f, c)
  {
  }

  param_t::
  param_t (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (a, f, c)
  {
  }

  param_t::
  param_t (const ::std::wstring& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  param_t* param_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class param_t (*this, f, c);
  }

  param_t::
  ~param_t ()
  {
  }

  // evt_table
  //

  evt_table::
  evt_table ()
  : ::xml_schema::type (),
    evt_template_ (this)
  {
  }

  evt_table::
  evt_table (const evt_table& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    evt_template_ (x.evt_template_, f, this)
  {
  }

  evt_table::
  evt_table (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    evt_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void evt_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // evt_template
      //
      if (n.name () == L"evt_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< evt_template_type > r (
          evt_template_traits::create (i, f, this));

        this->evt_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  evt_table* evt_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class evt_table (*this, f, c);
  }

  evt_table& evt_table::
  operator= (const evt_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->evt_template_ = x.evt_template_;
    }

    return *this;
  }

  evt_table::
  ~evt_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (const ::std::wstring& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::evt_table > (
      ::gdt::evt_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (const ::std::wstring& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::evt_table > (
      ::gdt::evt_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (const ::std::wstring& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::evt_table > (
      ::gdt::evt_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::evt_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::evt_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::evt_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::evt_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::evt_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (::std::istream& is,
              const ::std::wstring& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::evt_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::evt_table > (
      ::gdt::evt_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::evt_table > (
      ::gdt::evt_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::evt_table > (
      ::gdt::evt_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::evt_table > (
        ::gdt::evt_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"evt_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::evt_table > r (
        ::xsd::cxx::tree::traits< ::gdt::evt_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"evt_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::evt_table >
  evt_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"evt_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::evt_table > r (
        ::xsd::cxx::tree::traits< ::gdt::evt_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"evt_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  evt_table_ (::std::ostream& o,
              const ::gdt::evt_table& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::evt_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  evt_table_ (::std::ostream& o,
              const ::gdt::evt_table& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::evt_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  evt_table_ (::std::ostream& o,
              const ::gdt::evt_table& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::evt_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  evt_table_ (::xercesc::XMLFormatTarget& t,
              const ::gdt::evt_table& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::evt_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  evt_table_ (::xercesc::XMLFormatTarget& t,
              const ::gdt::evt_table& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::evt_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  evt_table_ (::xercesc::XMLFormatTarget& t,
              const ::gdt::evt_table& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::evt_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  evt_table_ (::xercesc::DOMDocument& d,
              const ::gdt::evt_table& s,
              ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"evt_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"evt_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  evt_table_ (const ::gdt::evt_table& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"evt_table",
        L"",
        m, f));

    ::gdt::evt_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const evt_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // map_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"map_code",
          e));

      a << i.map_code ();
    }

    // entity_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"entity_code",
          e));

      a << i.entity_code ();
    }

    // event_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"event_type",
          e));

      a << i.event_type ();
    }

    // event_phase_mask
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"event_phase_mask",
          e));

      a << i.event_phase_mask ();
    }

    // event_chance
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"event_chance",
          e));

      a << i.event_chance ();
    }

    // event_flags
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"event_flags",
          e));

      a << i.event_flags ();
    }

    // event_param1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"event_param1",
          e));

      a << i.event_param1 ();
    }

    // event_param2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"event_param2",
          e));

      a << i.event_param2 ();
    }

    // event_param3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"event_param3",
          e));

      a << i.event_param3 ();
    }

    // event_param4
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"event_param4",
          e));

      a << i.event_param4 ();
    }

    // action1_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action1_type",
          e));

      a << i.action1_type ();
    }

    // action1_param1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action1_param1",
          e));

      a << i.action1_param1 ();
    }

    // action1_param2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action1_param2",
          e));

      a << i.action1_param2 ();
    }

    // action1_param3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action1_param3",
          e));

      a << i.action1_param3 ();
    }

    // action1_param4
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action1_param4",
          e));

      a << i.action1_param4 ();
    }

    // action1_param5
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action1_param5",
          e));

      a << i.action1_param5 ();
    }

    // action2_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action2_type",
          e));

      a << i.action2_type ();
    }

    // action2_param1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action2_param1",
          e));

      a << i.action2_param1 ();
    }

    // action2_param2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action2_param2",
          e));

      a << i.action2_param2 ();
    }

    // action2_param3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action2_param3",
          e));

      a << i.action2_param3 ();
    }

    // action2_param4
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action2_param4",
          e));

      a << i.action2_param4 ();
    }

    // action2_param5
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action2_param5",
          e));

      a << i.action2_param5 ();
    }

    // action3_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action3_type",
          e));

      a << i.action3_type ();
    }

    // action3_param1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action3_param1",
          e));

      a << i.action3_param1 ();
    }

    // action3_param2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action3_param2",
          e));

      a << i.action3_param2 ();
    }

    // action3_param3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action3_param3",
          e));

      a << i.action3_param3 ();
    }

    // action3_param4
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action3_param4",
          e));

      a << i.action3_param4 ();
    }

    // action3_param5
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"action3_param5",
          e));

      a << i.action3_param5 ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const entity_code_t& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const entity_code_t& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const entity_code_t& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_int, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const event_type_t& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const event_type_t& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const event_type_t& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const action_type_t& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const action_type_t& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const action_type_t& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_short, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const param_t& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const param_t& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const param_t& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const evt_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // evt_template
    //
    for (evt_table::evt_template_const_iterator
         b (i.evt_template ().begin ()), n (i.evt_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"evt_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

