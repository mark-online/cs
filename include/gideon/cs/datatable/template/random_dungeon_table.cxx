// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "random_dungeon_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // random_dungeon_t
  //

  random_dungeon_t::
  random_dungeon_t ()
  : ::xml_schema::type (),
    map_code_ (this),
    random_dungeon_type_ (this),
    column_count_ (this),
    row_count_ (this),
    dck_length_ (this),
    dck_steps_ (this),
    sector_length_ (this),
    datablock_name_ (this),
    object_effect_ (this),
    light_rgb_value_ (this),
    light_value_ (this),
    light_range_value_ (this),
    base_folder_ (this),
    base_z_ (this),
    floor_count_ (this),
    wall_count_ (this),
    corner_count_ (this),
    corridor_count_ (this),
    corridor_corner_count_ (this),
    corridor_cross_count_ (this),
    corridor_t_cross_count_ (this),
    corridor_end_count_ (this)
  {
  }

  random_dungeon_t::
  random_dungeon_t (const map_code_type& map_code,
                    const random_dungeon_type_type& random_dungeon_type,
                    const column_count_type& column_count,
                    const row_count_type& row_count,
                    const dck_length_type& dck_length,
                    const dck_steps_type& dck_steps,
                    const sector_length_type& sector_length,
                    const datablock_name_type& datablock_name,
                    const object_effect_type& object_effect,
                    const light_rgb_value_type& light_rgb_value,
                    const light_value_type& light_value,
                    const light_range_value_type& light_range_value,
                    const base_folder_type& base_folder,
                    const base_z_type& base_z,
                    const floor_count_type& floor_count,
                    const wall_count_type& wall_count,
                    const corner_count_type& corner_count,
                    const corridor_count_type& corridor_count,
                    const corridor_corner_count_type& corridor_corner_count,
                    const corridor_cross_count_type& corridor_cross_count,
                    const corridor_t_cross_count_type& corridor_t_cross_count,
                    const corridor_end_count_type& corridor_end_count)
  : ::xml_schema::type (),
    map_code_ (map_code, this),
    random_dungeon_type_ (random_dungeon_type, this),
    column_count_ (column_count, this),
    row_count_ (row_count, this),
    dck_length_ (dck_length, this),
    dck_steps_ (dck_steps, this),
    sector_length_ (sector_length, this),
    datablock_name_ (datablock_name, this),
    object_effect_ (object_effect, this),
    light_rgb_value_ (light_rgb_value, this),
    light_value_ (light_value, this),
    light_range_value_ (light_range_value, this),
    base_folder_ (base_folder, this),
    base_z_ (base_z, this),
    floor_count_ (floor_count, this),
    wall_count_ (wall_count, this),
    corner_count_ (corner_count, this),
    corridor_count_ (corridor_count, this),
    corridor_corner_count_ (corridor_corner_count, this),
    corridor_cross_count_ (corridor_cross_count, this),
    corridor_t_cross_count_ (corridor_t_cross_count, this),
    corridor_end_count_ (corridor_end_count, this)
  {
  }

  random_dungeon_t::
  random_dungeon_t (const random_dungeon_t& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    map_code_ (x.map_code_, f, this),
    random_dungeon_type_ (x.random_dungeon_type_, f, this),
    column_count_ (x.column_count_, f, this),
    row_count_ (x.row_count_, f, this),
    dck_length_ (x.dck_length_, f, this),
    dck_steps_ (x.dck_steps_, f, this),
    sector_length_ (x.sector_length_, f, this),
    datablock_name_ (x.datablock_name_, f, this),
    object_effect_ (x.object_effect_, f, this),
    light_rgb_value_ (x.light_rgb_value_, f, this),
    light_value_ (x.light_value_, f, this),
    light_range_value_ (x.light_range_value_, f, this),
    base_folder_ (x.base_folder_, f, this),
    base_z_ (x.base_z_, f, this),
    floor_count_ (x.floor_count_, f, this),
    wall_count_ (x.wall_count_, f, this),
    corner_count_ (x.corner_count_, f, this),
    corridor_count_ (x.corridor_count_, f, this),
    corridor_corner_count_ (x.corridor_corner_count_, f, this),
    corridor_cross_count_ (x.corridor_cross_count_, f, this),
    corridor_t_cross_count_ (x.corridor_t_cross_count_, f, this),
    corridor_end_count_ (x.corridor_end_count_, f, this)
  {
  }

  random_dungeon_t::
  random_dungeon_t (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    map_code_ (this),
    random_dungeon_type_ (this),
    column_count_ (this),
    row_count_ (this),
    dck_length_ (this),
    dck_steps_ (this),
    sector_length_ (this),
    datablock_name_ (this),
    object_effect_ (this),
    light_rgb_value_ (this),
    light_value_ (this),
    light_range_value_ (this),
    base_folder_ (this),
    base_z_ (this),
    floor_count_ (this),
    wall_count_ (this),
    corner_count_ (this),
    corridor_count_ (this),
    corridor_corner_count_ (this),
    corridor_cross_count_ (this),
    corridor_t_cross_count_ (this),
    corridor_end_count_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void random_dungeon_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"map_code" && n.namespace_ ().empty ())
      {
        this->map_code_.set (map_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"random_dungeon_type" && n.namespace_ ().empty ())
      {
        this->random_dungeon_type_.set (random_dungeon_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"column_count" && n.namespace_ ().empty ())
      {
        this->column_count_.set (column_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"row_count" && n.namespace_ ().empty ())
      {
        this->row_count_.set (row_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"dck_length" && n.namespace_ ().empty ())
      {
        this->dck_length_.set (dck_length_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"dck_steps" && n.namespace_ ().empty ())
      {
        this->dck_steps_.set (dck_steps_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sector_length" && n.namespace_ ().empty ())
      {
        this->sector_length_.set (sector_length_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"datablock_name" && n.namespace_ ().empty ())
      {
        this->datablock_name_.set (datablock_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"object_effect" && n.namespace_ ().empty ())
      {
        this->object_effect_.set (object_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"light_rgb_value" && n.namespace_ ().empty ())
      {
        this->light_rgb_value_.set (light_rgb_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"light_value" && n.namespace_ ().empty ())
      {
        this->light_value_.set (light_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"light_range_value" && n.namespace_ ().empty ())
      {
        this->light_range_value_.set (light_range_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"base_folder" && n.namespace_ ().empty ())
      {
        this->base_folder_.set (base_folder_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"base_z" && n.namespace_ ().empty ())
      {
        this->base_z_.set (base_z_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"floor_count" && n.namespace_ ().empty ())
      {
        this->floor_count_.set (floor_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"wall_count" && n.namespace_ ().empty ())
      {
        this->wall_count_.set (wall_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"corner_count" && n.namespace_ ().empty ())
      {
        this->corner_count_.set (corner_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"corridor_count" && n.namespace_ ().empty ())
      {
        this->corridor_count_.set (corridor_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"corridor_corner_count" && n.namespace_ ().empty ())
      {
        this->corridor_corner_count_.set (corridor_corner_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"corridor_cross_count" && n.namespace_ ().empty ())
      {
        this->corridor_cross_count_.set (corridor_cross_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"corridor_t_cross_count" && n.namespace_ ().empty ())
      {
        this->corridor_t_cross_count_.set (corridor_t_cross_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"corridor_end_count" && n.namespace_ ().empty ())
      {
        this->corridor_end_count_.set (corridor_end_count_traits::create (i, f, this));
        continue;
      }
    }

    if (!map_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"map_code",
        L"");
    }

    if (!random_dungeon_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"random_dungeon_type",
        L"");
    }

    if (!column_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"column_count",
        L"");
    }

    if (!row_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"row_count",
        L"");
    }

    if (!dck_length_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"dck_length",
        L"");
    }

    if (!dck_steps_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"dck_steps",
        L"");
    }

    if (!sector_length_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sector_length",
        L"");
    }

    if (!datablock_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"datablock_name",
        L"");
    }

    if (!object_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"object_effect",
        L"");
    }

    if (!light_rgb_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"light_rgb_value",
        L"");
    }

    if (!light_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"light_value",
        L"");
    }

    if (!light_range_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"light_range_value",
        L"");
    }

    if (!base_folder_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"base_folder",
        L"");
    }

    if (!base_z_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"base_z",
        L"");
    }

    if (!floor_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"floor_count",
        L"");
    }

    if (!wall_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"wall_count",
        L"");
    }

    if (!corner_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"corner_count",
        L"");
    }

    if (!corridor_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"corridor_count",
        L"");
    }

    if (!corridor_corner_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"corridor_corner_count",
        L"");
    }

    if (!corridor_cross_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"corridor_cross_count",
        L"");
    }

    if (!corridor_t_cross_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"corridor_t_cross_count",
        L"");
    }

    if (!corridor_end_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"corridor_end_count",
        L"");
    }
  }

  random_dungeon_t* random_dungeon_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class random_dungeon_t (*this, f, c);
  }

  random_dungeon_t& random_dungeon_t::
  operator= (const random_dungeon_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->map_code_ = x.map_code_;
      this->random_dungeon_type_ = x.random_dungeon_type_;
      this->column_count_ = x.column_count_;
      this->row_count_ = x.row_count_;
      this->dck_length_ = x.dck_length_;
      this->dck_steps_ = x.dck_steps_;
      this->sector_length_ = x.sector_length_;
      this->datablock_name_ = x.datablock_name_;
      this->object_effect_ = x.object_effect_;
      this->light_rgb_value_ = x.light_rgb_value_;
      this->light_value_ = x.light_value_;
      this->light_range_value_ = x.light_range_value_;
      this->base_folder_ = x.base_folder_;
      this->base_z_ = x.base_z_;
      this->floor_count_ = x.floor_count_;
      this->wall_count_ = x.wall_count_;
      this->corner_count_ = x.corner_count_;
      this->corridor_count_ = x.corridor_count_;
      this->corridor_corner_count_ = x.corridor_corner_count_;
      this->corridor_cross_count_ = x.corridor_cross_count_;
      this->corridor_t_cross_count_ = x.corridor_t_cross_count_;
      this->corridor_end_count_ = x.corridor_end_count_;
    }

    return *this;
  }

  random_dungeon_t::
  ~random_dungeon_t ()
  {
  }

  // random_dungeon_table
  //

  random_dungeon_table::
  random_dungeon_table ()
  : ::xml_schema::type (),
    random_dungeon_template_ (this)
  {
  }

  random_dungeon_table::
  random_dungeon_table (const random_dungeon_table& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    random_dungeon_template_ (x.random_dungeon_template_, f, this)
  {
  }

  random_dungeon_table::
  random_dungeon_table (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    random_dungeon_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void random_dungeon_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // random_dungeon_template
      //
      if (n.name () == L"random_dungeon_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< random_dungeon_template_type > r (
          random_dungeon_template_traits::create (i, f, this));

        this->random_dungeon_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  random_dungeon_table* random_dungeon_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class random_dungeon_table (*this, f, c);
  }

  random_dungeon_table& random_dungeon_table::
  operator= (const random_dungeon_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->random_dungeon_template_ = x.random_dungeon_template_;
    }

    return *this;
  }

  random_dungeon_table::
  ~random_dungeon_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (const ::std::wstring& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::random_dungeon_table > (
      ::gdt::random_dungeon_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (const ::std::wstring& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::random_dungeon_table > (
      ::gdt::random_dungeon_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (const ::std::wstring& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::random_dungeon_table > (
      ::gdt::random_dungeon_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::random_dungeon_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::random_dungeon_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::random_dungeon_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (::std::istream& is,
                         const ::std::wstring& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::random_dungeon_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (::std::istream& is,
                         const ::std::wstring& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::random_dungeon_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (::std::istream& is,
                         const ::std::wstring& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::random_dungeon_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::random_dungeon_table > (
      ::gdt::random_dungeon_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::random_dungeon_table > (
      ::gdt::random_dungeon_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::random_dungeon_table > (
      ::gdt::random_dungeon_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::random_dungeon_table > (
        ::gdt::random_dungeon_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"random_dungeon_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::random_dungeon_table > r (
        ::xsd::cxx::tree::traits< ::gdt::random_dungeon_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"random_dungeon_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::random_dungeon_table >
  random_dungeon_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"random_dungeon_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::random_dungeon_table > r (
        ::xsd::cxx::tree::traits< ::gdt::random_dungeon_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"random_dungeon_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  random_dungeon_table_ (::std::ostream& o,
                         const ::gdt::random_dungeon_table& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::random_dungeon_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  random_dungeon_table_ (::std::ostream& o,
                         const ::gdt::random_dungeon_table& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::random_dungeon_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  random_dungeon_table_ (::std::ostream& o,
                         const ::gdt::random_dungeon_table& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::random_dungeon_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  random_dungeon_table_ (::xercesc::XMLFormatTarget& t,
                         const ::gdt::random_dungeon_table& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::random_dungeon_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  random_dungeon_table_ (::xercesc::XMLFormatTarget& t,
                         const ::gdt::random_dungeon_table& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::random_dungeon_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  random_dungeon_table_ (::xercesc::XMLFormatTarget& t,
                         const ::gdt::random_dungeon_table& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::random_dungeon_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  random_dungeon_table_ (::xercesc::DOMDocument& d,
                         const ::gdt::random_dungeon_table& s,
                         ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"random_dungeon_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"random_dungeon_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  random_dungeon_table_ (const ::gdt::random_dungeon_table& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"random_dungeon_table",
        L"",
        m, f));

    ::gdt::random_dungeon_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const random_dungeon_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // map_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"map_code",
          e));

      a << i.map_code ();
    }

    // random_dungeon_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"random_dungeon_type",
          e));

      a << i.random_dungeon_type ();
    }

    // column_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"column_count",
          e));

      a << i.column_count ();
    }

    // row_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"row_count",
          e));

      a << i.row_count ();
    }

    // dck_length
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"dck_length",
          e));

      a << i.dck_length ();
    }

    // dck_steps
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"dck_steps",
          e));

      a << i.dck_steps ();
    }

    // sector_length
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sector_length",
          e));

      a << i.sector_length ();
    }

    // datablock_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"datablock_name",
          e));

      a << i.datablock_name ();
    }

    // object_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"object_effect",
          e));

      a << i.object_effect ();
    }

    // light_rgb_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"light_rgb_value",
          e));

      a << i.light_rgb_value ();
    }

    // light_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"light_value",
          e));

      a << i.light_value ();
    }

    // light_range_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"light_range_value",
          e));

      a << i.light_range_value ();
    }

    // base_folder
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"base_folder",
          e));

      a << i.base_folder ();
    }

    // base_z
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"base_z",
          e));

      a << i.base_z ();
    }

    // floor_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"floor_count",
          e));

      a << i.floor_count ();
    }

    // wall_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"wall_count",
          e));

      a << i.wall_count ();
    }

    // corner_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"corner_count",
          e));

      a << i.corner_count ();
    }

    // corridor_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"corridor_count",
          e));

      a << i.corridor_count ();
    }

    // corridor_corner_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"corridor_corner_count",
          e));

      a << i.corridor_corner_count ();
    }

    // corridor_cross_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"corridor_cross_count",
          e));

      a << i.corridor_cross_count ();
    }

    // corridor_t_cross_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"corridor_t_cross_count",
          e));

      a << i.corridor_t_cross_count ();
    }

    // corridor_end_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"corridor_end_count",
          e));

      a << i.corridor_end_count ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const random_dungeon_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // random_dungeon_template
    //
    for (random_dungeon_table::random_dungeon_template_const_iterator
         b (i.random_dungeon_template ().begin ()), n (i.random_dungeon_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"random_dungeon_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

