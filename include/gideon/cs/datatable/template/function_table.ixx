// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_FUNCTION_TABLE_IXX
#define GDT_FUNCTION_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // function_t
  // 

  inline
  const function_t::item_code_type& function_t::
  item_code () const
  {
    return this->item_code_.get ();
  }

  inline
  function_t::item_code_type& function_t::
  item_code ()
  {
    return this->item_code_.get ();
  }

  inline
  void function_t::
  item_code (const item_code_type& x)
  {
    this->item_code_.set (x);
  }

  inline
  void function_t::
  item_code (::std::unique_ptr< item_code_type > x)
  {
    this->item_code_.set (std::move (x));
  }

  inline
  const function_t::looting_mil_sec_type& function_t::
  looting_mil_sec () const
  {
    return this->looting_mil_sec_.get ();
  }

  inline
  function_t::looting_mil_sec_type& function_t::
  looting_mil_sec ()
  {
    return this->looting_mil_sec_.get ();
  }

  inline
  void function_t::
  looting_mil_sec (const looting_mil_sec_type& x)
  {
    this->looting_mil_sec_.set (x);
  }

  inline
  const function_t::casting_mil_sec_type& function_t::
  casting_mil_sec () const
  {
    return this->casting_mil_sec_.get ();
  }

  inline
  function_t::casting_mil_sec_type& function_t::
  casting_mil_sec ()
  {
    return this->casting_mil_sec_.get ();
  }

  inline
  void function_t::
  casting_mil_sec (const casting_mil_sec_type& x)
  {
    this->casting_mil_sec_.set (x);
  }

  inline
  const function_t::item_script_type_type& function_t::
  item_script_type () const
  {
    return this->item_script_type_.get ();
  }

  inline
  function_t::item_script_type_type& function_t::
  item_script_type ()
  {
    return this->item_script_type_.get ();
  }

  inline
  void function_t::
  item_script_type (const item_script_type_type& x)
  {
    this->item_script_type_.set (x);
  }

  inline
  void function_t::
  item_script_type (::std::unique_ptr< item_script_type_type > x)
  {
    this->item_script_type_.set (std::move (x));
  }

  inline
  const function_t::item_script_value_type& function_t::
  item_script_value () const
  {
    return this->item_script_value_.get ();
  }

  inline
  function_t::item_script_value_type& function_t::
  item_script_value ()
  {
    return this->item_script_value_.get ();
  }

  inline
  void function_t::
  item_script_value (const item_script_value_type& x)
  {
    this->item_script_value_.set (x);
  }

  inline
  const function_t::stack_count_type& function_t::
  stack_count () const
  {
    return this->stack_count_.get ();
  }

  inline
  function_t::stack_count_type& function_t::
  stack_count ()
  {
    return this->stack_count_.get ();
  }

  inline
  void function_t::
  stack_count (const stack_count_type& x)
  {
    this->stack_count_.set (x);
  }

  inline
  const function_t::sell_cost_type_type& function_t::
  sell_cost_type () const
  {
    return this->sell_cost_type_.get ();
  }

  inline
  function_t::sell_cost_type_type& function_t::
  sell_cost_type ()
  {
    return this->sell_cost_type_.get ();
  }

  inline
  void function_t::
  sell_cost_type (const sell_cost_type_type& x)
  {
    this->sell_cost_type_.set (x);
  }

  inline
  void function_t::
  sell_cost_type (::std::unique_ptr< sell_cost_type_type > x)
  {
    this->sell_cost_type_.set (std::move (x));
  }

  inline
  const function_t::sell_cost_type1& function_t::
  sell_cost () const
  {
    return this->sell_cost_.get ();
  }

  inline
  function_t::sell_cost_type1& function_t::
  sell_cost ()
  {
    return this->sell_cost_.get ();
  }

  inline
  void function_t::
  sell_cost (const sell_cost_type1& x)
  {
    this->sell_cost_.set (x);
  }

  inline
  const function_t::buy_cost_type_1_type& function_t::
  buy_cost_type_1 () const
  {
    return this->buy_cost_type_1_.get ();
  }

  inline
  function_t::buy_cost_type_1_type& function_t::
  buy_cost_type_1 ()
  {
    return this->buy_cost_type_1_.get ();
  }

  inline
  void function_t::
  buy_cost_type_1 (const buy_cost_type_1_type& x)
  {
    this->buy_cost_type_1_.set (x);
  }

  inline
  void function_t::
  buy_cost_type_1 (::std::unique_ptr< buy_cost_type_1_type > x)
  {
    this->buy_cost_type_1_.set (std::move (x));
  }

  inline
  const function_t::buy_cost_1_type& function_t::
  buy_cost_1 () const
  {
    return this->buy_cost_1_.get ();
  }

  inline
  function_t::buy_cost_1_type& function_t::
  buy_cost_1 ()
  {
    return this->buy_cost_1_.get ();
  }

  inline
  void function_t::
  buy_cost_1 (const buy_cost_1_type& x)
  {
    this->buy_cost_1_.set (x);
  }

  inline
  const function_t::buy_cost_type_2_type& function_t::
  buy_cost_type_2 () const
  {
    return this->buy_cost_type_2_.get ();
  }

  inline
  function_t::buy_cost_type_2_type& function_t::
  buy_cost_type_2 ()
  {
    return this->buy_cost_type_2_.get ();
  }

  inline
  void function_t::
  buy_cost_type_2 (const buy_cost_type_2_type& x)
  {
    this->buy_cost_type_2_.set (x);
  }

  inline
  void function_t::
  buy_cost_type_2 (::std::unique_ptr< buy_cost_type_2_type > x)
  {
    this->buy_cost_type_2_.set (std::move (x));
  }

  inline
  const function_t::buy_cost_2_type& function_t::
  buy_cost_2 () const
  {
    return this->buy_cost_2_.get ();
  }

  inline
  function_t::buy_cost_2_type& function_t::
  buy_cost_2 ()
  {
    return this->buy_cost_2_.get ();
  }

  inline
  void function_t::
  buy_cost_2 (const buy_cost_2_type& x)
  {
    this->buy_cost_2_.set (x);
  }

  inline
  const function_t::icon_name_type& function_t::
  icon_name () const
  {
    return this->icon_name_.get ();
  }

  inline
  function_t::icon_name_type& function_t::
  icon_name ()
  {
    return this->icon_name_.get ();
  }

  inline
  void function_t::
  icon_name (const icon_name_type& x)
  {
    this->icon_name_.set (x);
  }

  inline
  void function_t::
  icon_name (::std::unique_ptr< icon_name_type > x)
  {
    this->icon_name_.set (std::move (x));
  }

  inline
  const function_t::animation_name_type& function_t::
  animation_name () const
  {
    return this->animation_name_.get ();
  }

  inline
  function_t::animation_name_type& function_t::
  animation_name ()
  {
    return this->animation_name_.get ();
  }

  inline
  void function_t::
  animation_name (const animation_name_type& x)
  {
    this->animation_name_.set (x);
  }

  inline
  void function_t::
  animation_name (::std::unique_ptr< animation_name_type > x)
  {
    this->animation_name_.set (std::move (x));
  }


  // item_script_type_t
  // 


  // function_table
  // 

  inline
  const function_table::function_template_sequence& function_table::
  function_template () const
  {
    return this->function_template_;
  }

  inline
  function_table::function_template_sequence& function_table::
  function_template ()
  {
    return this->function_template_;
  }

  inline
  void function_table::
  function_template (const function_template_sequence& s)
  {
    this->function_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_FUNCTION_TABLE_IXX
