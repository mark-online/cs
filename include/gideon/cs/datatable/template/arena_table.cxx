// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "arena_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // arena_t
  //

  arena_t::
  arena_t ()
  : ::xml_schema::type (),
    arena_map_code_ (this),
    x_sector_count_ (this),
    y_sector_count_ (this),
    z_sector_count_ (this),
    sector_length_ (this),
    min_player_count_ (this),
    max_player_count_ (this),
    arena_mode_type_ (this),
    can_mount_vehicle_ (this),
    can_glider_ (this),
    match_time_ (this)
  {
  }

  arena_t::
  arena_t (const arena_map_code_type& arena_map_code,
           const x_sector_count_type& x_sector_count,
           const y_sector_count_type& y_sector_count,
           const z_sector_count_type& z_sector_count,
           const sector_length_type& sector_length,
           const min_player_count_type& min_player_count,
           const max_player_count_type& max_player_count,
           const arena_mode_type_type& arena_mode_type,
           const can_mount_vehicle_type& can_mount_vehicle,
           const can_glider_type& can_glider,
           const match_time_type& match_time)
  : ::xml_schema::type (),
    arena_map_code_ (arena_map_code, this),
    x_sector_count_ (x_sector_count, this),
    y_sector_count_ (y_sector_count, this),
    z_sector_count_ (z_sector_count, this),
    sector_length_ (sector_length, this),
    min_player_count_ (min_player_count, this),
    max_player_count_ (max_player_count, this),
    arena_mode_type_ (arena_mode_type, this),
    can_mount_vehicle_ (can_mount_vehicle, this),
    can_glider_ (can_glider, this),
    match_time_ (match_time, this)
  {
  }

  arena_t::
  arena_t (const arena_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    arena_map_code_ (x.arena_map_code_, f, this),
    x_sector_count_ (x.x_sector_count_, f, this),
    y_sector_count_ (x.y_sector_count_, f, this),
    z_sector_count_ (x.z_sector_count_, f, this),
    sector_length_ (x.sector_length_, f, this),
    min_player_count_ (x.min_player_count_, f, this),
    max_player_count_ (x.max_player_count_, f, this),
    arena_mode_type_ (x.arena_mode_type_, f, this),
    can_mount_vehicle_ (x.can_mount_vehicle_, f, this),
    can_glider_ (x.can_glider_, f, this),
    match_time_ (x.match_time_, f, this)
  {
  }

  arena_t::
  arena_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    arena_map_code_ (this),
    x_sector_count_ (this),
    y_sector_count_ (this),
    z_sector_count_ (this),
    sector_length_ (this),
    min_player_count_ (this),
    max_player_count_ (this),
    arena_mode_type_ (this),
    can_mount_vehicle_ (this),
    can_glider_ (this),
    match_time_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void arena_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"arena_map_code" && n.namespace_ ().empty ())
      {
        this->arena_map_code_.set (arena_map_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"x_sector_count" && n.namespace_ ().empty ())
      {
        this->x_sector_count_.set (x_sector_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"y_sector_count" && n.namespace_ ().empty ())
      {
        this->y_sector_count_.set (y_sector_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"z_sector_count" && n.namespace_ ().empty ())
      {
        this->z_sector_count_.set (z_sector_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sector_length" && n.namespace_ ().empty ())
      {
        this->sector_length_.set (sector_length_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"min_player_count" && n.namespace_ ().empty ())
      {
        this->min_player_count_.set (min_player_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"max_player_count" && n.namespace_ ().empty ())
      {
        this->max_player_count_.set (max_player_count_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"arena_mode_type" && n.namespace_ ().empty ())
      {
        this->arena_mode_type_.set (arena_mode_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"can_mount_vehicle" && n.namespace_ ().empty ())
      {
        this->can_mount_vehicle_.set (can_mount_vehicle_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"can_glider" && n.namespace_ ().empty ())
      {
        this->can_glider_.set (can_glider_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"match_time" && n.namespace_ ().empty ())
      {
        this->match_time_.set (match_time_traits::create (i, f, this));
        continue;
      }
    }

    if (!arena_map_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"arena_map_code",
        L"");
    }

    if (!x_sector_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"x_sector_count",
        L"");
    }

    if (!y_sector_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"y_sector_count",
        L"");
    }

    if (!z_sector_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"z_sector_count",
        L"");
    }

    if (!sector_length_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sector_length",
        L"");
    }

    if (!min_player_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"min_player_count",
        L"");
    }

    if (!max_player_count_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"max_player_count",
        L"");
    }

    if (!arena_mode_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"arena_mode_type",
        L"");
    }

    if (!can_mount_vehicle_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"can_mount_vehicle",
        L"");
    }

    if (!can_glider_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"can_glider",
        L"");
    }

    if (!match_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"match_time",
        L"");
    }
  }

  arena_t* arena_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class arena_t (*this, f, c);
  }

  arena_t& arena_t::
  operator= (const arena_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->arena_map_code_ = x.arena_map_code_;
      this->x_sector_count_ = x.x_sector_count_;
      this->y_sector_count_ = x.y_sector_count_;
      this->z_sector_count_ = x.z_sector_count_;
      this->sector_length_ = x.sector_length_;
      this->min_player_count_ = x.min_player_count_;
      this->max_player_count_ = x.max_player_count_;
      this->arena_mode_type_ = x.arena_mode_type_;
      this->can_mount_vehicle_ = x.can_mount_vehicle_;
      this->can_glider_ = x.can_glider_;
      this->match_time_ = x.match_time_;
    }

    return *this;
  }

  arena_t::
  ~arena_t ()
  {
  }

  // arena_mode_type_t
  //

  arena_mode_type_t::
  arena_mode_type_t ()
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > ()
  {
  }

  arena_mode_type_t::
  arena_mode_type_t (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (_xsd_unsigned_byte_base)
  {
  }

  arena_mode_type_t::
  arena_mode_type_t (const arena_mode_type_t& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (x, f, c)
  {
  }

  arena_mode_type_t::
  arena_mode_type_t (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (e, f, c)
  {
  }

  arena_mode_type_t::
  arena_mode_type_t (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (a, f, c)
  {
  }

  arena_mode_type_t::
  arena_mode_type_t (const ::std::wstring& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  arena_mode_type_t* arena_mode_type_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class arena_mode_type_t (*this, f, c);
  }

  arena_mode_type_t::
  ~arena_mode_type_t ()
  {
  }

  // arenas
  //

  arenas::
  arenas ()
  : ::xml_schema::type (),
    arena_template_ (this)
  {
  }

  arenas::
  arenas (const arenas& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    arena_template_ (x.arena_template_, f, this)
  {
  }

  arenas::
  arenas (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    arena_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void arenas::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // arena_template
      //
      if (n.name () == L"arena_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< arena_template_type > r (
          arena_template_traits::create (i, f, this));

        this->arena_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  arenas* arenas::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class arenas (*this, f, c);
  }

  arenas& arenas::
  operator= (const arenas& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->arena_template_ = x.arena_template_;
    }

    return *this;
  }

  arenas::
  ~arenas ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (const ::std::wstring& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::arenas > (
      ::gdt::arenas_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (const ::std::wstring& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::arenas > (
      ::gdt::arenas_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (const ::std::wstring& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::arenas > (
      ::gdt::arenas_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::arenas_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::arenas_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::arenas_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (::std::istream& is,
           const ::std::wstring& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::arenas_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (::std::istream& is,
           const ::std::wstring& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::arenas_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (::std::istream& is,
           const ::std::wstring& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::arenas_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::arenas > (
      ::gdt::arenas_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::arenas > (
      ::gdt::arenas_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::arenas > (
      ::gdt::arenas_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::arenas > (
        ::gdt::arenas_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"arenas" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::arenas > r (
        ::xsd::cxx::tree::traits< ::gdt::arenas, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"arenas",
      L"");
  }

  ::std::unique_ptr< ::gdt::arenas >
  arenas_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"arenas" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::arenas > r (
        ::xsd::cxx::tree::traits< ::gdt::arenas, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"arenas",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  arenas_ (::std::ostream& o,
           const ::gdt::arenas& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::arenas_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  arenas_ (::std::ostream& o,
           const ::gdt::arenas& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::arenas_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  arenas_ (::std::ostream& o,
           const ::gdt::arenas& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::arenas_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  arenas_ (::xercesc::XMLFormatTarget& t,
           const ::gdt::arenas& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::arenas_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  arenas_ (::xercesc::XMLFormatTarget& t,
           const ::gdt::arenas& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::arenas_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  arenas_ (::xercesc::XMLFormatTarget& t,
           const ::gdt::arenas& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::arenas_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  arenas_ (::xercesc::DOMDocument& d,
           const ::gdt::arenas& s,
           ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"arenas" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"arenas",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  arenas_ (const ::gdt::arenas& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"arenas",
        L"",
        m, f));

    ::gdt::arenas_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const arena_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // arena_map_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"arena_map_code",
          e));

      a << i.arena_map_code ();
    }

    // x_sector_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"x_sector_count",
          e));

      a << i.x_sector_count ();
    }

    // y_sector_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"y_sector_count",
          e));

      a << i.y_sector_count ();
    }

    // z_sector_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"z_sector_count",
          e));

      a << i.z_sector_count ();
    }

    // sector_length
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sector_length",
          e));

      a << i.sector_length ();
    }

    // min_player_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"min_player_count",
          e));

      a << i.min_player_count ();
    }

    // max_player_count
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"max_player_count",
          e));

      a << i.max_player_count ();
    }

    // arena_mode_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"arena_mode_type",
          e));

      a << i.arena_mode_type ();
    }

    // can_mount_vehicle
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"can_mount_vehicle",
          e));

      a << i.can_mount_vehicle ();
    }

    // can_glider
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"can_glider",
          e));

      a << i.can_glider ();
    }

    // match_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"match_time",
          e));

      a << i.match_time ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const arena_mode_type_t& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const arena_mode_type_t& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const arena_mode_type_t& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const arenas& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // arena_template
    //
    for (arenas::arena_template_const_iterator
         b (i.arena_template ().begin ()), n (i.arena_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"arena_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

