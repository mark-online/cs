// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "achievement_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // achievement_t
  //

  achievement_t::
  achievement_t ()
  : ::xml_schema::type (),
    achievement_code_ (this),
    sub_category_param_ (this),
    mission_type_ (this),
    param_1_ (this),
    param_2_ (this),
    param_3_ (this),
    param_4_ (this),
    param_5_ (this),
    param_6_ (this),
    reward_code_1_ (this),
    reward_value_1_ (this),
    reward_code_2_ (this),
    reward_value_2_ (this),
    reward_achievement_point_ (this),
    icon_name_ (this)
  {
  }

  achievement_t::
  achievement_t (const achievement_code_type& achievement_code,
                 const sub_category_param_type& sub_category_param,
                 const mission_type_type& mission_type,
                 const param_1_type& param_1,
                 const param_2_type& param_2,
                 const param_3_type& param_3,
                 const param_4_type& param_4,
                 const param_5_type& param_5,
                 const param_6_type& param_6,
                 const reward_code_1_type& reward_code_1,
                 const reward_value_1_type& reward_value_1,
                 const reward_code_2_type& reward_code_2,
                 const reward_value_2_type& reward_value_2,
                 const reward_achievement_point_type& reward_achievement_point,
                 const icon_name_type& icon_name)
  : ::xml_schema::type (),
    achievement_code_ (achievement_code, this),
    sub_category_param_ (sub_category_param, this),
    mission_type_ (mission_type, this),
    param_1_ (param_1, this),
    param_2_ (param_2, this),
    param_3_ (param_3, this),
    param_4_ (param_4, this),
    param_5_ (param_5, this),
    param_6_ (param_6, this),
    reward_code_1_ (reward_code_1, this),
    reward_value_1_ (reward_value_1, this),
    reward_code_2_ (reward_code_2, this),
    reward_value_2_ (reward_value_2, this),
    reward_achievement_point_ (reward_achievement_point, this),
    icon_name_ (icon_name, this)
  {
  }

  achievement_t::
  achievement_t (const achievement_t& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    achievement_code_ (x.achievement_code_, f, this),
    sub_category_param_ (x.sub_category_param_, f, this),
    mission_type_ (x.mission_type_, f, this),
    param_1_ (x.param_1_, f, this),
    param_2_ (x.param_2_, f, this),
    param_3_ (x.param_3_, f, this),
    param_4_ (x.param_4_, f, this),
    param_5_ (x.param_5_, f, this),
    param_6_ (x.param_6_, f, this),
    reward_code_1_ (x.reward_code_1_, f, this),
    reward_value_1_ (x.reward_value_1_, f, this),
    reward_code_2_ (x.reward_code_2_, f, this),
    reward_value_2_ (x.reward_value_2_, f, this),
    reward_achievement_point_ (x.reward_achievement_point_, f, this),
    icon_name_ (x.icon_name_, f, this)
  {
  }

  achievement_t::
  achievement_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    achievement_code_ (this),
    sub_category_param_ (this),
    mission_type_ (this),
    param_1_ (this),
    param_2_ (this),
    param_3_ (this),
    param_4_ (this),
    param_5_ (this),
    param_6_ (this),
    reward_code_1_ (this),
    reward_value_1_ (this),
    reward_code_2_ (this),
    reward_value_2_ (this),
    reward_achievement_point_ (this),
    icon_name_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void achievement_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"achievement_code" && n.namespace_ ().empty ())
      {
        this->achievement_code_.set (achievement_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"sub_category_param" && n.namespace_ ().empty ())
      {
        this->sub_category_param_.set (sub_category_param_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"mission_type" && n.namespace_ ().empty ())
      {
        this->mission_type_.set (mission_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"param_1" && n.namespace_ ().empty ())
      {
        this->param_1_.set (param_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"param_2" && n.namespace_ ().empty ())
      {
        this->param_2_.set (param_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"param_3" && n.namespace_ ().empty ())
      {
        this->param_3_.set (param_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"param_4" && n.namespace_ ().empty ())
      {
        this->param_4_.set (param_4_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"param_5" && n.namespace_ ().empty ())
      {
        this->param_5_.set (param_5_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"param_6" && n.namespace_ ().empty ())
      {
        this->param_6_.set (param_6_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"reward_code_1" && n.namespace_ ().empty ())
      {
        this->reward_code_1_.set (reward_code_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"reward_value_1" && n.namespace_ ().empty ())
      {
        this->reward_value_1_.set (reward_value_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"reward_code_2" && n.namespace_ ().empty ())
      {
        this->reward_code_2_.set (reward_code_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"reward_value_2" && n.namespace_ ().empty ())
      {
        this->reward_value_2_.set (reward_value_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"reward_achievement_point" && n.namespace_ ().empty ())
      {
        this->reward_achievement_point_.set (reward_achievement_point_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"icon_name" && n.namespace_ ().empty ())
      {
        this->icon_name_.set (icon_name_traits::create (i, f, this));
        continue;
      }
    }

    if (!achievement_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"achievement_code",
        L"");
    }

    if (!sub_category_param_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"sub_category_param",
        L"");
    }

    if (!mission_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"mission_type",
        L"");
    }

    if (!param_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"param_1",
        L"");
    }

    if (!param_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"param_2",
        L"");
    }

    if (!param_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"param_3",
        L"");
    }

    if (!param_4_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"param_4",
        L"");
    }

    if (!param_5_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"param_5",
        L"");
    }

    if (!param_6_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"param_6",
        L"");
    }

    if (!reward_code_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"reward_code_1",
        L"");
    }

    if (!reward_value_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"reward_value_1",
        L"");
    }

    if (!reward_code_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"reward_code_2",
        L"");
    }

    if (!reward_value_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"reward_value_2",
        L"");
    }

    if (!reward_achievement_point_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"reward_achievement_point",
        L"");
    }

    if (!icon_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"icon_name",
        L"");
    }
  }

  achievement_t* achievement_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class achievement_t (*this, f, c);
  }

  achievement_t& achievement_t::
  operator= (const achievement_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->achievement_code_ = x.achievement_code_;
      this->sub_category_param_ = x.sub_category_param_;
      this->mission_type_ = x.mission_type_;
      this->param_1_ = x.param_1_;
      this->param_2_ = x.param_2_;
      this->param_3_ = x.param_3_;
      this->param_4_ = x.param_4_;
      this->param_5_ = x.param_5_;
      this->param_6_ = x.param_6_;
      this->reward_code_1_ = x.reward_code_1_;
      this->reward_value_1_ = x.reward_value_1_;
      this->reward_code_2_ = x.reward_code_2_;
      this->reward_value_2_ = x.reward_value_2_;
      this->reward_achievement_point_ = x.reward_achievement_point_;
      this->icon_name_ = x.icon_name_;
    }

    return *this;
  }

  achievement_t::
  ~achievement_t ()
  {
  }

  // achievement_mission_type_t
  //

  achievement_mission_type_t::
  achievement_mission_type_t ()
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > ()
  {
  }

  achievement_mission_type_t::
  achievement_mission_type_t (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (_xsd_unsigned_byte_base)
  {
  }

  achievement_mission_type_t::
  achievement_mission_type_t (const achievement_mission_type_t& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (x, f, c)
  {
  }

  achievement_mission_type_t::
  achievement_mission_type_t (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (e, f, c)
  {
  }

  achievement_mission_type_t::
  achievement_mission_type_t (const ::xercesc::DOMAttr& a,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (a, f, c)
  {
  }

  achievement_mission_type_t::
  achievement_mission_type_t (const ::std::wstring& s,
                              const ::xercesc::DOMElement* e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  achievement_mission_type_t* achievement_mission_type_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class achievement_mission_type_t (*this, f, c);
  }

  achievement_mission_type_t::
  ~achievement_mission_type_t ()
  {
  }

  // achievement_table
  //

  achievement_table::
  achievement_table ()
  : ::xml_schema::type (),
    achievement_template_ (this)
  {
  }

  achievement_table::
  achievement_table (const achievement_table& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    achievement_template_ (x.achievement_template_, f, this)
  {
  }

  achievement_table::
  achievement_table (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    achievement_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void achievement_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // achievement_template
      //
      if (n.name () == L"achievement_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< achievement_template_type > r (
          achievement_template_traits::create (i, f, this));

        this->achievement_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  achievement_table* achievement_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class achievement_table (*this, f, c);
  }

  achievement_table& achievement_table::
  operator= (const achievement_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->achievement_template_ = x.achievement_template_;
    }

    return *this;
  }

  achievement_table::
  ~achievement_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (const ::std::wstring& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::achievement_table > (
      ::gdt::achievement_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (const ::std::wstring& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::achievement_table > (
      ::gdt::achievement_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (const ::std::wstring& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::achievement_table > (
      ::gdt::achievement_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::achievement_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::achievement_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::achievement_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (::std::istream& is,
                      const ::std::wstring& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::achievement_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (::std::istream& is,
                      const ::std::wstring& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::achievement_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (::std::istream& is,
                      const ::std::wstring& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::achievement_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::achievement_table > (
      ::gdt::achievement_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::achievement_table > (
      ::gdt::achievement_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::achievement_table > (
      ::gdt::achievement_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::achievement_table > (
        ::gdt::achievement_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"achievement_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::achievement_table > r (
        ::xsd::cxx::tree::traits< ::gdt::achievement_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"achievement_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::achievement_table >
  achievement_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"achievement_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::achievement_table > r (
        ::xsd::cxx::tree::traits< ::gdt::achievement_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"achievement_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  achievement_table_ (::std::ostream& o,
                      const ::gdt::achievement_table& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::wstring& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::achievement_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  achievement_table_ (::std::ostream& o,
                      const ::gdt::achievement_table& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::wstring& e,
                      ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::achievement_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  achievement_table_ (::std::ostream& o,
                      const ::gdt::achievement_table& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::wstring& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::achievement_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  achievement_table_ (::xercesc::XMLFormatTarget& t,
                      const ::gdt::achievement_table& s,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::wstring& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::achievement_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  achievement_table_ (::xercesc::XMLFormatTarget& t,
                      const ::gdt::achievement_table& s,
                      ::xml_schema::error_handler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::wstring& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::achievement_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  achievement_table_ (::xercesc::XMLFormatTarget& t,
                      const ::gdt::achievement_table& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::namespace_infomap& m,
                      const ::std::wstring& e,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::achievement_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  achievement_table_ (::xercesc::DOMDocument& d,
                      const ::gdt::achievement_table& s,
                      ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"achievement_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"achievement_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  achievement_table_ (const ::gdt::achievement_table& s,
                      const ::xml_schema::namespace_infomap& m,
                      ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"achievement_table",
        L"",
        m, f));

    ::gdt::achievement_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const achievement_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // achievement_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"achievement_code",
          e));

      a << i.achievement_code ();
    }

    // sub_category_param
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"sub_category_param",
          e));

      a << i.sub_category_param ();
    }

    // mission_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"mission_type",
          e));

      a << i.mission_type ();
    }

    // param_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"param_1",
          e));

      a << i.param_1 ();
    }

    // param_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"param_2",
          e));

      a << i.param_2 ();
    }

    // param_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"param_3",
          e));

      a << i.param_3 ();
    }

    // param_4
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"param_4",
          e));

      a << i.param_4 ();
    }

    // param_5
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"param_5",
          e));

      a << i.param_5 ();
    }

    // param_6
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"param_6",
          e));

      a << i.param_6 ();
    }

    // reward_code_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"reward_code_1",
          e));

      a << i.reward_code_1 ();
    }

    // reward_value_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"reward_value_1",
          e));

      a << i.reward_value_1 ();
    }

    // reward_code_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"reward_code_2",
          e));

      a << i.reward_code_2 ();
    }

    // reward_value_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"reward_value_2",
          e));

      a << i.reward_value_2 ();
    }

    // reward_achievement_point
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"reward_achievement_point",
          e));

      a << i.reward_achievement_point ();
    }

    // icon_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"icon_name",
          e));

      a << i.icon_name ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const achievement_mission_type_t& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const achievement_mission_type_t& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const achievement_mission_type_t& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const achievement_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // achievement_template
    //
    for (achievement_table::achievement_template_const_iterator
         b (i.achievement_template ().begin ()), n (i.achievement_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"achievement_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

