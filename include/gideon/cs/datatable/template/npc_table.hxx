// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from npc_table.xsd.
 */

#ifndef GDT_NPC_TABLE_HXX
#define GDT_NPC_TABLE_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

// Begin prologue.
//
#include "shared_types.hxx"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "xml_schema.hxx"

// Forward declarations.
//
namespace gdt
{
  class npc_t;
  class ai_reactive_type_t;
  class npc_table;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#ifndef XSD_DONT_INCLUDE_INLINE
#define XSD_DONT_INCLUDE_INLINE

#include "shared_types.hxx"

#undef XSD_DONT_INCLUDE_INLINE
#else

#include "shared_types.hxx"

#endif // XSD_DONT_INCLUDE_INLINE

/**
 * @brief C++ namespace for the %
 * schema namespace.
 */
namespace gdt
{
  /**
   * @brief Class corresponding to the %npc_t schema type.
   *
   * @nosubgrouping
   */
  class GIDEON_CS_API npc_t: public ::xml_schema::type
  {
    public:
    /**
     * @name npc_code
     *
     * @brief Accessor and modifier functions for the %npc_code
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::npc_code_t npc_code_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_code_type, wchar_t > npc_code_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_code_type&
    npc_code () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_code_type&
    npc_code ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_code (const npc_code_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_code (::std::unique_ptr< npc_code_type > p);

    //@}

    /**
     * @name npc_type
     *
     * @brief Accessor and modifier functions for the %npc_type
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::npc_type_t npc_type_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_type_type, wchar_t > npc_type_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_type_type&
    npc_type () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_type_type&
    npc_type ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_type (const npc_type_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_type (::std::unique_ptr< npc_type_type > p);

    //@}

    /**
     * @name npc_mesh_collision_usable
     *
     * @brief Accessor and modifier functions for the %npc_mesh_collision_usable
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean npc_mesh_collision_usable_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_mesh_collision_usable_type, wchar_t > npc_mesh_collision_usable_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_mesh_collision_usable_type&
    npc_mesh_collision_usable () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_mesh_collision_usable_type&
    npc_mesh_collision_usable ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_mesh_collision_usable (const npc_mesh_collision_usable_type& x);

    //@}

    /**
     * @name npc_contact_object_normal
     *
     * @brief Accessor and modifier functions for the %npc_contact_object_normal
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean npc_contact_object_normal_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_contact_object_normal_type, wchar_t > npc_contact_object_normal_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_contact_object_normal_type&
    npc_contact_object_normal () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_contact_object_normal_type&
    npc_contact_object_normal ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_contact_object_normal (const npc_contact_object_normal_type& x);

    //@}

    /**
     * @name datablock_name
     *
     * @brief Accessor and modifier functions for the %datablock_name
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string datablock_name_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< datablock_name_type, wchar_t > datablock_name_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const datablock_name_type&
    datablock_name () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    datablock_name_type&
    datablock_name ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    datablock_name (const datablock_name_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    datablock_name (::std::unique_ptr< datablock_name_type > p);

    //@}

    /**
     * @name material_name
     *
     * @brief Accessor and modifier functions for the %material_name
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string material_name_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< material_name_type, wchar_t > material_name_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const material_name_type&
    material_name () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    material_name_type&
    material_name ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    material_name (const material_name_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    material_name (::std::unique_ptr< material_name_type > p);

    //@}

    /**
     * @name material_count
     *
     * @brief Accessor and modifier functions for the %material_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short material_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< material_count_type, wchar_t > material_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const material_count_type&
    material_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    material_count_type&
    material_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    material_count (const material_count_type& x);

    //@}

    /**
     * @name scale
     *
     * @brief Accessor and modifier functions for the %scale
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::float_list_t scale_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< scale_type, wchar_t > scale_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const scale_type&
    scale () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    scale_type&
    scale ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    scale (const scale_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    scale (::std::unique_ptr< scale_type > p);

    //@}

    /**
     * @name modeling_radius
     *
     * @brief Accessor and modifier functions for the %modeling_radius
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int modeling_radius_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< modeling_radius_type, wchar_t > modeling_radius_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const modeling_radius_type&
    modeling_radius () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    modeling_radius_type&
    modeling_radius ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    modeling_radius (const modeling_radius_type& x);

    //@}

    /**
     * @name level
     *
     * @brief Accessor and modifier functions for the %level
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte level_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< level_type, wchar_t > level_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const level_type&
    level () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    level_type&
    level ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    level (const level_type& x);

    //@}

    /**
     * @name grade
     *
     * @brief Accessor and modifier functions for the %grade
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::npc_grade_t grade_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< grade_type, wchar_t > grade_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const grade_type&
    grade () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    grade_type&
    grade ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    grade (const grade_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    grade (::std::unique_ptr< grade_type > p);

    //@}

    /**
     * @name exp
     *
     * @brief Accessor and modifier functions for the %exp
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int exp_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< exp_type, wchar_t > exp_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const exp_type&
    exp () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    exp_type&
    exp ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    exp (const exp_type& x);

    //@}

    /**
     * @name random_dungeon_exp_pct
     *
     * @brief Accessor and modifier functions for the %random_dungeon_exp_pct
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int random_dungeon_exp_pct_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< random_dungeon_exp_pct_type, wchar_t > random_dungeon_exp_pct_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const random_dungeon_exp_pct_type&
    random_dungeon_exp_pct () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    random_dungeon_exp_pct_type&
    random_dungeon_exp_pct ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    random_dungeon_exp_pct (const random_dungeon_exp_pct_type& x);

    //@}

    /**
     * @name world_event_exp_pct
     *
     * @brief Accessor and modifier functions for the %world_event_exp_pct
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int world_event_exp_pct_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< world_event_exp_pct_type, wchar_t > world_event_exp_pct_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const world_event_exp_pct_type&
    world_event_exp_pct () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    world_event_exp_pct_type&
    world_event_exp_pct ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    world_event_exp_pct (const world_event_exp_pct_type& x);

    //@}

    /**
     * @name hp
     *
     * @brief Accessor and modifier functions for the %hp
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int hp_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< hp_type, wchar_t > hp_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const hp_type&
    hp () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    hp_type&
    hp ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    hp (const hp_type& x);

    //@}

    /**
     * @name mp
     *
     * @brief Accessor and modifier functions for the %mp
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int mp_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< mp_type, wchar_t > mp_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const mp_type&
    mp () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    mp_type&
    mp ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    mp (const mp_type& x);

    //@}

    /**
     * @name min_attack_power
     *
     * @brief Accessor and modifier functions for the %min_attack_power
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int min_attack_power_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< min_attack_power_type, wchar_t > min_attack_power_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const min_attack_power_type&
    min_attack_power () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    min_attack_power_type&
    min_attack_power ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    min_attack_power (const min_attack_power_type& x);

    //@}

    /**
     * @name max_attack_power
     *
     * @brief Accessor and modifier functions for the %max_attack_power
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int max_attack_power_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< max_attack_power_type, wchar_t > max_attack_power_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const max_attack_power_type&
    max_attack_power () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    max_attack_power_type&
    max_attack_power ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    max_attack_power (const max_attack_power_type& x);

    //@}

    /**
     * @name physical_attack_power
     *
     * @brief Accessor and modifier functions for the %physical_attack_power
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int physical_attack_power_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< physical_attack_power_type, wchar_t > physical_attack_power_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const physical_attack_power_type&
    physical_attack_power () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    physical_attack_power_type&
    physical_attack_power ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    physical_attack_power (const physical_attack_power_type& x);

    //@}

    /**
     * @name magic_attack_power
     *
     * @brief Accessor and modifier functions for the %magic_attack_power
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int magic_attack_power_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< magic_attack_power_type, wchar_t > magic_attack_power_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const magic_attack_power_type&
    magic_attack_power () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    magic_attack_power_type&
    magic_attack_power ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    magic_attack_power (const magic_attack_power_type& x);

    //@}

    /**
     * @name hit_rate
     *
     * @brief Accessor and modifier functions for the %hit_rate
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short hit_rate_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< hit_rate_type, wchar_t > hit_rate_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const hit_rate_type&
    hit_rate () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    hit_rate_type&
    hit_rate ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    hit_rate (const hit_rate_type& x);

    //@}

    /**
     * @name physical_critical_rate
     *
     * @brief Accessor and modifier functions for the %physical_critical_rate
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short physical_critical_rate_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< physical_critical_rate_type, wchar_t > physical_critical_rate_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const physical_critical_rate_type&
    physical_critical_rate () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    physical_critical_rate_type&
    physical_critical_rate ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    physical_critical_rate (const physical_critical_rate_type& x);

    //@}

    /**
     * @name magic_critical_rate
     *
     * @brief Accessor and modifier functions for the %magic_critical_rate
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short magic_critical_rate_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< magic_critical_rate_type, wchar_t > magic_critical_rate_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const magic_critical_rate_type&
    magic_critical_rate () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    magic_critical_rate_type&
    magic_critical_rate ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    magic_critical_rate (const magic_critical_rate_type& x);

    //@}

    /**
     * @name block_rate
     *
     * @brief Accessor and modifier functions for the %block_rate
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short block_rate_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< block_rate_type, wchar_t > block_rate_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const block_rate_type&
    block_rate () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    block_rate_type&
    block_rate ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    block_rate (const block_rate_type& x);

    //@}

    /**
     * @name dodge_rate
     *
     * @brief Accessor and modifier functions for the %dodge_rate
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short dodge_rate_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< dodge_rate_type, wchar_t > dodge_rate_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const dodge_rate_type&
    dodge_rate () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    dodge_rate_type&
    dodge_rate ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    dodge_rate (const dodge_rate_type& x);

    //@}

    /**
     * @name parry_rate
     *
     * @brief Accessor and modifier functions for the %parry_rate
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short parry_rate_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< parry_rate_type, wchar_t > parry_rate_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const parry_rate_type&
    parry_rate () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    parry_rate_type&
    parry_rate ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    parry_rate (const parry_rate_type& x);

    //@}

    /**
     * @name defence
     *
     * @brief Accessor and modifier functions for the %defence
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short defence_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< defence_type, wchar_t > defence_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const defence_type&
    defence () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    defence_type&
    defence ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    defence (const defence_type& x);

    //@}

    /**
     * @name light_attribute
     *
     * @brief Accessor and modifier functions for the %light_attribute
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short light_attribute_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< light_attribute_type, wchar_t > light_attribute_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const light_attribute_type&
    light_attribute () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    light_attribute_type&
    light_attribute ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    light_attribute (const light_attribute_type& x);

    //@}

    /**
     * @name dark_attribute
     *
     * @brief Accessor and modifier functions for the %dark_attribute
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short dark_attribute_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< dark_attribute_type, wchar_t > dark_attribute_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const dark_attribute_type&
    dark_attribute () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    dark_attribute_type&
    dark_attribute ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    dark_attribute (const dark_attribute_type& x);

    //@}

    /**
     * @name fire_attribute
     *
     * @brief Accessor and modifier functions for the %fire_attribute
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short fire_attribute_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< fire_attribute_type, wchar_t > fire_attribute_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const fire_attribute_type&
    fire_attribute () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    fire_attribute_type&
    fire_attribute ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    fire_attribute (const fire_attribute_type& x);

    //@}

    /**
     * @name ice_attribute
     *
     * @brief Accessor and modifier functions for the %ice_attribute
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short ice_attribute_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ice_attribute_type, wchar_t > ice_attribute_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ice_attribute_type&
    ice_attribute () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ice_attribute_type&
    ice_attribute ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ice_attribute (const ice_attribute_type& x);

    //@}

    /**
     * @name light_attribute_regist
     *
     * @brief Accessor and modifier functions for the %light_attribute_regist
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short light_attribute_regist_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< light_attribute_regist_type, wchar_t > light_attribute_regist_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const light_attribute_regist_type&
    light_attribute_regist () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    light_attribute_regist_type&
    light_attribute_regist ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    light_attribute_regist (const light_attribute_regist_type& x);

    //@}

    /**
     * @name dark_attribute_regist
     *
     * @brief Accessor and modifier functions for the %dark_attribute_regist
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short dark_attribute_regist_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< dark_attribute_regist_type, wchar_t > dark_attribute_regist_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const dark_attribute_regist_type&
    dark_attribute_regist () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    dark_attribute_regist_type&
    dark_attribute_regist ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    dark_attribute_regist (const dark_attribute_regist_type& x);

    //@}

    /**
     * @name fire_attribute_regist
     *
     * @brief Accessor and modifier functions for the %fire_attribute_regist
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short fire_attribute_regist_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< fire_attribute_regist_type, wchar_t > fire_attribute_regist_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const fire_attribute_regist_type&
    fire_attribute_regist () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    fire_attribute_regist_type&
    fire_attribute_regist ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    fire_attribute_regist (const fire_attribute_regist_type& x);

    //@}

    /**
     * @name ice_attribute_regist
     *
     * @brief Accessor and modifier functions for the %ice_attribute_regist
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_short ice_attribute_regist_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ice_attribute_regist_type, wchar_t > ice_attribute_regist_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ice_attribute_regist_type&
    ice_attribute_regist () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ice_attribute_regist_type&
    ice_attribute_regist ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ice_attribute_regist (const ice_attribute_regist_type& x);

    //@}

    /**
     * @name item_drop_id_1
     *
     * @brief Accessor and modifier functions for the %item_drop_id_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int item_drop_id_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< item_drop_id_1_type, wchar_t > item_drop_id_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const item_drop_id_1_type&
    item_drop_id_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    item_drop_id_1_type&
    item_drop_id_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    item_drop_id_1 (const item_drop_id_1_type& x);

    //@}

    /**
     * @name item_drop_id_2
     *
     * @brief Accessor and modifier functions for the %item_drop_id_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int item_drop_id_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< item_drop_id_2_type, wchar_t > item_drop_id_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const item_drop_id_2_type&
    item_drop_id_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    item_drop_id_2_type&
    item_drop_id_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    item_drop_id_2 (const item_drop_id_2_type& x);

    //@}

    /**
     * @name world_drop_suffix_id_1
     *
     * @brief Accessor and modifier functions for the %world_drop_suffix_id_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int world_drop_suffix_id_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< world_drop_suffix_id_1_type, wchar_t > world_drop_suffix_id_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const world_drop_suffix_id_1_type&
    world_drop_suffix_id_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    world_drop_suffix_id_1_type&
    world_drop_suffix_id_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    world_drop_suffix_id_1 (const world_drop_suffix_id_1_type& x);

    //@}

    /**
     * @name world_drop_suffix_id_2
     *
     * @brief Accessor and modifier functions for the %world_drop_suffix_id_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int world_drop_suffix_id_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< world_drop_suffix_id_2_type, wchar_t > world_drop_suffix_id_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const world_drop_suffix_id_2_type&
    world_drop_suffix_id_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    world_drop_suffix_id_2_type&
    world_drop_suffix_id_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    world_drop_suffix_id_2 (const world_drop_suffix_id_2_type& x);

    //@}

    /**
     * @name ai_script_name
     *
     * @brief Accessor and modifier functions for the %ai_script_name
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string ai_script_name_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_script_name_type, wchar_t > ai_script_name_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_script_name_type&
    ai_script_name () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_script_name_type&
    ai_script_name ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_script_name (const ai_script_name_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    ai_script_name (::std::unique_ptr< ai_script_name_type > p);

    //@}

    /**
     * @name ai_script_param_1
     *
     * @brief Accessor and modifier functions for the %ai_script_param_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_script_param_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_script_param_1_type, wchar_t > ai_script_param_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_script_param_1_type&
    ai_script_param_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_script_param_1_type&
    ai_script_param_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_script_param_1 (const ai_script_param_1_type& x);

    //@}

    /**
     * @name ai_script_param_2
     *
     * @brief Accessor and modifier functions for the %ai_script_param_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_script_param_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_script_param_2_type, wchar_t > ai_script_param_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_script_param_2_type&
    ai_script_param_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_script_param_2_type&
    ai_script_param_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_script_param_2 (const ai_script_param_2_type& x);

    //@}

    /**
     * @name ai_script_param_3
     *
     * @brief Accessor and modifier functions for the %ai_script_param_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_script_param_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_script_param_3_type, wchar_t > ai_script_param_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_script_param_3_type&
    ai_script_param_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_script_param_3_type&
    ai_script_param_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_script_param_3 (const ai_script_param_3_type& x);

    //@}

    /**
     * @name ai_script_param_4
     *
     * @brief Accessor and modifier functions for the %ai_script_param_4
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_script_param_4_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_script_param_4_type, wchar_t > ai_script_param_4_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_script_param_4_type&
    ai_script_param_4 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_script_param_4_type&
    ai_script_param_4 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_script_param_4 (const ai_script_param_4_type& x);

    //@}

    /**
     * @name ai_reactive_type
     *
     * @brief Accessor and modifier functions for the %ai_reactive_type
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::ai_reactive_type_t ai_reactive_type_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_reactive_type_type, wchar_t > ai_reactive_type_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_reactive_type_type&
    ai_reactive_type () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_reactive_type_type&
    ai_reactive_type ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_reactive_type (const ai_reactive_type_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    ai_reactive_type (::std::unique_ptr< ai_reactive_type_type > p);

    //@}

    /**
     * @name ai_reactive_distance
     *
     * @brief Accessor and modifier functions for the %ai_reactive_distance
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_reactive_distance_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_reactive_distance_type, wchar_t > ai_reactive_distance_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_reactive_distance_type&
    ai_reactive_distance () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_reactive_distance_type&
    ai_reactive_distance ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_reactive_distance (const ai_reactive_distance_type& x);

    //@}

    /**
     * @name ai_min_approach_distance
     *
     * @brief Accessor and modifier functions for the %ai_min_approach_distance
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_min_approach_distance_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_min_approach_distance_type, wchar_t > ai_min_approach_distance_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_min_approach_distance_type&
    ai_min_approach_distance () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_min_approach_distance_type&
    ai_min_approach_distance ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_min_approach_distance (const ai_min_approach_distance_type& x);

    //@}

    /**
     * @name ai_max_approach_distance
     *
     * @brief Accessor and modifier functions for the %ai_max_approach_distance
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_max_approach_distance_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_max_approach_distance_type, wchar_t > ai_max_approach_distance_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_max_approach_distance_type&
    ai_max_approach_distance () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_max_approach_distance_type&
    ai_max_approach_distance ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_max_approach_distance (const ai_max_approach_distance_type& x);

    //@}

    /**
     * @name ai_wander_distance
     *
     * @brief Accessor and modifier functions for the %ai_wander_distance
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_wander_distance_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_wander_distance_type, wchar_t > ai_wander_distance_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_wander_distance_type&
    ai_wander_distance () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_wander_distance_type&
    ai_wander_distance ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_wander_distance (const ai_wander_distance_type& x);

    //@}

    /**
     * @name ai_walk_speed
     *
     * @brief Accessor and modifier functions for the %ai_walk_speed
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_walk_speed_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_walk_speed_type, wchar_t > ai_walk_speed_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_walk_speed_type&
    ai_walk_speed () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_walk_speed_type&
    ai_walk_speed ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_walk_speed (const ai_walk_speed_type& x);

    //@}

    /**
     * @name ai_min_walk_delay
     *
     * @brief Accessor and modifier functions for the %ai_min_walk_delay
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_min_walk_delay_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_min_walk_delay_type, wchar_t > ai_min_walk_delay_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_min_walk_delay_type&
    ai_min_walk_delay () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_min_walk_delay_type&
    ai_min_walk_delay ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_min_walk_delay (const ai_min_walk_delay_type& x);

    //@}

    /**
     * @name ai_max_walk_delay
     *
     * @brief Accessor and modifier functions for the %ai_max_walk_delay
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_max_walk_delay_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_max_walk_delay_type, wchar_t > ai_max_walk_delay_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_max_walk_delay_type&
    ai_max_walk_delay () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_max_walk_delay_type&
    ai_max_walk_delay ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_max_walk_delay (const ai_max_walk_delay_type& x);

    //@}

    /**
     * @name ai_max_move_distance
     *
     * @brief Accessor and modifier functions for the %ai_max_move_distance
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_max_move_distance_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_max_move_distance_type, wchar_t > ai_max_move_distance_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_max_move_distance_type&
    ai_max_move_distance () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_max_move_distance_type&
    ai_max_move_distance ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_max_move_distance (const ai_max_move_distance_type& x);

    //@}

    /**
     * @name ai_run_speed
     *
     * @brief Accessor and modifier functions for the %ai_run_speed
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_run_speed_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_run_speed_type, wchar_t > ai_run_speed_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_run_speed_type&
    ai_run_speed () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_run_speed_type&
    ai_run_speed ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_run_speed (const ai_run_speed_type& x);

    //@}

    /**
     * @name ai_link_type
     *
     * @brief Accessor and modifier functions for the %ai_link_type
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte ai_link_type_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_link_type_type, wchar_t > ai_link_type_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_link_type_type&
    ai_link_type () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_link_type_type&
    ai_link_type ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_link_type (const ai_link_type_type& x);

    //@}

    /**
     * @name ai_link_reactive_distance
     *
     * @brief Accessor and modifier functions for the %ai_link_reactive_distance
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int ai_link_reactive_distance_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_link_reactive_distance_type, wchar_t > ai_link_reactive_distance_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_link_reactive_distance_type&
    ai_link_reactive_distance () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_link_reactive_distance_type&
    ai_link_reactive_distance ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_link_reactive_distance (const ai_link_reactive_distance_type& x);

    //@}

    /**
     * @name ai_link_min_count
     *
     * @brief Accessor and modifier functions for the %ai_link_min_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte ai_link_min_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_link_min_count_type, wchar_t > ai_link_min_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_link_min_count_type&
    ai_link_min_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_link_min_count_type&
    ai_link_min_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_link_min_count (const ai_link_min_count_type& x);

    //@}

    /**
     * @name ai_link_max_count
     *
     * @brief Accessor and modifier functions for the %ai_link_max_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte ai_link_max_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< ai_link_max_count_type, wchar_t > ai_link_max_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const ai_link_max_count_type&
    ai_link_max_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    ai_link_max_count_type&
    ai_link_max_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    ai_link_max_count (const ai_link_max_count_type& x);

    //@}

    /**
     * @name main_skill_code
     *
     * @brief Accessor and modifier functions for the %main_skill_code
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::any_skill_code_t main_skill_code_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< main_skill_code_type, wchar_t > main_skill_code_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const main_skill_code_type&
    main_skill_code () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    main_skill_code_type&
    main_skill_code ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    main_skill_code (const main_skill_code_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    main_skill_code (::std::unique_ptr< main_skill_code_type > p);

    //@}

    /**
     * @name sub_skill_code
     *
     * @brief Accessor and modifier functions for the %sub_skill_code
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::any_skill_code_t sub_skill_code_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< sub_skill_code_type, wchar_t > sub_skill_code_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const sub_skill_code_type&
    sub_skill_code () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    sub_skill_code_type&
    sub_skill_code ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    sub_skill_code (const sub_skill_code_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    sub_skill_code (::std::unique_ptr< sub_skill_code_type > p);

    //@}

    /**
     * @name special_skill_1
     *
     * @brief Accessor and modifier functions for the %special_skill_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::any_skill_code_t special_skill_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< special_skill_1_type, wchar_t > special_skill_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const special_skill_1_type&
    special_skill_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    special_skill_1_type&
    special_skill_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    special_skill_1 (const special_skill_1_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    special_skill_1 (::std::unique_ptr< special_skill_1_type > p);

    //@}

    /**
     * @name special_skill_rate_1
     *
     * @brief Accessor and modifier functions for the %special_skill_rate_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int special_skill_rate_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< special_skill_rate_1_type, wchar_t > special_skill_rate_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const special_skill_rate_1_type&
    special_skill_rate_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    special_skill_rate_1_type&
    special_skill_rate_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    special_skill_rate_1 (const special_skill_rate_1_type& x);

    //@}

    /**
     * @name special_skill_2
     *
     * @brief Accessor and modifier functions for the %special_skill_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::any_skill_code_t special_skill_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< special_skill_2_type, wchar_t > special_skill_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const special_skill_2_type&
    special_skill_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    special_skill_2_type&
    special_skill_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    special_skill_2 (const special_skill_2_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    special_skill_2 (::std::unique_ptr< special_skill_2_type > p);

    //@}

    /**
     * @name special_skill_rate_2
     *
     * @brief Accessor and modifier functions for the %special_skill_rate_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int special_skill_rate_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< special_skill_rate_2_type, wchar_t > special_skill_rate_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const special_skill_rate_2_type&
    special_skill_rate_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    special_skill_rate_2_type&
    special_skill_rate_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    special_skill_rate_2 (const special_skill_rate_2_type& x);

    //@}

    /**
     * @name special_skill_3
     *
     * @brief Accessor and modifier functions for the %special_skill_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::any_skill_code_t special_skill_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< special_skill_3_type, wchar_t > special_skill_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const special_skill_3_type&
    special_skill_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    special_skill_3_type&
    special_skill_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    special_skill_3 (const special_skill_3_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    special_skill_3 (::std::unique_ptr< special_skill_3_type > p);

    //@}

    /**
     * @name special_skill_rate_3
     *
     * @brief Accessor and modifier functions for the %special_skill_rate_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int special_skill_rate_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< special_skill_rate_3_type, wchar_t > special_skill_rate_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const special_skill_rate_3_type&
    special_skill_rate_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    special_skill_rate_3_type&
    special_skill_rate_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    special_skill_rate_3 (const special_skill_rate_3_type& x);

    //@}

    /**
     * @name threat_effect
     *
     * @brief Accessor and modifier functions for the %threat_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string threat_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< threat_effect_type, wchar_t > threat_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const threat_effect_type&
    threat_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    threat_effect_type&
    threat_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    threat_effect (const threat_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    threat_effect (::std::unique_ptr< threat_effect_type > p);

    //@}

    /**
     * @name death_effect
     *
     * @brief Accessor and modifier functions for the %death_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string death_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< death_effect_type, wchar_t > death_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const death_effect_type&
    death_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    death_effect_type&
    death_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    death_effect (const death_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    death_effect (::std::unique_ptr< death_effect_type > p);

    //@}

    /**
     * @name death_delay_time
     *
     * @brief Accessor and modifier functions for the %death_delay_time
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int death_delay_time_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< death_delay_time_type, wchar_t > death_delay_time_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const death_delay_time_type&
    death_delay_time () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    death_delay_time_type&
    death_delay_time ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    death_delay_time (const death_delay_time_type& x);

    //@}

    /**
     * @name spawn_effect
     *
     * @brief Accessor and modifier functions for the %spawn_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string spawn_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< spawn_effect_type, wchar_t > spawn_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const spawn_effect_type&
    spawn_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    spawn_effect_type&
    spawn_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    spawn_effect (const spawn_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    spawn_effect (::std::unique_ptr< spawn_effect_type > p);

    //@}

    /**
     * @name spawn_interval_sec
     *
     * @brief Accessor and modifier functions for the %spawn_interval_sec
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int spawn_interval_sec_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< spawn_interval_sec_type, wchar_t > spawn_interval_sec_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const spawn_interval_sec_type&
    spawn_interval_sec () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    spawn_interval_sec_type&
    spawn_interval_sec ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    spawn_interval_sec (const spawn_interval_sec_type& x);

    //@}

    /**
     * @name peace_effect
     *
     * @brief Accessor and modifier functions for the %peace_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string peace_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< peace_effect_type, wchar_t > peace_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const peace_effect_type&
    peace_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    peace_effect_type&
    peace_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    peace_effect (const peace_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    peace_effect (::std::unique_ptr< peace_effect_type > p);

    //@}

    /**
     * @name peace_light_rgb_value
     *
     * @brief Accessor and modifier functions for the %peace_light_rgb_value
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::float_list_t peace_light_rgb_value_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< peace_light_rgb_value_type, wchar_t > peace_light_rgb_value_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const peace_light_rgb_value_type&
    peace_light_rgb_value () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    peace_light_rgb_value_type&
    peace_light_rgb_value ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    peace_light_rgb_value (const peace_light_rgb_value_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    peace_light_rgb_value (::std::unique_ptr< peace_light_rgb_value_type > p);

    //@}

    /**
     * @name peace_light_value
     *
     * @brief Accessor and modifier functions for the %peace_light_value
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::float_ peace_light_value_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< peace_light_value_type, wchar_t > peace_light_value_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const peace_light_value_type&
    peace_light_value () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    peace_light_value_type&
    peace_light_value ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    peace_light_value (const peace_light_value_type& x);

    //@}

    /**
     * @name peace_light_range_value
     *
     * @brief Accessor and modifier functions for the %peace_light_range_value
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::float_ peace_light_range_value_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< peace_light_range_value_type, wchar_t > peace_light_range_value_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const peace_light_range_value_type&
    peace_light_range_value () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    peace_light_range_value_type&
    peace_light_range_value ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    peace_light_range_value (const peace_light_range_value_type& x);

    //@}

    /**
     * @name peace_light_mount_point
     *
     * @brief Accessor and modifier functions for the %peace_light_mount_point
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte peace_light_mount_point_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< peace_light_mount_point_type, wchar_t > peace_light_mount_point_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const peace_light_mount_point_type&
    peace_light_mount_point () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    peace_light_mount_point_type&
    peace_light_mount_point ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    peace_light_mount_point (const peace_light_mount_point_type& x);

    //@}

    /**
     * @name combat_effect
     *
     * @brief Accessor and modifier functions for the %combat_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string combat_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< combat_effect_type, wchar_t > combat_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const combat_effect_type&
    combat_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    combat_effect_type&
    combat_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    combat_effect (const combat_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    combat_effect (::std::unique_ptr< combat_effect_type > p);

    //@}

    /**
     * @name combat_light_rgb_value
     *
     * @brief Accessor and modifier functions for the %combat_light_rgb_value
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::float_list_t combat_light_rgb_value_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< combat_light_rgb_value_type, wchar_t > combat_light_rgb_value_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const combat_light_rgb_value_type&
    combat_light_rgb_value () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    combat_light_rgb_value_type&
    combat_light_rgb_value ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    combat_light_rgb_value (const combat_light_rgb_value_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    combat_light_rgb_value (::std::unique_ptr< combat_light_rgb_value_type > p);

    //@}

    /**
     * @name combat_light_value
     *
     * @brief Accessor and modifier functions for the %combat_light_value
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::float_ combat_light_value_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< combat_light_value_type, wchar_t > combat_light_value_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const combat_light_value_type&
    combat_light_value () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    combat_light_value_type&
    combat_light_value ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    combat_light_value (const combat_light_value_type& x);

    //@}

    /**
     * @name combat_light_range_value
     *
     * @brief Accessor and modifier functions for the %combat_light_range_value
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::float_ combat_light_range_value_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< combat_light_range_value_type, wchar_t > combat_light_range_value_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const combat_light_range_value_type&
    combat_light_range_value () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    combat_light_range_value_type&
    combat_light_range_value ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    combat_light_range_value (const combat_light_range_value_type& x);

    //@}

    /**
     * @name combat_light_mount_point
     *
     * @brief Accessor and modifier functions for the %combat_light_mount_point
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte combat_light_mount_point_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< combat_light_mount_point_type, wchar_t > combat_light_mount_point_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const combat_light_mount_point_type&
    combat_light_mount_point () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    combat_light_mount_point_type&
    combat_light_mount_point ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    combat_light_mount_point (const combat_light_mount_point_type& x);

    //@}

    /**
     * @name hit_sound
     *
     * @brief Accessor and modifier functions for the %hit_sound
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string hit_sound_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< hit_sound_type, wchar_t > hit_sound_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const hit_sound_type&
    hit_sound () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    hit_sound_type&
    hit_sound ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    hit_sound (const hit_sound_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    hit_sound (::std::unique_ptr< hit_sound_type > p);

    //@}

    /**
     * @name dodge_sound
     *
     * @brief Accessor and modifier functions for the %dodge_sound
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string dodge_sound_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< dodge_sound_type, wchar_t > dodge_sound_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const dodge_sound_type&
    dodge_sound () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    dodge_sound_type&
    dodge_sound ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    dodge_sound (const dodge_sound_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    dodge_sound (::std::unique_ptr< dodge_sound_type > p);

    //@}

    /**
     * @name walk_sound
     *
     * @brief Accessor and modifier functions for the %walk_sound
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string walk_sound_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< walk_sound_type, wchar_t > walk_sound_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const walk_sound_type&
    walk_sound () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    walk_sound_type&
    walk_sound ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    walk_sound (const walk_sound_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    walk_sound (::std::unique_ptr< walk_sound_type > p);

    //@}

    /**
     * @name run_sound
     *
     * @brief Accessor and modifier functions for the %run_sound
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string run_sound_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< run_sound_type, wchar_t > run_sound_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const run_sound_type&
    run_sound () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    run_sound_type&
    run_sound ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    run_sound (const run_sound_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    run_sound (::std::unique_ptr< run_sound_type > p);

    //@}

    /**
     * @name aggressive_sound
     *
     * @brief Accessor and modifier functions for the %aggressive_sound
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string aggressive_sound_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< aggressive_sound_type, wchar_t > aggressive_sound_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const aggressive_sound_type&
    aggressive_sound () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    aggressive_sound_type&
    aggressive_sound ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    aggressive_sound (const aggressive_sound_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    aggressive_sound (::std::unique_ptr< aggressive_sound_type > p);

    //@}

    /**
     * @name weapon_material_type
     *
     * @brief Accessor and modifier functions for the %weapon_material_type
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte weapon_material_type_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< weapon_material_type_type, wchar_t > weapon_material_type_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const weapon_material_type_type&
    weapon_material_type () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    weapon_material_type_type&
    weapon_material_type ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    weapon_material_type (const weapon_material_type_type& x);

    //@}

    /**
     * @name armor_material_type
     *
     * @brief Accessor and modifier functions for the %armor_material_type
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte armor_material_type_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< armor_material_type_type, wchar_t > armor_material_type_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const armor_material_type_type&
    armor_material_type () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    armor_material_type_type&
    armor_material_type ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    armor_material_type (const armor_material_type_type& x);

    //@}

    /**
     * @name use_datacode_mesh_hidden
     *
     * @brief Accessor and modifier functions for the %use_datacode_mesh_hidden
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean use_datacode_mesh_hidden_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< use_datacode_mesh_hidden_type, wchar_t > use_datacode_mesh_hidden_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const use_datacode_mesh_hidden_type&
    use_datacode_mesh_hidden () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    use_datacode_mesh_hidden_type&
    use_datacode_mesh_hidden ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    use_datacode_mesh_hidden (const use_datacode_mesh_hidden_type& x);

    //@}

    /**
     * @name npc_hair
     *
     * @brief Accessor and modifier functions for the %npc_hair
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_hair_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_hair_type, wchar_t > npc_hair_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_hair_type&
    npc_hair () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_hair_type&
    npc_hair ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_hair (const npc_hair_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_hair (::std::unique_ptr< npc_hair_type > p);

    //@}

    /**
     * @name npc_face
     *
     * @brief Accessor and modifier functions for the %npc_face
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_face_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_face_type, wchar_t > npc_face_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_face_type&
    npc_face () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_face_type&
    npc_face ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_face (const npc_face_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_face (::std::unique_ptr< npc_face_type > p);

    //@}

    /**
     * @name npc_eyes
     *
     * @brief Accessor and modifier functions for the %npc_eyes
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_eyes_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_eyes_type, wchar_t > npc_eyes_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_eyes_type&
    npc_eyes () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_eyes_type&
    npc_eyes ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_eyes (const npc_eyes_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_eyes (::std::unique_ptr< npc_eyes_type > p);

    //@}

    /**
     * @name npc_tooth
     *
     * @brief Accessor and modifier functions for the %npc_tooth
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_tooth_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_tooth_type, wchar_t > npc_tooth_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_tooth_type&
    npc_tooth () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_tooth_type&
    npc_tooth ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_tooth (const npc_tooth_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_tooth (::std::unique_ptr< npc_tooth_type > p);

    //@}

    /**
     * @name npc_upper_body
     *
     * @brief Accessor and modifier functions for the %npc_upper_body
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_upper_body_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_upper_body_type, wchar_t > npc_upper_body_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_upper_body_type&
    npc_upper_body () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_upper_body_type&
    npc_upper_body ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_upper_body (const npc_upper_body_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_upper_body (::std::unique_ptr< npc_upper_body_type > p);

    //@}

    /**
     * @name npc_lower_body
     *
     * @brief Accessor and modifier functions for the %npc_lower_body
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_lower_body_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_lower_body_type, wchar_t > npc_lower_body_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_lower_body_type&
    npc_lower_body () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_lower_body_type&
    npc_lower_body ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_lower_body (const npc_lower_body_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_lower_body (::std::unique_ptr< npc_lower_body_type > p);

    //@}

    /**
     * @name npc_hand
     *
     * @brief Accessor and modifier functions for the %npc_hand
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_hand_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_hand_type, wchar_t > npc_hand_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_hand_type&
    npc_hand () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_hand_type&
    npc_hand ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_hand (const npc_hand_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_hand (::std::unique_ptr< npc_hand_type > p);

    //@}

    /**
     * @name npc_foot
     *
     * @brief Accessor and modifier functions for the %npc_foot
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_foot_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_foot_type, wchar_t > npc_foot_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_foot_type&
    npc_foot () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_foot_type&
    npc_foot ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_foot (const npc_foot_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_foot (::std::unique_ptr< npc_foot_type > p);

    //@}

    /**
     * @name npc_uppper_underwear
     *
     * @brief Accessor and modifier functions for the %npc_uppper_underwear
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_uppper_underwear_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_uppper_underwear_type, wchar_t > npc_uppper_underwear_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_uppper_underwear_type&
    npc_uppper_underwear () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_uppper_underwear_type&
    npc_uppper_underwear ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_uppper_underwear (const npc_uppper_underwear_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_uppper_underwear (::std::unique_ptr< npc_uppper_underwear_type > p);

    //@}

    /**
     * @name npc_lower_underwear
     *
     * @brief Accessor and modifier functions for the %npc_lower_underwear
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_lower_underwear_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_lower_underwear_type, wchar_t > npc_lower_underwear_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_lower_underwear_type&
    npc_lower_underwear () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_lower_underwear_type&
    npc_lower_underwear ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_lower_underwear (const npc_lower_underwear_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_lower_underwear (::std::unique_ptr< npc_lower_underwear_type > p);

    //@}

    /**
     * @name npc_helmet
     *
     * @brief Accessor and modifier functions for the %npc_helmet
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::equip_code_t npc_helmet_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_helmet_type, wchar_t > npc_helmet_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_helmet_type&
    npc_helmet () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_helmet_type&
    npc_helmet ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_helmet (const npc_helmet_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_helmet (::std::unique_ptr< npc_helmet_type > p);

    //@}

    /**
     * @name npc_shoulder
     *
     * @brief Accessor and modifier functions for the %npc_shoulder
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::equip_code_t npc_shoulder_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_shoulder_type, wchar_t > npc_shoulder_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_shoulder_type&
    npc_shoulder () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_shoulder_type&
    npc_shoulder ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_shoulder (const npc_shoulder_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_shoulder (::std::unique_ptr< npc_shoulder_type > p);

    //@}

    /**
     * @name npc_torso
     *
     * @brief Accessor and modifier functions for the %npc_torso
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::equip_code_t npc_torso_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_torso_type, wchar_t > npc_torso_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_torso_type&
    npc_torso () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_torso_type&
    npc_torso ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_torso (const npc_torso_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_torso (::std::unique_ptr< npc_torso_type > p);

    //@}

    /**
     * @name npc_belt
     *
     * @brief Accessor and modifier functions for the %npc_belt
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::equip_code_t npc_belt_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_belt_type, wchar_t > npc_belt_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_belt_type&
    npc_belt () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_belt_type&
    npc_belt ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_belt (const npc_belt_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_belt (::std::unique_ptr< npc_belt_type > p);

    //@}

    /**
     * @name npc_pants
     *
     * @brief Accessor and modifier functions for the %npc_pants
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::equip_code_t npc_pants_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_pants_type, wchar_t > npc_pants_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_pants_type&
    npc_pants () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_pants_type&
    npc_pants ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_pants (const npc_pants_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_pants (::std::unique_ptr< npc_pants_type > p);

    //@}

    /**
     * @name npc_greave
     *
     * @brief Accessor and modifier functions for the %npc_greave
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::equip_code_t npc_greave_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_greave_type, wchar_t > npc_greave_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_greave_type&
    npc_greave () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_greave_type&
    npc_greave ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_greave (const npc_greave_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_greave (::std::unique_ptr< npc_greave_type > p);

    //@}

    /**
     * @name npc_glove
     *
     * @brief Accessor and modifier functions for the %npc_glove
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::equip_code_t npc_glove_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_glove_type, wchar_t > npc_glove_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_glove_type&
    npc_glove () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_glove_type&
    npc_glove ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_glove (const npc_glove_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_glove (::std::unique_ptr< npc_glove_type > p);

    //@}

    /**
     * @name npc_shoes
     *
     * @brief Accessor and modifier functions for the %npc_shoes
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::equip_code_t npc_shoes_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_shoes_type, wchar_t > npc_shoes_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_shoes_type&
    npc_shoes () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_shoes_type&
    npc_shoes ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_shoes (const npc_shoes_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_shoes (::std::unique_ptr< npc_shoes_type > p);

    //@}

    /**
     * @name npc_righthand
     *
     * @brief Accessor and modifier functions for the %npc_righthand
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::equip_code_t npc_righthand_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_righthand_type, wchar_t > npc_righthand_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_righthand_type&
    npc_righthand () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_righthand_type&
    npc_righthand ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_righthand (const npc_righthand_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_righthand (::std::unique_ptr< npc_righthand_type > p);

    //@}

    /**
     * @name npc_lefthand
     *
     * @brief Accessor and modifier functions for the %npc_lefthand
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::equip_code_t npc_lefthand_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_lefthand_type, wchar_t > npc_lefthand_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_lefthand_type&
    npc_lefthand () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_lefthand_type&
    npc_lefthand ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_lefthand (const npc_lefthand_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_lefthand (::std::unique_ptr< npc_lefthand_type > p);

    //@}

    /**
     * @name use_mesh_hidden
     *
     * @brief Accessor and modifier functions for the %use_mesh_hidden
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean use_mesh_hidden_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< use_mesh_hidden_type, wchar_t > use_mesh_hidden_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const use_mesh_hidden_type&
    use_mesh_hidden () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    use_mesh_hidden_type&
    use_mesh_hidden ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    use_mesh_hidden (const use_mesh_hidden_type& x);

    //@}

    /**
     * @name use_mesh_hidden_count
     *
     * @brief Accessor and modifier functions for the %use_mesh_hidden_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte use_mesh_hidden_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< use_mesh_hidden_count_type, wchar_t > use_mesh_hidden_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const use_mesh_hidden_count_type&
    use_mesh_hidden_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    use_mesh_hidden_count_type&
    use_mesh_hidden_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    use_mesh_hidden_count (const use_mesh_hidden_count_type& x);

    //@}

    /**
     * @name npc_mesh_helmet
     *
     * @brief Accessor and modifier functions for the %npc_mesh_helmet
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_mesh_helmet_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_mesh_helmet_type, wchar_t > npc_mesh_helmet_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_mesh_helmet_type&
    npc_mesh_helmet () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_mesh_helmet_type&
    npc_mesh_helmet ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_mesh_helmet (const npc_mesh_helmet_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_mesh_helmet (::std::unique_ptr< npc_mesh_helmet_type > p);

    //@}

    /**
     * @name npc_mesh_shoulder
     *
     * @brief Accessor and modifier functions for the %npc_mesh_shoulder
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_mesh_shoulder_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_mesh_shoulder_type, wchar_t > npc_mesh_shoulder_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_mesh_shoulder_type&
    npc_mesh_shoulder () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_mesh_shoulder_type&
    npc_mesh_shoulder ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_mesh_shoulder (const npc_mesh_shoulder_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_mesh_shoulder (::std::unique_ptr< npc_mesh_shoulder_type > p);

    //@}

    /**
     * @name npc_mesh_torso
     *
     * @brief Accessor and modifier functions for the %npc_mesh_torso
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_mesh_torso_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_mesh_torso_type, wchar_t > npc_mesh_torso_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_mesh_torso_type&
    npc_mesh_torso () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_mesh_torso_type&
    npc_mesh_torso ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_mesh_torso (const npc_mesh_torso_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_mesh_torso (::std::unique_ptr< npc_mesh_torso_type > p);

    //@}

    /**
     * @name npc_mesh_belt
     *
     * @brief Accessor and modifier functions for the %npc_mesh_belt
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_mesh_belt_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_mesh_belt_type, wchar_t > npc_mesh_belt_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_mesh_belt_type&
    npc_mesh_belt () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_mesh_belt_type&
    npc_mesh_belt ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_mesh_belt (const npc_mesh_belt_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_mesh_belt (::std::unique_ptr< npc_mesh_belt_type > p);

    //@}

    /**
     * @name npc_mesh_pants
     *
     * @brief Accessor and modifier functions for the %npc_mesh_pants
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_mesh_pants_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_mesh_pants_type, wchar_t > npc_mesh_pants_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_mesh_pants_type&
    npc_mesh_pants () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_mesh_pants_type&
    npc_mesh_pants ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_mesh_pants (const npc_mesh_pants_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_mesh_pants (::std::unique_ptr< npc_mesh_pants_type > p);

    //@}

    /**
     * @name npc_mesh_greave
     *
     * @brief Accessor and modifier functions for the %npc_mesh_greave
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_mesh_greave_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_mesh_greave_type, wchar_t > npc_mesh_greave_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_mesh_greave_type&
    npc_mesh_greave () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_mesh_greave_type&
    npc_mesh_greave ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_mesh_greave (const npc_mesh_greave_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_mesh_greave (::std::unique_ptr< npc_mesh_greave_type > p);

    //@}

    /**
     * @name npc_mesh_glove
     *
     * @brief Accessor and modifier functions for the %npc_mesh_glove
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_mesh_glove_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_mesh_glove_type, wchar_t > npc_mesh_glove_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_mesh_glove_type&
    npc_mesh_glove () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_mesh_glove_type&
    npc_mesh_glove ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_mesh_glove (const npc_mesh_glove_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_mesh_glove (::std::unique_ptr< npc_mesh_glove_type > p);

    //@}

    /**
     * @name npc_mesh_shoes
     *
     * @brief Accessor and modifier functions for the %npc_mesh_shoes
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_mesh_shoes_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_mesh_shoes_type, wchar_t > npc_mesh_shoes_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_mesh_shoes_type&
    npc_mesh_shoes () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_mesh_shoes_type&
    npc_mesh_shoes ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_mesh_shoes (const npc_mesh_shoes_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_mesh_shoes (::std::unique_ptr< npc_mesh_shoes_type > p);

    //@}

    /**
     * @name npc_mesh_righthand
     *
     * @brief Accessor and modifier functions for the %npc_mesh_righthand
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_mesh_righthand_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_mesh_righthand_type, wchar_t > npc_mesh_righthand_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_mesh_righthand_type&
    npc_mesh_righthand () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_mesh_righthand_type&
    npc_mesh_righthand ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_mesh_righthand (const npc_mesh_righthand_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_mesh_righthand (::std::unique_ptr< npc_mesh_righthand_type > p);

    //@}

    /**
     * @name npc_mesh_lefthand
     *
     * @brief Accessor and modifier functions for the %npc_mesh_lefthand
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string npc_mesh_lefthand_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_mesh_lefthand_type, wchar_t > npc_mesh_lefthand_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_mesh_lefthand_type&
    npc_mesh_lefthand () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_mesh_lefthand_type&
    npc_mesh_lefthand ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_mesh_lefthand (const npc_mesh_lefthand_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    npc_mesh_lefthand (::std::unique_ptr< npc_mesh_lefthand_type > p);

    //@}

    /**
     * @name quest_function
     *
     * @brief Accessor and modifier functions for the %quest_function
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean quest_function_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< quest_function_type, wchar_t > quest_function_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const quest_function_type&
    quest_function () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    quest_function_type&
    quest_function ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    quest_function (const quest_function_type& x);

    //@}

    /**
     * @name introduce_talk
     *
     * @brief Accessor and modifier functions for the %introduce_talk
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string introduce_talk_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< introduce_talk_type, wchar_t > introduce_talk_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const introduce_talk_type&
    introduce_talk () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    introduce_talk_type&
    introduce_talk ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    introduce_talk (const introduce_talk_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    introduce_talk (::std::unique_ptr< introduce_talk_type > p);

    //@}

    /**
     * @name show_head_name
     *
     * @brief Accessor and modifier functions for the %show_head_name
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean show_head_name_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< show_head_name_type, wchar_t > show_head_name_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const show_head_name_type&
    show_head_name () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    show_head_name_type&
    show_head_name ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    show_head_name (const show_head_name_type& x);

    //@}

    /**
     * @name show_preview
     *
     * @brief Accessor and modifier functions for the %show_preview
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean show_preview_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< show_preview_type, wchar_t > show_preview_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const show_preview_type&
    show_preview () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    show_preview_type&
    show_preview ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    show_preview (const show_preview_type& x);

    //@}

    /**
     * @name bank_function
     *
     * @brief Accessor and modifier functions for the %bank_function
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean bank_function_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< bank_function_type, wchar_t > bank_function_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const bank_function_type&
    bank_function () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    bank_function_type&
    bank_function ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    bank_function (const bank_function_type& x);

    //@}

    /**
     * @name buy_function
     *
     * @brief Accessor and modifier functions for the %buy_function
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean buy_function_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< buy_function_type, wchar_t > buy_function_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const buy_function_type&
    buy_function () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    buy_function_type&
    buy_function ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    buy_function (const buy_function_type& x);

    //@}

    /**
     * @name sell_function
     *
     * @brief Accessor and modifier functions for the %sell_function
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean sell_function_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< sell_function_type, wchar_t > sell_function_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const sell_function_type&
    sell_function () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    sell_function_type&
    sell_function ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    sell_function (const sell_function_type& x);

    //@}

    /**
     * @name mail_function
     *
     * @brief Accessor and modifier functions for the %mail_function
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean mail_function_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< mail_function_type, wchar_t > mail_function_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const mail_function_type&
    mail_function () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    mail_function_type&
    mail_function ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    mail_function (const mail_function_type& x);

    //@}

    /**
     * @name auction_function
     *
     * @brief Accessor and modifier functions for the %auction_function
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean auction_function_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< auction_function_type, wchar_t > auction_function_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const auction_function_type&
    auction_function () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    auction_function_type&
    auction_function ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    auction_function (const auction_function_type& x);

    //@}

    /**
     * @name guild_function
     *
     * @brief Accessor and modifier functions for the %guild_function
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean guild_function_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< guild_function_type, wchar_t > guild_function_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const guild_function_type&
    guild_function () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    guild_function_type&
    guild_function ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    guild_function (const guild_function_type& x);

    //@}

    /**
     * @name glider_repair_function
     *
     * @brief Accessor and modifier functions for the %glider_repair_function
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean glider_repair_function_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< glider_repair_function_type, wchar_t > glider_repair_function_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const glider_repair_function_type&
    glider_repair_function () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    glider_repair_function_type&
    glider_repair_function ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    glider_repair_function (const glider_repair_function_type& x);

    //@}

    /**
     * @name craft_function
     *
     * @brief Accessor and modifier functions for the %craft_function
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::craft_type_t craft_function_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< craft_function_type, wchar_t > craft_function_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const craft_function_type&
    craft_function () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    craft_function_type&
    craft_function ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    craft_function (const craft_function_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    craft_function (::std::unique_ptr< craft_function_type > p);

    //@}

    /**
     * @name npc_rotate
     *
     * @brief Accessor and modifier functions for the %npc_rotate
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean npc_rotate_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_rotate_type, wchar_t > npc_rotate_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const npc_rotate_type&
    npc_rotate () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    npc_rotate_type&
    npc_rotate ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    npc_rotate (const npc_rotate_type& x);

    //@}

    /**
     * @name subRootAnim_chance
     *
     * @brief Accessor and modifier functions for the %subRootAnim_chance
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int subRootAnim_chance_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< subRootAnim_chance_type, wchar_t > subRootAnim_chance_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const subRootAnim_chance_type&
    subRootAnim_chance () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    subRootAnim_chance_type&
    subRootAnim_chance ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    subRootAnim_chance (const subRootAnim_chance_type& x);

    //@}

    /**
     * @name subRootAnim_max_time
     *
     * @brief Accessor and modifier functions for the %subRootAnim_max_time
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int subRootAnim_max_time_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< subRootAnim_max_time_type, wchar_t > subRootAnim_max_time_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const subRootAnim_max_time_type&
    subRootAnim_max_time () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    subRootAnim_max_time_type&
    subRootAnim_max_time ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    subRootAnim_max_time (const subRootAnim_max_time_type& x);

    //@}

    /**
     * @name subRootAnim_min_time
     *
     * @brief Accessor and modifier functions for the %subRootAnim_min_time
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int subRootAnim_min_time_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< subRootAnim_min_time_type, wchar_t > subRootAnim_min_time_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const subRootAnim_min_time_type&
    subRootAnim_min_time () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    subRootAnim_min_time_type&
    subRootAnim_min_time ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    subRootAnim_min_time (const subRootAnim_min_time_type& x);

    //@}

    /**
     * @name subRootAnim1_effect
     *
     * @brief Accessor and modifier functions for the %subRootAnim1_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string subRootAnim1_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< subRootAnim1_effect_type, wchar_t > subRootAnim1_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const subRootAnim1_effect_type&
    subRootAnim1_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    subRootAnim1_effect_type&
    subRootAnim1_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    subRootAnim1_effect (const subRootAnim1_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    subRootAnim1_effect (::std::unique_ptr< subRootAnim1_effect_type > p);

    //@}

    /**
     * @name subRootAnim2_effect
     *
     * @brief Accessor and modifier functions for the %subRootAnim2_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string subRootAnim2_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< subRootAnim2_effect_type, wchar_t > subRootAnim2_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const subRootAnim2_effect_type&
    subRootAnim2_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    subRootAnim2_effect_type&
    subRootAnim2_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    subRootAnim2_effect (const subRootAnim2_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    subRootAnim2_effect (::std::unique_ptr< subRootAnim2_effect_type > p);

    //@}

    /**
     * @name subRootAnim3_effect
     *
     * @brief Accessor and modifier functions for the %subRootAnim3_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string subRootAnim3_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< subRootAnim3_effect_type, wchar_t > subRootAnim3_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const subRootAnim3_effect_type&
    subRootAnim3_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    subRootAnim3_effect_type&
    subRootAnim3_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    subRootAnim3_effect (const subRootAnim3_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    subRootAnim3_effect (::std::unique_ptr< subRootAnim3_effect_type > p);

    //@}

    /**
     * @name subRootAnim4_effect
     *
     * @brief Accessor and modifier functions for the %subRootAnim4_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string subRootAnim4_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< subRootAnim4_effect_type, wchar_t > subRootAnim4_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const subRootAnim4_effect_type&
    subRootAnim4_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    subRootAnim4_effect_type&
    subRootAnim4_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    subRootAnim4_effect (const subRootAnim4_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    subRootAnim4_effect (::std::unique_ptr< subRootAnim4_effect_type > p);

    //@}

    /**
     * @name faction
     *
     * @brief Accessor and modifier functions for the %faction
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::faction_code_t faction_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< faction_type, wchar_t > faction_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const faction_type&
    faction () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    faction_type&
    faction ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    faction (const faction_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    faction (::std::unique_ptr< faction_type > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Default constructor.
     *
     * Note that this constructor leaves required elements and
     * attributes uninitialized.
     */
    npc_t ();

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    npc_t (const npc_code_type&,
           const npc_type_type&,
           const npc_mesh_collision_usable_type&,
           const npc_contact_object_normal_type&,
           const datablock_name_type&,
           const material_name_type&,
           const material_count_type&,
           const scale_type&,
           const modeling_radius_type&,
           const level_type&,
           const grade_type&,
           const exp_type&,
           const random_dungeon_exp_pct_type&,
           const world_event_exp_pct_type&,
           const hp_type&,
           const mp_type&,
           const min_attack_power_type&,
           const max_attack_power_type&,
           const physical_attack_power_type&,
           const magic_attack_power_type&,
           const hit_rate_type&,
           const physical_critical_rate_type&,
           const magic_critical_rate_type&,
           const block_rate_type&,
           const dodge_rate_type&,
           const parry_rate_type&,
           const defence_type&,
           const light_attribute_type&,
           const dark_attribute_type&,
           const fire_attribute_type&,
           const ice_attribute_type&,
           const light_attribute_regist_type&,
           const dark_attribute_regist_type&,
           const fire_attribute_regist_type&,
           const ice_attribute_regist_type&,
           const item_drop_id_1_type&,
           const item_drop_id_2_type&,
           const world_drop_suffix_id_1_type&,
           const world_drop_suffix_id_2_type&,
           const ai_script_name_type&,
           const ai_script_param_1_type&,
           const ai_script_param_2_type&,
           const ai_script_param_3_type&,
           const ai_script_param_4_type&,
           const ai_reactive_type_type&,
           const ai_reactive_distance_type&,
           const ai_min_approach_distance_type&,
           const ai_max_approach_distance_type&,
           const ai_wander_distance_type&,
           const ai_walk_speed_type&,
           const ai_min_walk_delay_type&,
           const ai_max_walk_delay_type&,
           const ai_max_move_distance_type&,
           const ai_run_speed_type&,
           const ai_link_type_type&,
           const ai_link_reactive_distance_type&,
           const ai_link_min_count_type&,
           const ai_link_max_count_type&,
           const main_skill_code_type&,
           const sub_skill_code_type&,
           const special_skill_1_type&,
           const special_skill_rate_1_type&,
           const special_skill_2_type&,
           const special_skill_rate_2_type&,
           const special_skill_3_type&,
           const special_skill_rate_3_type&,
           const threat_effect_type&,
           const death_effect_type&,
           const death_delay_time_type&,
           const spawn_effect_type&,
           const spawn_interval_sec_type&,
           const peace_effect_type&,
           const peace_light_rgb_value_type&,
           const peace_light_value_type&,
           const peace_light_range_value_type&,
           const peace_light_mount_point_type&,
           const combat_effect_type&,
           const combat_light_rgb_value_type&,
           const combat_light_value_type&,
           const combat_light_range_value_type&,
           const combat_light_mount_point_type&,
           const hit_sound_type&,
           const dodge_sound_type&,
           const walk_sound_type&,
           const run_sound_type&,
           const aggressive_sound_type&,
           const weapon_material_type_type&,
           const armor_material_type_type&,
           const use_datacode_mesh_hidden_type&,
           const npc_hair_type&,
           const npc_face_type&,
           const npc_eyes_type&,
           const npc_tooth_type&,
           const npc_upper_body_type&,
           const npc_lower_body_type&,
           const npc_hand_type&,
           const npc_foot_type&,
           const npc_uppper_underwear_type&,
           const npc_lower_underwear_type&,
           const npc_helmet_type&,
           const npc_shoulder_type&,
           const npc_torso_type&,
           const npc_belt_type&,
           const npc_pants_type&,
           const npc_greave_type&,
           const npc_glove_type&,
           const npc_shoes_type&,
           const npc_righthand_type&,
           const npc_lefthand_type&,
           const use_mesh_hidden_type&,
           const use_mesh_hidden_count_type&,
           const npc_mesh_helmet_type&,
           const npc_mesh_shoulder_type&,
           const npc_mesh_torso_type&,
           const npc_mesh_belt_type&,
           const npc_mesh_pants_type&,
           const npc_mesh_greave_type&,
           const npc_mesh_glove_type&,
           const npc_mesh_shoes_type&,
           const npc_mesh_righthand_type&,
           const npc_mesh_lefthand_type&,
           const quest_function_type&,
           const introduce_talk_type&,
           const show_head_name_type&,
           const show_preview_type&,
           const bank_function_type&,
           const buy_function_type&,
           const sell_function_type&,
           const mail_function_type&,
           const auction_function_type&,
           const guild_function_type&,
           const glider_repair_function_type&,
           const craft_function_type&,
           const npc_rotate_type&,
           const subRootAnim_chance_type&,
           const subRootAnim_max_time_type&,
           const subRootAnim_min_time_type&,
           const subRootAnim1_effect_type&,
           const subRootAnim2_effect_type&,
           const subRootAnim3_effect_type&,
           const subRootAnim4_effect_type&,
           const faction_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    npc_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    npc_t (const npc_t& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual npc_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    npc_t&
    operator= (const npc_t& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~npc_t ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< npc_code_type > npc_code_;
    ::xsd::cxx::tree::one< npc_type_type > npc_type_;
    ::xsd::cxx::tree::one< npc_mesh_collision_usable_type > npc_mesh_collision_usable_;
    ::xsd::cxx::tree::one< npc_contact_object_normal_type > npc_contact_object_normal_;
    ::xsd::cxx::tree::one< datablock_name_type > datablock_name_;
    ::xsd::cxx::tree::one< material_name_type > material_name_;
    ::xsd::cxx::tree::one< material_count_type > material_count_;
    ::xsd::cxx::tree::one< scale_type > scale_;
    ::xsd::cxx::tree::one< modeling_radius_type > modeling_radius_;
    ::xsd::cxx::tree::one< level_type > level_;
    ::xsd::cxx::tree::one< grade_type > grade_;
    ::xsd::cxx::tree::one< exp_type > exp_;
    ::xsd::cxx::tree::one< random_dungeon_exp_pct_type > random_dungeon_exp_pct_;
    ::xsd::cxx::tree::one< world_event_exp_pct_type > world_event_exp_pct_;
    ::xsd::cxx::tree::one< hp_type > hp_;
    ::xsd::cxx::tree::one< mp_type > mp_;
    ::xsd::cxx::tree::one< min_attack_power_type > min_attack_power_;
    ::xsd::cxx::tree::one< max_attack_power_type > max_attack_power_;
    ::xsd::cxx::tree::one< physical_attack_power_type > physical_attack_power_;
    ::xsd::cxx::tree::one< magic_attack_power_type > magic_attack_power_;
    ::xsd::cxx::tree::one< hit_rate_type > hit_rate_;
    ::xsd::cxx::tree::one< physical_critical_rate_type > physical_critical_rate_;
    ::xsd::cxx::tree::one< magic_critical_rate_type > magic_critical_rate_;
    ::xsd::cxx::tree::one< block_rate_type > block_rate_;
    ::xsd::cxx::tree::one< dodge_rate_type > dodge_rate_;
    ::xsd::cxx::tree::one< parry_rate_type > parry_rate_;
    ::xsd::cxx::tree::one< defence_type > defence_;
    ::xsd::cxx::tree::one< light_attribute_type > light_attribute_;
    ::xsd::cxx::tree::one< dark_attribute_type > dark_attribute_;
    ::xsd::cxx::tree::one< fire_attribute_type > fire_attribute_;
    ::xsd::cxx::tree::one< ice_attribute_type > ice_attribute_;
    ::xsd::cxx::tree::one< light_attribute_regist_type > light_attribute_regist_;
    ::xsd::cxx::tree::one< dark_attribute_regist_type > dark_attribute_regist_;
    ::xsd::cxx::tree::one< fire_attribute_regist_type > fire_attribute_regist_;
    ::xsd::cxx::tree::one< ice_attribute_regist_type > ice_attribute_regist_;
    ::xsd::cxx::tree::one< item_drop_id_1_type > item_drop_id_1_;
    ::xsd::cxx::tree::one< item_drop_id_2_type > item_drop_id_2_;
    ::xsd::cxx::tree::one< world_drop_suffix_id_1_type > world_drop_suffix_id_1_;
    ::xsd::cxx::tree::one< world_drop_suffix_id_2_type > world_drop_suffix_id_2_;
    ::xsd::cxx::tree::one< ai_script_name_type > ai_script_name_;
    ::xsd::cxx::tree::one< ai_script_param_1_type > ai_script_param_1_;
    ::xsd::cxx::tree::one< ai_script_param_2_type > ai_script_param_2_;
    ::xsd::cxx::tree::one< ai_script_param_3_type > ai_script_param_3_;
    ::xsd::cxx::tree::one< ai_script_param_4_type > ai_script_param_4_;
    ::xsd::cxx::tree::one< ai_reactive_type_type > ai_reactive_type_;
    ::xsd::cxx::tree::one< ai_reactive_distance_type > ai_reactive_distance_;
    ::xsd::cxx::tree::one< ai_min_approach_distance_type > ai_min_approach_distance_;
    ::xsd::cxx::tree::one< ai_max_approach_distance_type > ai_max_approach_distance_;
    ::xsd::cxx::tree::one< ai_wander_distance_type > ai_wander_distance_;
    ::xsd::cxx::tree::one< ai_walk_speed_type > ai_walk_speed_;
    ::xsd::cxx::tree::one< ai_min_walk_delay_type > ai_min_walk_delay_;
    ::xsd::cxx::tree::one< ai_max_walk_delay_type > ai_max_walk_delay_;
    ::xsd::cxx::tree::one< ai_max_move_distance_type > ai_max_move_distance_;
    ::xsd::cxx::tree::one< ai_run_speed_type > ai_run_speed_;
    ::xsd::cxx::tree::one< ai_link_type_type > ai_link_type_;
    ::xsd::cxx::tree::one< ai_link_reactive_distance_type > ai_link_reactive_distance_;
    ::xsd::cxx::tree::one< ai_link_min_count_type > ai_link_min_count_;
    ::xsd::cxx::tree::one< ai_link_max_count_type > ai_link_max_count_;
    ::xsd::cxx::tree::one< main_skill_code_type > main_skill_code_;
    ::xsd::cxx::tree::one< sub_skill_code_type > sub_skill_code_;
    ::xsd::cxx::tree::one< special_skill_1_type > special_skill_1_;
    ::xsd::cxx::tree::one< special_skill_rate_1_type > special_skill_rate_1_;
    ::xsd::cxx::tree::one< special_skill_2_type > special_skill_2_;
    ::xsd::cxx::tree::one< special_skill_rate_2_type > special_skill_rate_2_;
    ::xsd::cxx::tree::one< special_skill_3_type > special_skill_3_;
    ::xsd::cxx::tree::one< special_skill_rate_3_type > special_skill_rate_3_;
    ::xsd::cxx::tree::one< threat_effect_type > threat_effect_;
    ::xsd::cxx::tree::one< death_effect_type > death_effect_;
    ::xsd::cxx::tree::one< death_delay_time_type > death_delay_time_;
    ::xsd::cxx::tree::one< spawn_effect_type > spawn_effect_;
    ::xsd::cxx::tree::one< spawn_interval_sec_type > spawn_interval_sec_;
    ::xsd::cxx::tree::one< peace_effect_type > peace_effect_;
    ::xsd::cxx::tree::one< peace_light_rgb_value_type > peace_light_rgb_value_;
    ::xsd::cxx::tree::one< peace_light_value_type > peace_light_value_;
    ::xsd::cxx::tree::one< peace_light_range_value_type > peace_light_range_value_;
    ::xsd::cxx::tree::one< peace_light_mount_point_type > peace_light_mount_point_;
    ::xsd::cxx::tree::one< combat_effect_type > combat_effect_;
    ::xsd::cxx::tree::one< combat_light_rgb_value_type > combat_light_rgb_value_;
    ::xsd::cxx::tree::one< combat_light_value_type > combat_light_value_;
    ::xsd::cxx::tree::one< combat_light_range_value_type > combat_light_range_value_;
    ::xsd::cxx::tree::one< combat_light_mount_point_type > combat_light_mount_point_;
    ::xsd::cxx::tree::one< hit_sound_type > hit_sound_;
    ::xsd::cxx::tree::one< dodge_sound_type > dodge_sound_;
    ::xsd::cxx::tree::one< walk_sound_type > walk_sound_;
    ::xsd::cxx::tree::one< run_sound_type > run_sound_;
    ::xsd::cxx::tree::one< aggressive_sound_type > aggressive_sound_;
    ::xsd::cxx::tree::one< weapon_material_type_type > weapon_material_type_;
    ::xsd::cxx::tree::one< armor_material_type_type > armor_material_type_;
    ::xsd::cxx::tree::one< use_datacode_mesh_hidden_type > use_datacode_mesh_hidden_;
    ::xsd::cxx::tree::one< npc_hair_type > npc_hair_;
    ::xsd::cxx::tree::one< npc_face_type > npc_face_;
    ::xsd::cxx::tree::one< npc_eyes_type > npc_eyes_;
    ::xsd::cxx::tree::one< npc_tooth_type > npc_tooth_;
    ::xsd::cxx::tree::one< npc_upper_body_type > npc_upper_body_;
    ::xsd::cxx::tree::one< npc_lower_body_type > npc_lower_body_;
    ::xsd::cxx::tree::one< npc_hand_type > npc_hand_;
    ::xsd::cxx::tree::one< npc_foot_type > npc_foot_;
    ::xsd::cxx::tree::one< npc_uppper_underwear_type > npc_uppper_underwear_;
    ::xsd::cxx::tree::one< npc_lower_underwear_type > npc_lower_underwear_;
    ::xsd::cxx::tree::one< npc_helmet_type > npc_helmet_;
    ::xsd::cxx::tree::one< npc_shoulder_type > npc_shoulder_;
    ::xsd::cxx::tree::one< npc_torso_type > npc_torso_;
    ::xsd::cxx::tree::one< npc_belt_type > npc_belt_;
    ::xsd::cxx::tree::one< npc_pants_type > npc_pants_;
    ::xsd::cxx::tree::one< npc_greave_type > npc_greave_;
    ::xsd::cxx::tree::one< npc_glove_type > npc_glove_;
    ::xsd::cxx::tree::one< npc_shoes_type > npc_shoes_;
    ::xsd::cxx::tree::one< npc_righthand_type > npc_righthand_;
    ::xsd::cxx::tree::one< npc_lefthand_type > npc_lefthand_;
    ::xsd::cxx::tree::one< use_mesh_hidden_type > use_mesh_hidden_;
    ::xsd::cxx::tree::one< use_mesh_hidden_count_type > use_mesh_hidden_count_;
    ::xsd::cxx::tree::one< npc_mesh_helmet_type > npc_mesh_helmet_;
    ::xsd::cxx::tree::one< npc_mesh_shoulder_type > npc_mesh_shoulder_;
    ::xsd::cxx::tree::one< npc_mesh_torso_type > npc_mesh_torso_;
    ::xsd::cxx::tree::one< npc_mesh_belt_type > npc_mesh_belt_;
    ::xsd::cxx::tree::one< npc_mesh_pants_type > npc_mesh_pants_;
    ::xsd::cxx::tree::one< npc_mesh_greave_type > npc_mesh_greave_;
    ::xsd::cxx::tree::one< npc_mesh_glove_type > npc_mesh_glove_;
    ::xsd::cxx::tree::one< npc_mesh_shoes_type > npc_mesh_shoes_;
    ::xsd::cxx::tree::one< npc_mesh_righthand_type > npc_mesh_righthand_;
    ::xsd::cxx::tree::one< npc_mesh_lefthand_type > npc_mesh_lefthand_;
    ::xsd::cxx::tree::one< quest_function_type > quest_function_;
    ::xsd::cxx::tree::one< introduce_talk_type > introduce_talk_;
    ::xsd::cxx::tree::one< show_head_name_type > show_head_name_;
    ::xsd::cxx::tree::one< show_preview_type > show_preview_;
    ::xsd::cxx::tree::one< bank_function_type > bank_function_;
    ::xsd::cxx::tree::one< buy_function_type > buy_function_;
    ::xsd::cxx::tree::one< sell_function_type > sell_function_;
    ::xsd::cxx::tree::one< mail_function_type > mail_function_;
    ::xsd::cxx::tree::one< auction_function_type > auction_function_;
    ::xsd::cxx::tree::one< guild_function_type > guild_function_;
    ::xsd::cxx::tree::one< glider_repair_function_type > glider_repair_function_;
    ::xsd::cxx::tree::one< craft_function_type > craft_function_;
    ::xsd::cxx::tree::one< npc_rotate_type > npc_rotate_;
    ::xsd::cxx::tree::one< subRootAnim_chance_type > subRootAnim_chance_;
    ::xsd::cxx::tree::one< subRootAnim_max_time_type > subRootAnim_max_time_;
    ::xsd::cxx::tree::one< subRootAnim_min_time_type > subRootAnim_min_time_;
    ::xsd::cxx::tree::one< subRootAnim1_effect_type > subRootAnim1_effect_;
    ::xsd::cxx::tree::one< subRootAnim2_effect_type > subRootAnim2_effect_;
    ::xsd::cxx::tree::one< subRootAnim3_effect_type > subRootAnim3_effect_;
    ::xsd::cxx::tree::one< subRootAnim4_effect_type > subRootAnim4_effect_;
    ::xsd::cxx::tree::one< faction_type > faction_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %ai_reactive_type_t schema type.
   *
   * @nosubgrouping
   */
  class GIDEON_CS_API ai_reactive_type_t: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >
  {
    public:
    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Default constructor.
     *
     * Note that this constructor leaves required elements and
     * attributes uninitialized.
     */
    ai_reactive_type_t ();

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    ai_reactive_type_t (const ::xml_schema::unsigned_byte&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ai_reactive_type_t (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ai_reactive_type_t (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    ai_reactive_type_t (const ::std::wstring& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    ai_reactive_type_t (const ai_reactive_type_t& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual ai_reactive_type_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~ai_reactive_type_t ();
  };

  /**
   * @brief Class corresponding to the %npc_table schema type.
   *
   * @nosubgrouping
   */
  class GIDEON_CS_API npc_table: public ::xml_schema::type
  {
    public:
    /**
     * @name npc_template
     *
     * @brief Accessor and modifier functions for the %npc_template
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::gdt::npc_t npc_template_type;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< npc_template_type > npc_template_sequence;

    /**
     * @brief Element iterator type.
     */
    typedef npc_template_sequence::iterator npc_template_iterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef npc_template_sequence::const_iterator npc_template_const_iterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< npc_template_type, wchar_t > npc_template_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const npc_template_sequence&
    npc_template () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    npc_template_sequence&
    npc_template ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    npc_template (const npc_template_sequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    npc_table ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    npc_table (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    npc_table (const npc_table& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual npc_table*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    npc_table&
    operator= (const npc_table& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~npc_table ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    npc_template_sequence npc_template_;

    //@endcond
  };
}

#ifndef XSD_DONT_INCLUDE_INLINE

#include "shared_types.ixx"

#endif // XSD_DONT_INCLUDE_INLINE

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace gdt
{
  /**
   * @name Parsing functions for the %npc_table document root.
   */
  //@{

  /**
   * @brief Parse a URI or a local file.
   *
   * @param uri A URI or a local file name.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (const ::std::wstring& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a URI or a local file with an error handler.
   *
   * @param uri A URI or a local file name.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (const ::std::wstring& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a URI or a local file with a Xerces-C++ DOM error
   * handler.
   *
   * @param uri A URI or a local file name.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (const ::std::wstring& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream.
   *
   * @param is A standrad input stream.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with an error handler.
   *
   * @param is A standrad input stream.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with a Xerces-C++ DOM error
   * handler.
   *
   * @param is A standrad input stream.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with a resource id.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function uses exceptions to report parsing errors.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with a resource id and an
   * error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with a resource id and a
   * Xerces-C++ DOM error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::std::istream& is,
              const ::std::wstring& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ input source.
   *
   * @param is A Xerces-C++ input source.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ input source with an error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
   * error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A pointer to the Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function is normally used together with the keep_dom and
   * own_dom parsing flags to assign ownership of the DOM document
   * to the object model.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::npc_table >
  npc_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

  //@}
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace gdt
{
  /**
   * @name Serialization functions for the %npc_table document root.
   */
  //@{

  /**
   * @brief Serialize to a standard output stream.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  GIDEON_CS_API
  void
  npc_table_ (::std::ostream& os,
              const ::gdt::npc_table& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a standard output stream with an error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  GIDEON_CS_API
  void
  npc_table_ (::std::ostream& os,
              const ::gdt::npc_table& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a standard output stream with a Xerces-C++ DOM
   * error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  GIDEON_CS_API
  void
  npc_table_ (::std::ostream& os,
              const ::gdt::npc_table& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  GIDEON_CS_API
  void
  npc_table_ (::xercesc::XMLFormatTarget& ft,
              const ::gdt::npc_table& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with an error
   * handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  GIDEON_CS_API
  void
  npc_table_ (::xercesc::XMLFormatTarget& ft,
              const ::gdt::npc_table& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with a
   * Xerces-C++ DOM error handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  GIDEON_CS_API
  void
  npc_table_ (::xercesc::XMLFormatTarget& ft,
              const ::gdt::npc_table& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to an existing Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param x An object model to serialize.
   * @param f Serialization flags.
   *
   * Note that it is your responsibility to create the DOM document
   * with the correct root element as well as set the necessary
   * namespace mapping attributes.
   */
  GIDEON_CS_API
  void
  npc_table_ (::xercesc::DOMDocument& d,
              const ::gdt::npc_table& x,
              ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a new Xerces-C++ DOM document.
   *
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param f Serialization flags.
   * @return A pointer to the new Xerces-C++ DOM document.
   */
  GIDEON_CS_API
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  npc_table_ (const ::gdt::npc_table& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

  //@}

  GIDEON_CS_API
  void
  operator<< (::xercesc::DOMElement&, const npc_t&);

  GIDEON_CS_API
  void
  operator<< (::xercesc::DOMElement&, const ai_reactive_type_t&);

  GIDEON_CS_API
  void
  operator<< (::xercesc::DOMAttr&, const ai_reactive_type_t&);

  GIDEON_CS_API
  void
  operator<< (::xml_schema::list_stream&,
              const ai_reactive_type_t&);

  GIDEON_CS_API
  void
  operator<< (::xercesc::DOMElement&, const npc_table&);
}

#ifndef XSD_DONT_INCLUDE_INLINE
#include "npc_table.ixx"
#endif // XSD_DONT_INCLUDE_INLINE

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_NPC_TABLE_HXX
