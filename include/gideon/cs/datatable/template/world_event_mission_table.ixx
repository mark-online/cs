// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_WORLD_EVENT_MISSION_TABLE_IXX
#define GDT_WORLD_EVENT_MISSION_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // world_event_mission_t
  // 

  inline
  const world_event_mission_t::world_event_code_type& world_event_mission_t::
  world_event_code () const
  {
    return this->world_event_code_.get ();
  }

  inline
  world_event_mission_t::world_event_code_type& world_event_mission_t::
  world_event_code ()
  {
    return this->world_event_code_.get ();
  }

  inline
  void world_event_mission_t::
  world_event_code (const world_event_code_type& x)
  {
    this->world_event_code_.set (x);
  }

  inline
  void world_event_mission_t::
  world_event_code (::std::unique_ptr< world_event_code_type > x)
  {
    this->world_event_code_.set (std::move (x));
  }

  inline
  const world_event_mission_t::event_phase_type& world_event_mission_t::
  event_phase () const
  {
    return this->event_phase_.get ();
  }

  inline
  world_event_mission_t::event_phase_type& world_event_mission_t::
  event_phase ()
  {
    return this->event_phase_.get ();
  }

  inline
  void world_event_mission_t::
  event_phase (const event_phase_type& x)
  {
    this->event_phase_.set (x);
  }

  inline
  const world_event_mission_t::mission_code_type& world_event_mission_t::
  mission_code () const
  {
    return this->mission_code_.get ();
  }

  inline
  world_event_mission_t::mission_code_type& world_event_mission_t::
  mission_code ()
  {
    return this->mission_code_.get ();
  }

  inline
  void world_event_mission_t::
  mission_code (const mission_code_type& x)
  {
    this->mission_code_.set (x);
  }

  inline
  void world_event_mission_t::
  mission_code (::std::unique_ptr< mission_code_type > x)
  {
    this->mission_code_.set (std::move (x));
  }

  inline
  const world_event_mission_t::mission_phase_count_type& world_event_mission_t::
  mission_phase_count () const
  {
    return this->mission_phase_count_.get ();
  }

  inline
  world_event_mission_t::mission_phase_count_type& world_event_mission_t::
  mission_phase_count ()
  {
    return this->mission_phase_count_.get ();
  }

  inline
  void world_event_mission_t::
  mission_phase_count (const mission_phase_count_type& x)
  {
    this->mission_phase_count_.set (x);
  }

  inline
  const world_event_mission_t::region_code_type& world_event_mission_t::
  region_code () const
  {
    return this->region_code_.get ();
  }

  inline
  world_event_mission_t::region_code_type& world_event_mission_t::
  region_code ()
  {
    return this->region_code_.get ();
  }

  inline
  void world_event_mission_t::
  region_code (const region_code_type& x)
  {
    this->region_code_.set (x);
  }

  inline
  void world_event_mission_t::
  region_code (::std::unique_ptr< region_code_type > x)
  {
    this->region_code_.set (std::move (x));
  }

  inline
  const world_event_mission_t::mission_type_type& world_event_mission_t::
  mission_type () const
  {
    return this->mission_type_.get ();
  }

  inline
  world_event_mission_t::mission_type_type& world_event_mission_t::
  mission_type ()
  {
    return this->mission_type_.get ();
  }

  inline
  void world_event_mission_t::
  mission_type (const mission_type_type& x)
  {
    this->mission_type_.set (x);
  }

  inline
  void world_event_mission_t::
  mission_type (::std::unique_ptr< mission_type_type > x)
  {
    this->mission_type_.set (std::move (x));
  }

  inline
  const world_event_mission_t::mission_param_1_type& world_event_mission_t::
  mission_param_1 () const
  {
    return this->mission_param_1_.get ();
  }

  inline
  world_event_mission_t::mission_param_1_type& world_event_mission_t::
  mission_param_1 ()
  {
    return this->mission_param_1_.get ();
  }

  inline
  void world_event_mission_t::
  mission_param_1 (const mission_param_1_type& x)
  {
    this->mission_param_1_.set (x);
  }

  inline
  const world_event_mission_t::mission_param_2_type& world_event_mission_t::
  mission_param_2 () const
  {
    return this->mission_param_2_.get ();
  }

  inline
  world_event_mission_t::mission_param_2_type& world_event_mission_t::
  mission_param_2 ()
  {
    return this->mission_param_2_.get ();
  }

  inline
  void world_event_mission_t::
  mission_param_2 (const mission_param_2_type& x)
  {
    this->mission_param_2_.set (x);
  }

  inline
  const world_event_mission_t::mission_phase_wait_time_type& world_event_mission_t::
  mission_phase_wait_time () const
  {
    return this->mission_phase_wait_time_.get ();
  }

  inline
  world_event_mission_t::mission_phase_wait_time_type& world_event_mission_t::
  mission_phase_wait_time ()
  {
    return this->mission_phase_wait_time_.get ();
  }

  inline
  void world_event_mission_t::
  mission_phase_wait_time (const mission_phase_wait_time_type& x)
  {
    this->mission_phase_wait_time_.set (x);
  }

  inline
  const world_event_mission_t::devildom_gate_code_type& world_event_mission_t::
  devildom_gate_code () const
  {
    return this->devildom_gate_code_.get ();
  }

  inline
  world_event_mission_t::devildom_gate_code_type& world_event_mission_t::
  devildom_gate_code ()
  {
    return this->devildom_gate_code_.get ();
  }

  inline
  void world_event_mission_t::
  devildom_gate_code (const devildom_gate_code_type& x)
  {
    this->devildom_gate_code_.set (x);
  }

  inline
  const world_event_mission_t::atmosphere_datablock_name_type& world_event_mission_t::
  atmosphere_datablock_name () const
  {
    return this->atmosphere_datablock_name_.get ();
  }

  inline
  world_event_mission_t::atmosphere_datablock_name_type& world_event_mission_t::
  atmosphere_datablock_name ()
  {
    return this->atmosphere_datablock_name_.get ();
  }

  inline
  void world_event_mission_t::
  atmosphere_datablock_name (const atmosphere_datablock_name_type& x)
  {
    this->atmosphere_datablock_name_.set (x);
  }

  inline
  void world_event_mission_t::
  atmosphere_datablock_name (::std::unique_ptr< atmosphere_datablock_name_type > x)
  {
    this->atmosphere_datablock_name_.set (std::move (x));
  }


  // world_event_mission_type_t
  // 


  // world_event_mission_table
  // 

  inline
  const world_event_mission_table::world_event_mission_template_sequence& world_event_mission_table::
  world_event_mission_template () const
  {
    return this->world_event_mission_template_;
  }

  inline
  world_event_mission_table::world_event_mission_template_sequence& world_event_mission_table::
  world_event_mission_template ()
  {
    return this->world_event_mission_template_;
  }

  inline
  void world_event_mission_table::
  world_event_mission_template (const world_event_mission_template_sequence& s)
  {
    this->world_event_mission_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_WORLD_EVENT_MISSION_TABLE_IXX
