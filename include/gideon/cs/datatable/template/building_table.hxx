// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from building_table.xsd.
 */

#ifndef GDT_BUILDING_TABLE_HXX
#define GDT_BUILDING_TABLE_HXX

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

// Begin prologue.
//
#include "shared_types.hxx"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "xml_schema.hxx"

// Forward declarations.
//
namespace gdt
{
  class building_t;
  class so_skill_cast_type_t;
  class building_table;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#ifndef XSD_DONT_INCLUDE_INLINE
#define XSD_DONT_INCLUDE_INLINE

#include "shared_types.hxx"

#undef XSD_DONT_INCLUDE_INLINE
#else

#include "shared_types.hxx"

#endif // XSD_DONT_INCLUDE_INLINE

/**
 * @brief C++ namespace for the %
 * schema namespace.
 */
namespace gdt
{
  /**
   * @brief Class corresponding to the %building_t schema type.
   *
   * @nosubgrouping
   */
  class GIDEON_CS_API building_t: public ::xml_schema::type
  {
    public:
    /**
     * @name building_code
     *
     * @brief Accessor and modifier functions for the %building_code
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::building_code_t building_code_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_code_type, wchar_t > building_code_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const building_code_type&
    building_code () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    building_code_type&
    building_code ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    building_code (const building_code_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    building_code (::std::unique_ptr< building_code_type > p);

    //@}

    /**
     * @name building_icon
     *
     * @brief Accessor and modifier functions for the %building_icon
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string building_icon_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_icon_type, wchar_t > building_icon_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const building_icon_type&
    building_icon () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    building_icon_type&
    building_icon ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    building_icon (const building_icon_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    building_icon (::std::unique_ptr< building_icon_type > p);

    //@}

    /**
     * @name anchor_owner
     *
     * @brief Accessor and modifier functions for the %anchor_owner
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::anchor_owner_type_t anchor_owner_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< anchor_owner_type, wchar_t > anchor_owner_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const anchor_owner_type&
    anchor_owner () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    anchor_owner_type&
    anchor_owner ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    anchor_owner (const anchor_owner_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    anchor_owner (::std::unique_ptr< anchor_owner_type > p);

    //@}

    /**
     * @name modeling_radius_size
     *
     * @brief Accessor and modifier functions for the %modeling_radius_size
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::float_ modeling_radius_size_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< modeling_radius_size_type, wchar_t > modeling_radius_size_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const modeling_radius_size_type&
    modeling_radius_size () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    modeling_radius_size_type&
    modeling_radius_size ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    modeling_radius_size (const modeling_radius_size_type& x);

    //@}

    /**
     * @name check_building_code_1
     *
     * @brief Accessor and modifier functions for the %check_building_code_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int check_building_code_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< check_building_code_1_type, wchar_t > check_building_code_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const check_building_code_1_type&
    check_building_code_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    check_building_code_1_type&
    check_building_code_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    check_building_code_1 (const check_building_code_1_type& x);

    //@}

    /**
     * @name check_distance_1
     *
     * @brief Accessor and modifier functions for the %check_distance_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int check_distance_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< check_distance_1_type, wchar_t > check_distance_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const check_distance_1_type&
    check_distance_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    check_distance_1_type&
    check_distance_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    check_distance_1 (const check_distance_1_type& x);

    //@}

    /**
     * @name check_building_code_2
     *
     * @brief Accessor and modifier functions for the %check_building_code_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int check_building_code_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< check_building_code_2_type, wchar_t > check_building_code_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const check_building_code_2_type&
    check_building_code_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    check_building_code_2_type&
    check_building_code_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    check_building_code_2 (const check_building_code_2_type& x);

    //@}

    /**
     * @name check_distance_2
     *
     * @brief Accessor and modifier functions for the %check_distance_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int check_distance_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< check_distance_2_type, wchar_t > check_distance_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const check_distance_2_type&
    check_distance_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    check_distance_2_type&
    check_distance_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    check_distance_2 (const check_distance_2_type& x);

    //@}

    /**
     * @name cool_time
     *
     * @brief Accessor and modifier functions for the %cool_time
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int cool_time_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< cool_time_type, wchar_t > cool_time_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const cool_time_type&
    cool_time () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    cool_time_type&
    cool_time ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    cool_time (const cool_time_type& x);

    //@}

    /**
     * @name dominon_type
     *
     * @brief Accessor and modifier functions for the %dominon_type
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte dominon_type_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< dominon_type_type, wchar_t > dominon_type_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const dominon_type_type&
    dominon_type () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    dominon_type_type&
    dominon_type ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    dominon_type (const dominon_type_type& x);

    //@}

    /**
     * @name is_mark_map
     *
     * @brief Accessor and modifier functions for the %is_mark_map
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean is_mark_map_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< is_mark_map_type, wchar_t > is_mark_map_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const is_mark_map_type&
    is_mark_map () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    is_mark_map_type&
    is_mark_map ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    is_mark_map (const is_mark_map_type& x);

    //@}

    /**
     * @name map_mark_icon
     *
     * @brief Accessor and modifier functions for the %map_mark_icon
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string map_mark_icon_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< map_mark_icon_type, wchar_t > map_mark_icon_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const map_mark_icon_type&
    map_mark_icon () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    map_mark_icon_type&
    map_mark_icon ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    map_mark_icon (const map_mark_icon_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    map_mark_icon (::std::unique_ptr< map_mark_icon_type > p);

    //@}

    /**
     * @name modeling_name
     *
     * @brief Accessor and modifier functions for the %modeling_name
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string modeling_name_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< modeling_name_type, wchar_t > modeling_name_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const modeling_name_type&
    modeling_name () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    modeling_name_type&
    modeling_name ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    modeling_name (const modeling_name_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    modeling_name (::std::unique_ptr< modeling_name_type > p);

    //@}

    /**
     * @name foundation_effect
     *
     * @brief Accessor and modifier functions for the %foundation_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string foundation_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< foundation_effect_type, wchar_t > foundation_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const foundation_effect_type&
    foundation_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    foundation_effect_type&
    foundation_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    foundation_effect (const foundation_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    foundation_effect (::std::unique_ptr< foundation_effect_type > p);

    //@}

    /**
     * @name foundation_health_point
     *
     * @brief Accessor and modifier functions for the %foundation_health_point
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int foundation_health_point_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< foundation_health_point_type, wchar_t > foundation_health_point_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const foundation_health_point_type&
    foundation_health_point () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    foundation_health_point_type&
    foundation_health_point ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    foundation_health_point (const foundation_health_point_type& x);

    //@}

    /**
     * @name foundation_regist
     *
     * @brief Accessor and modifier functions for the %foundation_regist
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::float_ foundation_regist_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< foundation_regist_type, wchar_t > foundation_regist_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const foundation_regist_type&
    foundation_regist () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    foundation_regist_type&
    foundation_regist ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    foundation_regist (const foundation_regist_type& x);

    //@}

    /**
     * @name foundation_live_sec
     *
     * @brief Accessor and modifier functions for the %foundation_live_sec
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int foundation_live_sec_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< foundation_live_sec_type, wchar_t > foundation_live_sec_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const foundation_live_sec_type&
    foundation_live_sec () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    foundation_live_sec_type&
    foundation_live_sec ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    foundation_live_sec (const foundation_live_sec_type& x);

    //@}

    /**
     * @name inventory_count
     *
     * @brief Accessor and modifier functions for the %inventory_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int inventory_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< inventory_count_type, wchar_t > inventory_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const inventory_count_type&
    inventory_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    inventory_count_type&
    inventory_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    inventory_count (const inventory_count_type& x);

    //@}

    /**
     * @name building_materials_1
     *
     * @brief Accessor and modifier functions for the %building_materials_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int building_materials_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_materials_1_type, wchar_t > building_materials_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const building_materials_1_type&
    building_materials_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    building_materials_1_type&
    building_materials_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    building_materials_1 (const building_materials_1_type& x);

    //@}

    /**
     * @name building_materials_count_1
     *
     * @brief Accessor and modifier functions for the %building_materials_count_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte building_materials_count_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_materials_count_1_type, wchar_t > building_materials_count_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const building_materials_count_1_type&
    building_materials_count_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    building_materials_count_1_type&
    building_materials_count_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    building_materials_count_1 (const building_materials_count_1_type& x);

    //@}

    /**
     * @name building_materials_2
     *
     * @brief Accessor and modifier functions for the %building_materials_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int building_materials_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_materials_2_type, wchar_t > building_materials_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const building_materials_2_type&
    building_materials_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    building_materials_2_type&
    building_materials_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    building_materials_2 (const building_materials_2_type& x);

    //@}

    /**
     * @name building_materials_count_2
     *
     * @brief Accessor and modifier functions for the %building_materials_count_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte building_materials_count_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_materials_count_2_type, wchar_t > building_materials_count_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const building_materials_count_2_type&
    building_materials_count_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    building_materials_count_2_type&
    building_materials_count_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    building_materials_count_2 (const building_materials_count_2_type& x);

    //@}

    /**
     * @name building_materials_3
     *
     * @brief Accessor and modifier functions for the %building_materials_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int building_materials_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_materials_3_type, wchar_t > building_materials_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const building_materials_3_type&
    building_materials_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    building_materials_3_type&
    building_materials_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    building_materials_3 (const building_materials_3_type& x);

    //@}

    /**
     * @name building_materials_count_3
     *
     * @brief Accessor and modifier functions for the %building_materials_count_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte building_materials_count_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_materials_count_3_type, wchar_t > building_materials_count_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const building_materials_count_3_type&
    building_materials_count_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    building_materials_count_3_type&
    building_materials_count_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    building_materials_count_3 (const building_materials_count_3_type& x);

    //@}

    /**
     * @name building_materials_4
     *
     * @brief Accessor and modifier functions for the %building_materials_4
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int building_materials_4_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_materials_4_type, wchar_t > building_materials_4_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const building_materials_4_type&
    building_materials_4 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    building_materials_4_type&
    building_materials_4 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    building_materials_4 (const building_materials_4_type& x);

    //@}

    /**
     * @name building_materials_count_4
     *
     * @brief Accessor and modifier functions for the %building_materials_count_4
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte building_materials_count_4_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_materials_count_4_type, wchar_t > building_materials_count_4_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const building_materials_count_4_type&
    building_materials_count_4 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    building_materials_count_4_type&
    building_materials_count_4 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    building_materials_count_4 (const building_materials_count_4_type& x);

    //@}

    /**
     * @name building_materials_5
     *
     * @brief Accessor and modifier functions for the %building_materials_5
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int building_materials_5_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_materials_5_type, wchar_t > building_materials_5_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const building_materials_5_type&
    building_materials_5 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    building_materials_5_type&
    building_materials_5 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    building_materials_5 (const building_materials_5_type& x);

    //@}

    /**
     * @name building_materials_count_5
     *
     * @brief Accessor and modifier functions for the %building_materials_count_5
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte building_materials_count_5_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_materials_count_5_type, wchar_t > building_materials_count_5_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const building_materials_count_5_type&
    building_materials_count_5 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    building_materials_count_5_type&
    building_materials_count_5 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    building_materials_count_5 (const building_materials_count_5_type& x);

    //@}

    /**
     * @name build_animation
     *
     * @brief Accessor and modifier functions for the %build_animation
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string build_animation_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< build_animation_type, wchar_t > build_animation_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const build_animation_type&
    build_animation () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    build_animation_type&
    build_animation ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    build_animation (const build_animation_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    build_animation (::std::unique_ptr< build_animation_type > p);

    //@}

    /**
     * @name build_sec
     *
     * @brief Accessor and modifier functions for the %build_sec
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int build_sec_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< build_sec_type, wchar_t > build_sec_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const build_sec_type&
    build_sec () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    build_sec_type&
    build_sec ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    build_sec (const build_sec_type& x);

    //@}

    /**
     * @name build_effect
     *
     * @brief Accessor and modifier functions for the %build_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string build_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< build_effect_type, wchar_t > build_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const build_effect_type&
    build_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    build_effect_type&
    build_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    build_effect (const build_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    build_effect (::std::unique_ptr< build_effect_type > p);

    //@}

    /**
     * @name broken_animation
     *
     * @brief Accessor and modifier functions for the %broken_animation
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string broken_animation_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< broken_animation_type, wchar_t > broken_animation_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const broken_animation_type&
    broken_animation () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    broken_animation_type&
    broken_animation ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    broken_animation (const broken_animation_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    broken_animation (::std::unique_ptr< broken_animation_type > p);

    //@}

    /**
     * @name broken_effect
     *
     * @brief Accessor and modifier functions for the %broken_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string broken_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< broken_effect_type, wchar_t > broken_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const broken_effect_type&
    broken_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    broken_effect_type&
    broken_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    broken_effect (const broken_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    broken_effect (::std::unique_ptr< broken_effect_type > p);

    //@}

    /**
     * @name complete_modeling
     *
     * @brief Accessor and modifier functions for the %complete_modeling
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string complete_modeling_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< complete_modeling_type, wchar_t > complete_modeling_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const complete_modeling_type&
    complete_modeling () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    complete_modeling_type&
    complete_modeling ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    complete_modeling (const complete_modeling_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    complete_modeling (::std::unique_ptr< complete_modeling_type > p);

    //@}

    /**
     * @name complete_effect
     *
     * @brief Accessor and modifier functions for the %complete_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string complete_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< complete_effect_type, wchar_t > complete_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const complete_effect_type&
    complete_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    complete_effect_type&
    complete_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    complete_effect (const complete_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    complete_effect (::std::unique_ptr< complete_effect_type > p);

    //@}

    /**
     * @name complete_health_point
     *
     * @brief Accessor and modifier functions for the %complete_health_point
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int complete_health_point_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< complete_health_point_type, wchar_t > complete_health_point_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const complete_health_point_type&
    complete_health_point () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    complete_health_point_type&
    complete_health_point ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    complete_health_point (const complete_health_point_type& x);

    //@}

    /**
     * @name complete_regist
     *
     * @brief Accessor and modifier functions for the %complete_regist
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::float_ complete_regist_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< complete_regist_type, wchar_t > complete_regist_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const complete_regist_type&
    complete_regist () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    complete_regist_type&
    complete_regist ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    complete_regist (const complete_regist_type& x);

    //@}

    /**
     * @name limit_active_sec
     *
     * @brief Accessor and modifier functions for the %limit_active_sec
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int limit_active_sec_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< limit_active_sec_type, wchar_t > limit_active_sec_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const limit_active_sec_type&
    limit_active_sec () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    limit_active_sec_type&
    limit_active_sec ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    limit_active_sec (const limit_active_sec_type& x);

    //@}

    /**
     * @name active_animation
     *
     * @brief Accessor and modifier functions for the %active_animation
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string active_animation_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< active_animation_type, wchar_t > active_animation_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const active_animation_type&
    active_animation () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    active_animation_type&
    active_animation ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    active_animation (const active_animation_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    active_animation (::std::unique_ptr< active_animation_type > p);

    //@}

    /**
     * @name active_effect
     *
     * @brief Accessor and modifier functions for the %active_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string active_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< active_effect_type, wchar_t > active_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const active_effect_type&
    active_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    active_effect_type&
    active_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    active_effect (const active_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    active_effect (::std::unique_ptr< active_effect_type > p);

    //@}

    /**
     * @name inative_animation
     *
     * @brief Accessor and modifier functions for the %inative_animation
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string inative_animation_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< inative_animation_type, wchar_t > inative_animation_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const inative_animation_type&
    inative_animation () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    inative_animation_type&
    inative_animation ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    inative_animation (const inative_animation_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    inative_animation (::std::unique_ptr< inative_animation_type > p);

    //@}

    /**
     * @name inactive_effect
     *
     * @brief Accessor and modifier functions for the %inactive_effect
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::string inactive_effect_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< inactive_effect_type, wchar_t > inactive_effect_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const inactive_effect_type&
    inactive_effect () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    inactive_effect_type&
    inactive_effect ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    inactive_effect (const inactive_effect_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    inactive_effect (::std::unique_ptr< inactive_effect_type > p);

    //@}

    /**
     * @name consume_sec_1
     *
     * @brief Accessor and modifier functions for the %consume_sec_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int consume_sec_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< consume_sec_1_type, wchar_t > consume_sec_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const consume_sec_1_type&
    consume_sec_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    consume_sec_1_type&
    consume_sec_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    consume_sec_1 (const consume_sec_1_type& x);

    //@}

    /**
     * @name consume_item_code_1
     *
     * @brief Accessor and modifier functions for the %consume_item_code_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int consume_item_code_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< consume_item_code_1_type, wchar_t > consume_item_code_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const consume_item_code_1_type&
    consume_item_code_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    consume_item_code_1_type&
    consume_item_code_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    consume_item_code_1 (const consume_item_code_1_type& x);

    //@}

    /**
     * @name consume_item_count_1
     *
     * @brief Accessor and modifier functions for the %consume_item_count_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte consume_item_count_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< consume_item_count_1_type, wchar_t > consume_item_count_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const consume_item_count_1_type&
    consume_item_count_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    consume_item_count_1_type&
    consume_item_count_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    consume_item_count_1 (const consume_item_count_1_type& x);

    //@}

    /**
     * @name consume_sec_2
     *
     * @brief Accessor and modifier functions for the %consume_sec_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int consume_sec_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< consume_sec_2_type, wchar_t > consume_sec_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const consume_sec_2_type&
    consume_sec_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    consume_sec_2_type&
    consume_sec_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    consume_sec_2 (const consume_sec_2_type& x);

    //@}

    /**
     * @name consume_item_code_2
     *
     * @brief Accessor and modifier functions for the %consume_item_code_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int consume_item_code_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< consume_item_code_2_type, wchar_t > consume_item_code_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const consume_item_code_2_type&
    consume_item_code_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    consume_item_code_2_type&
    consume_item_code_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    consume_item_code_2 (const consume_item_code_2_type& x);

    //@}

    /**
     * @name consume_item_count_2
     *
     * @brief Accessor and modifier functions for the %consume_item_count_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte consume_item_count_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< consume_item_count_2_type, wchar_t > consume_item_count_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const consume_item_count_2_type&
    consume_item_count_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    consume_item_count_2_type&
    consume_item_count_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    consume_item_count_2 (const consume_item_count_2_type& x);

    //@}

    /**
     * @name consume_sec_3
     *
     * @brief Accessor and modifier functions for the %consume_sec_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int consume_sec_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< consume_sec_3_type, wchar_t > consume_sec_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const consume_sec_3_type&
    consume_sec_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    consume_sec_3_type&
    consume_sec_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    consume_sec_3 (const consume_sec_3_type& x);

    //@}

    /**
     * @name consume_item_code_3
     *
     * @brief Accessor and modifier functions for the %consume_item_code_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int consume_item_code_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< consume_item_code_3_type, wchar_t > consume_item_code_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const consume_item_code_3_type&
    consume_item_code_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    consume_item_code_3_type&
    consume_item_code_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    consume_item_code_3 (const consume_item_code_3_type& x);

    //@}

    /**
     * @name consume_item_count_3
     *
     * @brief Accessor and modifier functions for the %consume_item_count_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte consume_item_count_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< consume_item_count_3_type, wchar_t > consume_item_count_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const consume_item_count_3_type&
    consume_item_count_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    consume_item_count_3_type&
    consume_item_count_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    consume_item_count_3 (const consume_item_count_3_type& x);

    //@}

    /**
     * @name so_skill_code_1
     *
     * @brief Accessor and modifier functions for the %so_skill_code_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int so_skill_code_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< so_skill_code_1_type, wchar_t > so_skill_code_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const so_skill_code_1_type&
    so_skill_code_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    so_skill_code_1_type&
    so_skill_code_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    so_skill_code_1 (const so_skill_code_1_type& x);

    //@}

    /**
     * @name so_skill_cast_type_1
     *
     * @brief Accessor and modifier functions for the %so_skill_cast_type_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::so_skill_cast_type_t so_skill_cast_type_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< so_skill_cast_type_1_type, wchar_t > so_skill_cast_type_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const so_skill_cast_type_1_type&
    so_skill_cast_type_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    so_skill_cast_type_1_type&
    so_skill_cast_type_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    so_skill_cast_type_1 (const so_skill_cast_type_1_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    so_skill_cast_type_1 (::std::unique_ptr< so_skill_cast_type_1_type > p);

    //@}

    /**
     * @name auto_sec_1
     *
     * @brief Accessor and modifier functions for the %auto_sec_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int auto_sec_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< auto_sec_1_type, wchar_t > auto_sec_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const auto_sec_1_type&
    auto_sec_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    auto_sec_1_type&
    auto_sec_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    auto_sec_1 (const auto_sec_1_type& x);

    //@}

    /**
     * @name so_skill_code_2
     *
     * @brief Accessor and modifier functions for the %so_skill_code_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int so_skill_code_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< so_skill_code_2_type, wchar_t > so_skill_code_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const so_skill_code_2_type&
    so_skill_code_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    so_skill_code_2_type&
    so_skill_code_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    so_skill_code_2 (const so_skill_code_2_type& x);

    //@}

    /**
     * @name so_skill_cast_type_2
     *
     * @brief Accessor and modifier functions for the %so_skill_cast_type_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::so_skill_cast_type_t so_skill_cast_type_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< so_skill_cast_type_2_type, wchar_t > so_skill_cast_type_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const so_skill_cast_type_2_type&
    so_skill_cast_type_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    so_skill_cast_type_2_type&
    so_skill_cast_type_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    so_skill_cast_type_2 (const so_skill_cast_type_2_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    so_skill_cast_type_2 (::std::unique_ptr< so_skill_cast_type_2_type > p);

    //@}

    /**
     * @name auto_sec_2
     *
     * @brief Accessor and modifier functions for the %auto_sec_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int auto_sec_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< auto_sec_2_type, wchar_t > auto_sec_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const auto_sec_2_type&
    auto_sec_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    auto_sec_2_type&
    auto_sec_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    auto_sec_2 (const auto_sec_2_type& x);

    //@}

    /**
     * @name so_skill_code_3
     *
     * @brief Accessor and modifier functions for the %so_skill_code_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int so_skill_code_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< so_skill_code_3_type, wchar_t > so_skill_code_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const so_skill_code_3_type&
    so_skill_code_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    so_skill_code_3_type&
    so_skill_code_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    so_skill_code_3 (const so_skill_code_3_type& x);

    //@}

    /**
     * @name so_skill_cast_type_3
     *
     * @brief Accessor and modifier functions for the %so_skill_cast_type_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::so_skill_cast_type_t so_skill_cast_type_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< so_skill_cast_type_3_type, wchar_t > so_skill_cast_type_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const so_skill_cast_type_3_type&
    so_skill_cast_type_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    so_skill_cast_type_3_type&
    so_skill_cast_type_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    so_skill_cast_type_3 (const so_skill_cast_type_3_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    so_skill_cast_type_3 (::std::unique_ptr< so_skill_cast_type_3_type > p);

    //@}

    /**
     * @name auto_sec_3
     *
     * @brief Accessor and modifier functions for the %auto_sec_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int auto_sec_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< auto_sec_3_type, wchar_t > auto_sec_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const auto_sec_3_type&
    auto_sec_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    auto_sec_3_type&
    auto_sec_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    auto_sec_3 (const auto_sec_3_type& x);

    //@}

    /**
     * @name produce_resources_code
     *
     * @brief Accessor and modifier functions for the %produce_resources_code
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int produce_resources_code_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< produce_resources_code_type, wchar_t > produce_resources_code_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const produce_resources_code_type&
    produce_resources_code () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    produce_resources_code_type&
    produce_resources_code ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    produce_resources_code (const produce_resources_code_type& x);

    //@}

    /**
     * @name select_produce_resources_code
     *
     * @brief Accessor and modifier functions for the %select_produce_resources_code
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int select_produce_resources_code_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< select_produce_resources_code_type, wchar_t > select_produce_resources_code_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const select_produce_resources_code_type&
    select_produce_resources_code () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    select_produce_resources_code_type&
    select_produce_resources_code ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    select_produce_resources_code (const select_produce_resources_code_type& x);

    //@}

    /**
     * @name select_produce_count
     *
     * @brief Accessor and modifier functions for the %select_produce_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int select_produce_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< select_produce_count_type, wchar_t > select_produce_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const select_produce_count_type&
    select_produce_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    select_produce_count_type&
    select_produce_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    select_produce_count (const select_produce_count_type& x);

    //@}

    /**
     * @name produce_special_commodity_code
     *
     * @brief Accessor and modifier functions for the %produce_special_commodity_code
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int produce_special_commodity_code_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< produce_special_commodity_code_type, wchar_t > produce_special_commodity_code_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const produce_special_commodity_code_type&
    produce_special_commodity_code () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    produce_special_commodity_code_type&
    produce_special_commodity_code ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    produce_special_commodity_code (const produce_special_commodity_code_type& x);

    //@}

    /**
     * @name produce_entrust_count
     *
     * @brief Accessor and modifier functions for the %produce_entrust_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int produce_entrust_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< produce_entrust_count_type, wchar_t > produce_entrust_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const produce_entrust_count_type&
    produce_entrust_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    produce_entrust_count_type&
    produce_entrust_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    produce_entrust_count (const produce_entrust_count_type& x);

    //@}

    /**
     * @name deal_entrust_count
     *
     * @brief Accessor and modifier functions for the %deal_entrust_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int deal_entrust_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< deal_entrust_count_type, wchar_t > deal_entrust_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const deal_entrust_count_type&
    deal_entrust_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    deal_entrust_count_type&
    deal_entrust_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    deal_entrust_count (const deal_entrust_count_type& x);

    //@}

    /**
     * @name mercenary_inventory_count
     *
     * @brief Accessor and modifier functions for the %mercenary_inventory_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int mercenary_inventory_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< mercenary_inventory_count_type, wchar_t > mercenary_inventory_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const mercenary_inventory_count_type&
    mercenary_inventory_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    mercenary_inventory_count_type&
    mercenary_inventory_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    mercenary_inventory_count (const mercenary_inventory_count_type& x);

    //@}

    /**
     * @name production_inventory_count
     *
     * @brief Accessor and modifier functions for the %production_inventory_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int production_inventory_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< production_inventory_count_type, wchar_t > production_inventory_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const production_inventory_count_type&
    production_inventory_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    production_inventory_count_type&
    production_inventory_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    production_inventory_count (const production_inventory_count_type& x);

    //@}

    /**
     * @name select_production_inventory_count
     *
     * @brief Accessor and modifier functions for the %select_production_inventory_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int select_production_inventory_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< select_production_inventory_count_type, wchar_t > select_production_inventory_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const select_production_inventory_count_type&
    select_production_inventory_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    select_production_inventory_count_type&
    select_production_inventory_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    select_production_inventory_count (const select_production_inventory_count_type& x);

    //@}

    /**
     * @name cash_invincible_min
     *
     * @brief Accessor and modifier functions for the %cash_invincible_min
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int cash_invincible_min_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< cash_invincible_min_type, wchar_t > cash_invincible_min_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const cash_invincible_min_type&
    cash_invincible_min () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    cash_invincible_min_type&
    cash_invincible_min ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    cash_invincible_min (const cash_invincible_min_type& x);

    //@}

    /**
     * @name cash_invincible_item_code
     *
     * @brief Accessor and modifier functions for the %cash_invincible_item_code
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int cash_invincible_item_code_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< cash_invincible_item_code_type, wchar_t > cash_invincible_item_code_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const cash_invincible_item_code_type&
    cash_invincible_item_code () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    cash_invincible_item_code_type&
    cash_invincible_item_code ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    cash_invincible_item_code (const cash_invincible_item_code_type& x);

    //@}

    /**
     * @name cash_invincible_item_count
     *
     * @brief Accessor and modifier functions for the %cash_invincible_item_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte cash_invincible_item_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< cash_invincible_item_count_type, wchar_t > cash_invincible_item_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const cash_invincible_item_count_type&
    cash_invincible_item_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    cash_invincible_item_count_type&
    cash_invincible_item_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    cash_invincible_item_count (const cash_invincible_item_count_type& x);

    //@}

    /**
     * @name free_invincible_min
     *
     * @brief Accessor and modifier functions for the %free_invincible_min
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int free_invincible_min_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< free_invincible_min_type, wchar_t > free_invincible_min_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const free_invincible_min_type&
    free_invincible_min () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    free_invincible_min_type&
    free_invincible_min ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    free_invincible_min (const free_invincible_min_type& x);

    //@}

    /**
     * @name free_invincible_item_code_1
     *
     * @brief Accessor and modifier functions for the %free_invincible_item_code_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int free_invincible_item_code_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< free_invincible_item_code_1_type, wchar_t > free_invincible_item_code_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const free_invincible_item_code_1_type&
    free_invincible_item_code_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    free_invincible_item_code_1_type&
    free_invincible_item_code_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    free_invincible_item_code_1 (const free_invincible_item_code_1_type& x);

    //@}

    /**
     * @name free_invincible_item_count_1
     *
     * @brief Accessor and modifier functions for the %free_invincible_item_count_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte free_invincible_item_count_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< free_invincible_item_count_1_type, wchar_t > free_invincible_item_count_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const free_invincible_item_count_1_type&
    free_invincible_item_count_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    free_invincible_item_count_1_type&
    free_invincible_item_count_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    free_invincible_item_count_1 (const free_invincible_item_count_1_type& x);

    //@}

    /**
     * @name free_invincible_item_code_2
     *
     * @brief Accessor and modifier functions for the %free_invincible_item_code_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int free_invincible_item_code_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< free_invincible_item_code_2_type, wchar_t > free_invincible_item_code_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const free_invincible_item_code_2_type&
    free_invincible_item_code_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    free_invincible_item_code_2_type&
    free_invincible_item_code_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    free_invincible_item_code_2 (const free_invincible_item_code_2_type& x);

    //@}

    /**
     * @name free_invincible_item_count_2
     *
     * @brief Accessor and modifier functions for the %free_invincible_item_count_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte free_invincible_item_count_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< free_invincible_item_count_2_type, wchar_t > free_invincible_item_count_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const free_invincible_item_count_2_type&
    free_invincible_item_count_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    free_invincible_item_count_2_type&
    free_invincible_item_count_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    free_invincible_item_count_2 (const free_invincible_item_count_2_type& x);

    //@}

    /**
     * @name free_invincible_item_code_3
     *
     * @brief Accessor and modifier functions for the %free_invincible_item_code_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int free_invincible_item_code_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< free_invincible_item_code_3_type, wchar_t > free_invincible_item_code_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const free_invincible_item_code_3_type&
    free_invincible_item_code_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    free_invincible_item_code_3_type&
    free_invincible_item_code_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    free_invincible_item_code_3 (const free_invincible_item_code_3_type& x);

    //@}

    /**
     * @name free_invincible_item_count_3
     *
     * @brief Accessor and modifier functions for the %free_invincible_item_count_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte free_invincible_item_count_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< free_invincible_item_count_3_type, wchar_t > free_invincible_item_count_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const free_invincible_item_count_3_type&
    free_invincible_item_count_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    free_invincible_item_count_3_type&
    free_invincible_item_count_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    free_invincible_item_count_3 (const free_invincible_item_count_3_type& x);

    //@}

    /**
     * @name can_destory
     *
     * @brief Accessor and modifier functions for the %can_destory
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean can_destory_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< can_destory_type, wchar_t > can_destory_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const can_destory_type&
    can_destory () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    can_destory_type&
    can_destory ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    can_destory (const can_destory_type& x);

    //@}

    /**
     * @name invincible_cooltime_sec
     *
     * @brief Accessor and modifier functions for the %invincible_cooltime_sec
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int invincible_cooltime_sec_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< invincible_cooltime_sec_type, wchar_t > invincible_cooltime_sec_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const invincible_cooltime_sec_type&
    invincible_cooltime_sec () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    invincible_cooltime_sec_type&
    invincible_cooltime_sec ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    invincible_cooltime_sec (const invincible_cooltime_sec_type& x);

    //@}

    /**
     * @name stack_count
     *
     * @brief Accessor and modifier functions for the %stack_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte stack_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< stack_count_type, wchar_t > stack_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const stack_count_type&
    stack_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    stack_count_type&
    stack_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    stack_count (const stack_count_type& x);

    //@}

    /**
     * @name sell_cost_type
     *
     * @brief Accessor and modifier functions for the %sell_cost_type
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::cost_type_t sell_cost_type_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< sell_cost_type_type, wchar_t > sell_cost_type_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const sell_cost_type_type&
    sell_cost_type () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    sell_cost_type_type&
    sell_cost_type ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    sell_cost_type (const sell_cost_type_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    sell_cost_type (::std::unique_ptr< sell_cost_type_type > p);

    //@}

    /**
     * @name sell_cost
     *
     * @brief Accessor and modifier functions for the %sell_cost
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int sell_cost_type1;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< sell_cost_type1, wchar_t > sell_cost_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const sell_cost_type1&
    sell_cost () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    sell_cost_type1&
    sell_cost ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    sell_cost (const sell_cost_type1& x);

    //@}

    /**
     * @name buy_cost_type_1
     *
     * @brief Accessor and modifier functions for the %buy_cost_type_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::cost_type_t buy_cost_type_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< buy_cost_type_1_type, wchar_t > buy_cost_type_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const buy_cost_type_1_type&
    buy_cost_type_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    buy_cost_type_1_type&
    buy_cost_type_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    buy_cost_type_1 (const buy_cost_type_1_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    buy_cost_type_1 (::std::unique_ptr< buy_cost_type_1_type > p);

    //@}

    /**
     * @name buy_cost_1
     *
     * @brief Accessor and modifier functions for the %buy_cost_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int buy_cost_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< buy_cost_1_type, wchar_t > buy_cost_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const buy_cost_1_type&
    buy_cost_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    buy_cost_1_type&
    buy_cost_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    buy_cost_1 (const buy_cost_1_type& x);

    //@}

    /**
     * @name buy_cost_type_2
     *
     * @brief Accessor and modifier functions for the %buy_cost_type_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::gdt::cost_type_t buy_cost_type_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< buy_cost_type_2_type, wchar_t > buy_cost_type_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const buy_cost_type_2_type&
    buy_cost_type_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    buy_cost_type_2_type&
    buy_cost_type_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    buy_cost_type_2 (const buy_cost_type_2_type& x);

    /**
     * @brief Set the attribute value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    buy_cost_type_2 (::std::unique_ptr< buy_cost_type_2_type > p);

    //@}

    /**
     * @name buy_cost_2
     *
     * @brief Accessor and modifier functions for the %buy_cost_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_int buy_cost_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< buy_cost_2_type, wchar_t > buy_cost_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const buy_cost_2_type&
    buy_cost_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    buy_cost_2_type&
    buy_cost_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    buy_cost_2 (const buy_cost_2_type& x);

    //@}

    /**
     * @name function_script_1
     *
     * @brief Accessor and modifier functions for the %function_script_1
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte function_script_1_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< function_script_1_type, wchar_t > function_script_1_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const function_script_1_type&
    function_script_1 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    function_script_1_type&
    function_script_1 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    function_script_1 (const function_script_1_type& x);

    //@}

    /**
     * @name function_script_2
     *
     * @brief Accessor and modifier functions for the %function_script_2
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte function_script_2_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< function_script_2_type, wchar_t > function_script_2_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const function_script_2_type&
    function_script_2 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    function_script_2_type&
    function_script_2 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    function_script_2 (const function_script_2_type& x);

    //@}

    /**
     * @name function_script_3
     *
     * @brief Accessor and modifier functions for the %function_script_3
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte function_script_3_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< function_script_3_type, wchar_t > function_script_3_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const function_script_3_type&
    function_script_3 () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    function_script_3_type&
    function_script_3 ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    function_script_3 (const function_script_3_type& x);

    //@}

    /**
     * @name mercenary_count
     *
     * @brief Accessor and modifier functions for the %mercenary_count
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::unsigned_byte mercenary_count_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< mercenary_count_type, wchar_t > mercenary_count_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const mercenary_count_type&
    mercenary_count () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    mercenary_count_type&
    mercenary_count ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    mercenary_count (const mercenary_count_type& x);

    //@}

    /**
     * @name is_core_building
     *
     * @brief Accessor and modifier functions for the %is_core_building
     * required attribute.
     */
    //@{

    /**
     * @brief Attribute type.
     */
    typedef ::xml_schema::boolean is_core_building_type;

    /**
     * @brief Attribute traits type.
     */
    typedef ::xsd::cxx::tree::traits< is_core_building_type, wchar_t > is_core_building_traits;

    /**
     * @brief Return a read-only (constant) reference to the attribute.
     *
     * @return A constant reference to the attribute.
     */
    const is_core_building_type&
    is_core_building () const;

    /**
     * @brief Return a read-write reference to the attribute.
     *
     * @return A reference to the attribute.
     */
    is_core_building_type&
    is_core_building ();

    /**
     * @brief Set the attribute value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the attribute.
     */
    void
    is_core_building (const is_core_building_type& x);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Default constructor.
     *
     * Note that this constructor leaves required elements and
     * attributes uninitialized.
     */
    building_t ();

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    building_t (const building_code_type&,
                const building_icon_type&,
                const anchor_owner_type&,
                const modeling_radius_size_type&,
                const check_building_code_1_type&,
                const check_distance_1_type&,
                const check_building_code_2_type&,
                const check_distance_2_type&,
                const cool_time_type&,
                const dominon_type_type&,
                const is_mark_map_type&,
                const map_mark_icon_type&,
                const modeling_name_type&,
                const foundation_effect_type&,
                const foundation_health_point_type&,
                const foundation_regist_type&,
                const foundation_live_sec_type&,
                const inventory_count_type&,
                const building_materials_1_type&,
                const building_materials_count_1_type&,
                const building_materials_2_type&,
                const building_materials_count_2_type&,
                const building_materials_3_type&,
                const building_materials_count_3_type&,
                const building_materials_4_type&,
                const building_materials_count_4_type&,
                const building_materials_5_type&,
                const building_materials_count_5_type&,
                const build_animation_type&,
                const build_sec_type&,
                const build_effect_type&,
                const broken_animation_type&,
                const broken_effect_type&,
                const complete_modeling_type&,
                const complete_effect_type&,
                const complete_health_point_type&,
                const complete_regist_type&,
                const limit_active_sec_type&,
                const active_animation_type&,
                const active_effect_type&,
                const inative_animation_type&,
                const inactive_effect_type&,
                const consume_sec_1_type&,
                const consume_item_code_1_type&,
                const consume_item_count_1_type&,
                const consume_sec_2_type&,
                const consume_item_code_2_type&,
                const consume_item_count_2_type&,
                const consume_sec_3_type&,
                const consume_item_code_3_type&,
                const consume_item_count_3_type&,
                const so_skill_code_1_type&,
                const so_skill_cast_type_1_type&,
                const auto_sec_1_type&,
                const so_skill_code_2_type&,
                const so_skill_cast_type_2_type&,
                const auto_sec_2_type&,
                const so_skill_code_3_type&,
                const so_skill_cast_type_3_type&,
                const auto_sec_3_type&,
                const produce_resources_code_type&,
                const select_produce_resources_code_type&,
                const select_produce_count_type&,
                const produce_special_commodity_code_type&,
                const produce_entrust_count_type&,
                const deal_entrust_count_type&,
                const mercenary_inventory_count_type&,
                const production_inventory_count_type&,
                const select_production_inventory_count_type&,
                const cash_invincible_min_type&,
                const cash_invincible_item_code_type&,
                const cash_invincible_item_count_type&,
                const free_invincible_min_type&,
                const free_invincible_item_code_1_type&,
                const free_invincible_item_count_1_type&,
                const free_invincible_item_code_2_type&,
                const free_invincible_item_count_2_type&,
                const free_invincible_item_code_3_type&,
                const free_invincible_item_count_3_type&,
                const can_destory_type&,
                const invincible_cooltime_sec_type&,
                const stack_count_type&,
                const sell_cost_type_type&,
                const sell_cost_type1&,
                const buy_cost_type_1_type&,
                const buy_cost_1_type&,
                const buy_cost_type_2_type&,
                const buy_cost_2_type&,
                const function_script_1_type&,
                const function_script_2_type&,
                const function_script_3_type&,
                const mercenary_count_type&,
                const is_core_building_type&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    building_t (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    building_t (const building_t& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual building_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    building_t&
    operator= (const building_t& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~building_t ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< building_code_type > building_code_;
    ::xsd::cxx::tree::one< building_icon_type > building_icon_;
    ::xsd::cxx::tree::one< anchor_owner_type > anchor_owner_;
    ::xsd::cxx::tree::one< modeling_radius_size_type > modeling_radius_size_;
    ::xsd::cxx::tree::one< check_building_code_1_type > check_building_code_1_;
    ::xsd::cxx::tree::one< check_distance_1_type > check_distance_1_;
    ::xsd::cxx::tree::one< check_building_code_2_type > check_building_code_2_;
    ::xsd::cxx::tree::one< check_distance_2_type > check_distance_2_;
    ::xsd::cxx::tree::one< cool_time_type > cool_time_;
    ::xsd::cxx::tree::one< dominon_type_type > dominon_type_;
    ::xsd::cxx::tree::one< is_mark_map_type > is_mark_map_;
    ::xsd::cxx::tree::one< map_mark_icon_type > map_mark_icon_;
    ::xsd::cxx::tree::one< modeling_name_type > modeling_name_;
    ::xsd::cxx::tree::one< foundation_effect_type > foundation_effect_;
    ::xsd::cxx::tree::one< foundation_health_point_type > foundation_health_point_;
    ::xsd::cxx::tree::one< foundation_regist_type > foundation_regist_;
    ::xsd::cxx::tree::one< foundation_live_sec_type > foundation_live_sec_;
    ::xsd::cxx::tree::one< inventory_count_type > inventory_count_;
    ::xsd::cxx::tree::one< building_materials_1_type > building_materials_1_;
    ::xsd::cxx::tree::one< building_materials_count_1_type > building_materials_count_1_;
    ::xsd::cxx::tree::one< building_materials_2_type > building_materials_2_;
    ::xsd::cxx::tree::one< building_materials_count_2_type > building_materials_count_2_;
    ::xsd::cxx::tree::one< building_materials_3_type > building_materials_3_;
    ::xsd::cxx::tree::one< building_materials_count_3_type > building_materials_count_3_;
    ::xsd::cxx::tree::one< building_materials_4_type > building_materials_4_;
    ::xsd::cxx::tree::one< building_materials_count_4_type > building_materials_count_4_;
    ::xsd::cxx::tree::one< building_materials_5_type > building_materials_5_;
    ::xsd::cxx::tree::one< building_materials_count_5_type > building_materials_count_5_;
    ::xsd::cxx::tree::one< build_animation_type > build_animation_;
    ::xsd::cxx::tree::one< build_sec_type > build_sec_;
    ::xsd::cxx::tree::one< build_effect_type > build_effect_;
    ::xsd::cxx::tree::one< broken_animation_type > broken_animation_;
    ::xsd::cxx::tree::one< broken_effect_type > broken_effect_;
    ::xsd::cxx::tree::one< complete_modeling_type > complete_modeling_;
    ::xsd::cxx::tree::one< complete_effect_type > complete_effect_;
    ::xsd::cxx::tree::one< complete_health_point_type > complete_health_point_;
    ::xsd::cxx::tree::one< complete_regist_type > complete_regist_;
    ::xsd::cxx::tree::one< limit_active_sec_type > limit_active_sec_;
    ::xsd::cxx::tree::one< active_animation_type > active_animation_;
    ::xsd::cxx::tree::one< active_effect_type > active_effect_;
    ::xsd::cxx::tree::one< inative_animation_type > inative_animation_;
    ::xsd::cxx::tree::one< inactive_effect_type > inactive_effect_;
    ::xsd::cxx::tree::one< consume_sec_1_type > consume_sec_1_;
    ::xsd::cxx::tree::one< consume_item_code_1_type > consume_item_code_1_;
    ::xsd::cxx::tree::one< consume_item_count_1_type > consume_item_count_1_;
    ::xsd::cxx::tree::one< consume_sec_2_type > consume_sec_2_;
    ::xsd::cxx::tree::one< consume_item_code_2_type > consume_item_code_2_;
    ::xsd::cxx::tree::one< consume_item_count_2_type > consume_item_count_2_;
    ::xsd::cxx::tree::one< consume_sec_3_type > consume_sec_3_;
    ::xsd::cxx::tree::one< consume_item_code_3_type > consume_item_code_3_;
    ::xsd::cxx::tree::one< consume_item_count_3_type > consume_item_count_3_;
    ::xsd::cxx::tree::one< so_skill_code_1_type > so_skill_code_1_;
    ::xsd::cxx::tree::one< so_skill_cast_type_1_type > so_skill_cast_type_1_;
    ::xsd::cxx::tree::one< auto_sec_1_type > auto_sec_1_;
    ::xsd::cxx::tree::one< so_skill_code_2_type > so_skill_code_2_;
    ::xsd::cxx::tree::one< so_skill_cast_type_2_type > so_skill_cast_type_2_;
    ::xsd::cxx::tree::one< auto_sec_2_type > auto_sec_2_;
    ::xsd::cxx::tree::one< so_skill_code_3_type > so_skill_code_3_;
    ::xsd::cxx::tree::one< so_skill_cast_type_3_type > so_skill_cast_type_3_;
    ::xsd::cxx::tree::one< auto_sec_3_type > auto_sec_3_;
    ::xsd::cxx::tree::one< produce_resources_code_type > produce_resources_code_;
    ::xsd::cxx::tree::one< select_produce_resources_code_type > select_produce_resources_code_;
    ::xsd::cxx::tree::one< select_produce_count_type > select_produce_count_;
    ::xsd::cxx::tree::one< produce_special_commodity_code_type > produce_special_commodity_code_;
    ::xsd::cxx::tree::one< produce_entrust_count_type > produce_entrust_count_;
    ::xsd::cxx::tree::one< deal_entrust_count_type > deal_entrust_count_;
    ::xsd::cxx::tree::one< mercenary_inventory_count_type > mercenary_inventory_count_;
    ::xsd::cxx::tree::one< production_inventory_count_type > production_inventory_count_;
    ::xsd::cxx::tree::one< select_production_inventory_count_type > select_production_inventory_count_;
    ::xsd::cxx::tree::one< cash_invincible_min_type > cash_invincible_min_;
    ::xsd::cxx::tree::one< cash_invincible_item_code_type > cash_invincible_item_code_;
    ::xsd::cxx::tree::one< cash_invincible_item_count_type > cash_invincible_item_count_;
    ::xsd::cxx::tree::one< free_invincible_min_type > free_invincible_min_;
    ::xsd::cxx::tree::one< free_invincible_item_code_1_type > free_invincible_item_code_1_;
    ::xsd::cxx::tree::one< free_invincible_item_count_1_type > free_invincible_item_count_1_;
    ::xsd::cxx::tree::one< free_invincible_item_code_2_type > free_invincible_item_code_2_;
    ::xsd::cxx::tree::one< free_invincible_item_count_2_type > free_invincible_item_count_2_;
    ::xsd::cxx::tree::one< free_invincible_item_code_3_type > free_invincible_item_code_3_;
    ::xsd::cxx::tree::one< free_invincible_item_count_3_type > free_invincible_item_count_3_;
    ::xsd::cxx::tree::one< can_destory_type > can_destory_;
    ::xsd::cxx::tree::one< invincible_cooltime_sec_type > invincible_cooltime_sec_;
    ::xsd::cxx::tree::one< stack_count_type > stack_count_;
    ::xsd::cxx::tree::one< sell_cost_type_type > sell_cost_type_;
    ::xsd::cxx::tree::one< sell_cost_type1 > sell_cost_;
    ::xsd::cxx::tree::one< buy_cost_type_1_type > buy_cost_type_1_;
    ::xsd::cxx::tree::one< buy_cost_1_type > buy_cost_1_;
    ::xsd::cxx::tree::one< buy_cost_type_2_type > buy_cost_type_2_;
    ::xsd::cxx::tree::one< buy_cost_2_type > buy_cost_2_;
    ::xsd::cxx::tree::one< function_script_1_type > function_script_1_;
    ::xsd::cxx::tree::one< function_script_2_type > function_script_2_;
    ::xsd::cxx::tree::one< function_script_3_type > function_script_3_;
    ::xsd::cxx::tree::one< mercenary_count_type > mercenary_count_;
    ::xsd::cxx::tree::one< is_core_building_type > is_core_building_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %so_skill_cast_type_t schema type.
   *
   * @nosubgrouping
   */
  class GIDEON_CS_API so_skill_cast_type_t: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >
  {
    public:
    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Default constructor.
     *
     * Note that this constructor leaves required elements and
     * attributes uninitialized.
     */
    so_skill_cast_type_t ();

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    so_skill_cast_type_t (const ::xml_schema::unsigned_byte&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    so_skill_cast_type_t (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    so_skill_cast_type_t (const ::xercesc::DOMAttr& a,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    so_skill_cast_type_t (const ::std::wstring& s,
                          const ::xercesc::DOMElement* e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    so_skill_cast_type_t (const so_skill_cast_type_t& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual so_skill_cast_type_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~so_skill_cast_type_t ();
  };

  /**
   * @brief Class corresponding to the %building_table schema type.
   *
   * @nosubgrouping
   */
  class GIDEON_CS_API building_table: public ::xml_schema::type
  {
    public:
    /**
     * @name building_template
     *
     * @brief Accessor and modifier functions for the %building_template
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::gdt::building_t building_template_type;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< building_template_type > building_template_sequence;

    /**
     * @brief Element iterator type.
     */
    typedef building_template_sequence::iterator building_template_iterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef building_template_sequence::const_iterator building_template_const_iterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< building_template_type, wchar_t > building_template_traits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const building_template_sequence&
    building_template () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    building_template_sequence&
    building_template ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    building_template (const building_template_sequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    building_table ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    building_table (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    building_table (const building_table& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual building_table*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    building_table&
    operator= (const building_table& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~building_table ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
           ::xml_schema::flags);

    protected:
    building_template_sequence building_template_;

    //@endcond
  };
}

#ifndef XSD_DONT_INCLUDE_INLINE

#include "shared_types.ixx"

#endif // XSD_DONT_INCLUDE_INLINE

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace gdt
{
  /**
   * @name Parsing functions for the %building_table document root.
   */
  //@{

  /**
   * @brief Parse a URI or a local file.
   *
   * @param uri A URI or a local file name.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (const ::std::wstring& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a URI or a local file with an error handler.
   *
   * @param uri A URI or a local file name.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (const ::std::wstring& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a URI or a local file with a Xerces-C++ DOM error
   * handler.
   *
   * @param uri A URI or a local file name.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (const ::std::wstring& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream.
   *
   * @param is A standrad input stream.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with an error handler.
   *
   * @param is A standrad input stream.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with a Xerces-C++ DOM error
   * handler.
   *
   * @param is A standrad input stream.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with a resource id.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function uses exceptions to report parsing errors.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with a resource id and an
   * error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a standard input stream with a resource id and a
   * Xerces-C++ DOM error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::std::istream& is,
                   const ::std::wstring& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ input source.
   *
   * @param is A Xerces-C++ input source.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ input source with an error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
   * error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A pointer to the Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function is normally used together with the keep_dom and
   * own_dom parsing flags to assign ownership of the DOM document
   * to the object model.
   */
  GIDEON_CS_API
  ::std::unique_ptr< ::gdt::building_table >
  building_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

  //@}
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace gdt
{
  /**
   * @name Serialization functions for the %building_table document root.
   */
  //@{

  /**
   * @brief Serialize to a standard output stream.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  GIDEON_CS_API
  void
  building_table_ (::std::ostream& os,
                   const ::gdt::building_table& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a standard output stream with an error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  GIDEON_CS_API
  void
  building_table_ (::std::ostream& os,
                   const ::gdt::building_table& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a standard output stream with a Xerces-C++ DOM
   * error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  GIDEON_CS_API
  void
  building_table_ (::std::ostream& os,
                   const ::gdt::building_table& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  GIDEON_CS_API
  void
  building_table_ (::xercesc::XMLFormatTarget& ft,
                   const ::gdt::building_table& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with an error
   * handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  GIDEON_CS_API
  void
  building_table_ (::xercesc::XMLFormatTarget& ft,
                   const ::gdt::building_table& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with a
   * Xerces-C++ DOM error handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  GIDEON_CS_API
  void
  building_table_ (::xercesc::XMLFormatTarget& ft,
                   const ::gdt::building_table& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to an existing Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param x An object model to serialize.
   * @param f Serialization flags.
   *
   * Note that it is your responsibility to create the DOM document
   * with the correct root element as well as set the necessary
   * namespace mapping attributes.
   */
  GIDEON_CS_API
  void
  building_table_ (::xercesc::DOMDocument& d,
                   const ::gdt::building_table& x,
                   ::xml_schema::flags f = 0);

  /**
   * @brief Serialize to a new Xerces-C++ DOM document.
   *
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param f Serialization flags.
   * @return A pointer to the new Xerces-C++ DOM document.
   */
  GIDEON_CS_API
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  building_table_ (const ::gdt::building_table& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

  //@}

  GIDEON_CS_API
  void
  operator<< (::xercesc::DOMElement&, const building_t&);

  GIDEON_CS_API
  void
  operator<< (::xercesc::DOMElement&, const so_skill_cast_type_t&);

  GIDEON_CS_API
  void
  operator<< (::xercesc::DOMAttr&, const so_skill_cast_type_t&);

  GIDEON_CS_API
  void
  operator<< (::xml_schema::list_stream&,
              const so_skill_cast_type_t&);

  GIDEON_CS_API
  void
  operator<< (::xercesc::DOMElement&, const building_table&);
}

#ifndef XSD_DONT_INCLUDE_INLINE
#include "building_table.ixx"
#endif // XSD_DONT_INCLUDE_INLINE

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_BUILDING_TABLE_HXX
