// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_EVENT_TRIGGER_TABLE_IXX
#define GDT_EVENT_TRIGGER_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // evt_t
  // 

  inline
  const evt_t::map_code_type& evt_t::
  map_code () const
  {
    return this->map_code_.get ();
  }

  inline
  evt_t::map_code_type& evt_t::
  map_code ()
  {
    return this->map_code_.get ();
  }

  inline
  void evt_t::
  map_code (const map_code_type& x)
  {
    this->map_code_.set (x);
  }

  inline
  void evt_t::
  map_code (::std::unique_ptr< map_code_type > x)
  {
    this->map_code_.set (std::move (x));
  }

  inline
  const evt_t::entity_code_type& evt_t::
  entity_code () const
  {
    return this->entity_code_.get ();
  }

  inline
  evt_t::entity_code_type& evt_t::
  entity_code ()
  {
    return this->entity_code_.get ();
  }

  inline
  void evt_t::
  entity_code (const entity_code_type& x)
  {
    this->entity_code_.set (x);
  }

  inline
  void evt_t::
  entity_code (::std::unique_ptr< entity_code_type > x)
  {
    this->entity_code_.set (std::move (x));
  }

  inline
  const evt_t::event_type_type& evt_t::
  event_type () const
  {
    return this->event_type_.get ();
  }

  inline
  evt_t::event_type_type& evt_t::
  event_type ()
  {
    return this->event_type_.get ();
  }

  inline
  void evt_t::
  event_type (const event_type_type& x)
  {
    this->event_type_.set (x);
  }

  inline
  void evt_t::
  event_type (::std::unique_ptr< event_type_type > x)
  {
    this->event_type_.set (std::move (x));
  }

  inline
  const evt_t::event_phase_mask_type& evt_t::
  event_phase_mask () const
  {
    return this->event_phase_mask_.get ();
  }

  inline
  evt_t::event_phase_mask_type& evt_t::
  event_phase_mask ()
  {
    return this->event_phase_mask_.get ();
  }

  inline
  void evt_t::
  event_phase_mask (const event_phase_mask_type& x)
  {
    this->event_phase_mask_.set (x);
  }

  inline
  const evt_t::event_chance_type& evt_t::
  event_chance () const
  {
    return this->event_chance_.get ();
  }

  inline
  evt_t::event_chance_type& evt_t::
  event_chance ()
  {
    return this->event_chance_.get ();
  }

  inline
  void evt_t::
  event_chance (const event_chance_type& x)
  {
    this->event_chance_.set (x);
  }

  inline
  const evt_t::event_flags_type& evt_t::
  event_flags () const
  {
    return this->event_flags_.get ();
  }

  inline
  evt_t::event_flags_type& evt_t::
  event_flags ()
  {
    return this->event_flags_.get ();
  }

  inline
  void evt_t::
  event_flags (const event_flags_type& x)
  {
    this->event_flags_.set (x);
  }

  inline
  const evt_t::event_param1_type& evt_t::
  event_param1 () const
  {
    return this->event_param1_.get ();
  }

  inline
  evt_t::event_param1_type& evt_t::
  event_param1 ()
  {
    return this->event_param1_.get ();
  }

  inline
  void evt_t::
  event_param1 (const event_param1_type& x)
  {
    this->event_param1_.set (x);
  }

  inline
  void evt_t::
  event_param1 (::std::unique_ptr< event_param1_type > x)
  {
    this->event_param1_.set (std::move (x));
  }

  inline
  const evt_t::event_param2_type& evt_t::
  event_param2 () const
  {
    return this->event_param2_.get ();
  }

  inline
  evt_t::event_param2_type& evt_t::
  event_param2 ()
  {
    return this->event_param2_.get ();
  }

  inline
  void evt_t::
  event_param2 (const event_param2_type& x)
  {
    this->event_param2_.set (x);
  }

  inline
  void evt_t::
  event_param2 (::std::unique_ptr< event_param2_type > x)
  {
    this->event_param2_.set (std::move (x));
  }

  inline
  const evt_t::event_param3_type& evt_t::
  event_param3 () const
  {
    return this->event_param3_.get ();
  }

  inline
  evt_t::event_param3_type& evt_t::
  event_param3 ()
  {
    return this->event_param3_.get ();
  }

  inline
  void evt_t::
  event_param3 (const event_param3_type& x)
  {
    this->event_param3_.set (x);
  }

  inline
  void evt_t::
  event_param3 (::std::unique_ptr< event_param3_type > x)
  {
    this->event_param3_.set (std::move (x));
  }

  inline
  const evt_t::event_param4_type& evt_t::
  event_param4 () const
  {
    return this->event_param4_.get ();
  }

  inline
  evt_t::event_param4_type& evt_t::
  event_param4 ()
  {
    return this->event_param4_.get ();
  }

  inline
  void evt_t::
  event_param4 (const event_param4_type& x)
  {
    this->event_param4_.set (x);
  }

  inline
  void evt_t::
  event_param4 (::std::unique_ptr< event_param4_type > x)
  {
    this->event_param4_.set (std::move (x));
  }

  inline
  const evt_t::action1_type_type& evt_t::
  action1_type () const
  {
    return this->action1_type_.get ();
  }

  inline
  evt_t::action1_type_type& evt_t::
  action1_type ()
  {
    return this->action1_type_.get ();
  }

  inline
  void evt_t::
  action1_type (const action1_type_type& x)
  {
    this->action1_type_.set (x);
  }

  inline
  void evt_t::
  action1_type (::std::unique_ptr< action1_type_type > x)
  {
    this->action1_type_.set (std::move (x));
  }

  inline
  const evt_t::action1_param1_type& evt_t::
  action1_param1 () const
  {
    return this->action1_param1_.get ();
  }

  inline
  evt_t::action1_param1_type& evt_t::
  action1_param1 ()
  {
    return this->action1_param1_.get ();
  }

  inline
  void evt_t::
  action1_param1 (const action1_param1_type& x)
  {
    this->action1_param1_.set (x);
  }

  inline
  void evt_t::
  action1_param1 (::std::unique_ptr< action1_param1_type > x)
  {
    this->action1_param1_.set (std::move (x));
  }

  inline
  const evt_t::action1_param2_type& evt_t::
  action1_param2 () const
  {
    return this->action1_param2_.get ();
  }

  inline
  evt_t::action1_param2_type& evt_t::
  action1_param2 ()
  {
    return this->action1_param2_.get ();
  }

  inline
  void evt_t::
  action1_param2 (const action1_param2_type& x)
  {
    this->action1_param2_.set (x);
  }

  inline
  void evt_t::
  action1_param2 (::std::unique_ptr< action1_param2_type > x)
  {
    this->action1_param2_.set (std::move (x));
  }

  inline
  const evt_t::action1_param3_type& evt_t::
  action1_param3 () const
  {
    return this->action1_param3_.get ();
  }

  inline
  evt_t::action1_param3_type& evt_t::
  action1_param3 ()
  {
    return this->action1_param3_.get ();
  }

  inline
  void evt_t::
  action1_param3 (const action1_param3_type& x)
  {
    this->action1_param3_.set (x);
  }

  inline
  void evt_t::
  action1_param3 (::std::unique_ptr< action1_param3_type > x)
  {
    this->action1_param3_.set (std::move (x));
  }

  inline
  const evt_t::action1_param4_type& evt_t::
  action1_param4 () const
  {
    return this->action1_param4_.get ();
  }

  inline
  evt_t::action1_param4_type& evt_t::
  action1_param4 ()
  {
    return this->action1_param4_.get ();
  }

  inline
  void evt_t::
  action1_param4 (const action1_param4_type& x)
  {
    this->action1_param4_.set (x);
  }

  inline
  void evt_t::
  action1_param4 (::std::unique_ptr< action1_param4_type > x)
  {
    this->action1_param4_.set (std::move (x));
  }

  inline
  const evt_t::action1_param5_type& evt_t::
  action1_param5 () const
  {
    return this->action1_param5_.get ();
  }

  inline
  evt_t::action1_param5_type& evt_t::
  action1_param5 ()
  {
    return this->action1_param5_.get ();
  }

  inline
  void evt_t::
  action1_param5 (const action1_param5_type& x)
  {
    this->action1_param5_.set (x);
  }

  inline
  void evt_t::
  action1_param5 (::std::unique_ptr< action1_param5_type > x)
  {
    this->action1_param5_.set (std::move (x));
  }

  inline
  const evt_t::action2_type_type& evt_t::
  action2_type () const
  {
    return this->action2_type_.get ();
  }

  inline
  evt_t::action2_type_type& evt_t::
  action2_type ()
  {
    return this->action2_type_.get ();
  }

  inline
  void evt_t::
  action2_type (const action2_type_type& x)
  {
    this->action2_type_.set (x);
  }

  inline
  void evt_t::
  action2_type (::std::unique_ptr< action2_type_type > x)
  {
    this->action2_type_.set (std::move (x));
  }

  inline
  const evt_t::action2_param1_type& evt_t::
  action2_param1 () const
  {
    return this->action2_param1_.get ();
  }

  inline
  evt_t::action2_param1_type& evt_t::
  action2_param1 ()
  {
    return this->action2_param1_.get ();
  }

  inline
  void evt_t::
  action2_param1 (const action2_param1_type& x)
  {
    this->action2_param1_.set (x);
  }

  inline
  void evt_t::
  action2_param1 (::std::unique_ptr< action2_param1_type > x)
  {
    this->action2_param1_.set (std::move (x));
  }

  inline
  const evt_t::action2_param2_type& evt_t::
  action2_param2 () const
  {
    return this->action2_param2_.get ();
  }

  inline
  evt_t::action2_param2_type& evt_t::
  action2_param2 ()
  {
    return this->action2_param2_.get ();
  }

  inline
  void evt_t::
  action2_param2 (const action2_param2_type& x)
  {
    this->action2_param2_.set (x);
  }

  inline
  void evt_t::
  action2_param2 (::std::unique_ptr< action2_param2_type > x)
  {
    this->action2_param2_.set (std::move (x));
  }

  inline
  const evt_t::action2_param3_type& evt_t::
  action2_param3 () const
  {
    return this->action2_param3_.get ();
  }

  inline
  evt_t::action2_param3_type& evt_t::
  action2_param3 ()
  {
    return this->action2_param3_.get ();
  }

  inline
  void evt_t::
  action2_param3 (const action2_param3_type& x)
  {
    this->action2_param3_.set (x);
  }

  inline
  void evt_t::
  action2_param3 (::std::unique_ptr< action2_param3_type > x)
  {
    this->action2_param3_.set (std::move (x));
  }

  inline
  const evt_t::action2_param4_type& evt_t::
  action2_param4 () const
  {
    return this->action2_param4_.get ();
  }

  inline
  evt_t::action2_param4_type& evt_t::
  action2_param4 ()
  {
    return this->action2_param4_.get ();
  }

  inline
  void evt_t::
  action2_param4 (const action2_param4_type& x)
  {
    this->action2_param4_.set (x);
  }

  inline
  void evt_t::
  action2_param4 (::std::unique_ptr< action2_param4_type > x)
  {
    this->action2_param4_.set (std::move (x));
  }

  inline
  const evt_t::action2_param5_type& evt_t::
  action2_param5 () const
  {
    return this->action2_param5_.get ();
  }

  inline
  evt_t::action2_param5_type& evt_t::
  action2_param5 ()
  {
    return this->action2_param5_.get ();
  }

  inline
  void evt_t::
  action2_param5 (const action2_param5_type& x)
  {
    this->action2_param5_.set (x);
  }

  inline
  void evt_t::
  action2_param5 (::std::unique_ptr< action2_param5_type > x)
  {
    this->action2_param5_.set (std::move (x));
  }

  inline
  const evt_t::action3_type_type& evt_t::
  action3_type () const
  {
    return this->action3_type_.get ();
  }

  inline
  evt_t::action3_type_type& evt_t::
  action3_type ()
  {
    return this->action3_type_.get ();
  }

  inline
  void evt_t::
  action3_type (const action3_type_type& x)
  {
    this->action3_type_.set (x);
  }

  inline
  void evt_t::
  action3_type (::std::unique_ptr< action3_type_type > x)
  {
    this->action3_type_.set (std::move (x));
  }

  inline
  const evt_t::action3_param1_type& evt_t::
  action3_param1 () const
  {
    return this->action3_param1_.get ();
  }

  inline
  evt_t::action3_param1_type& evt_t::
  action3_param1 ()
  {
    return this->action3_param1_.get ();
  }

  inline
  void evt_t::
  action3_param1 (const action3_param1_type& x)
  {
    this->action3_param1_.set (x);
  }

  inline
  void evt_t::
  action3_param1 (::std::unique_ptr< action3_param1_type > x)
  {
    this->action3_param1_.set (std::move (x));
  }

  inline
  const evt_t::action3_param2_type& evt_t::
  action3_param2 () const
  {
    return this->action3_param2_.get ();
  }

  inline
  evt_t::action3_param2_type& evt_t::
  action3_param2 ()
  {
    return this->action3_param2_.get ();
  }

  inline
  void evt_t::
  action3_param2 (const action3_param2_type& x)
  {
    this->action3_param2_.set (x);
  }

  inline
  void evt_t::
  action3_param2 (::std::unique_ptr< action3_param2_type > x)
  {
    this->action3_param2_.set (std::move (x));
  }

  inline
  const evt_t::action3_param3_type& evt_t::
  action3_param3 () const
  {
    return this->action3_param3_.get ();
  }

  inline
  evt_t::action3_param3_type& evt_t::
  action3_param3 ()
  {
    return this->action3_param3_.get ();
  }

  inline
  void evt_t::
  action3_param3 (const action3_param3_type& x)
  {
    this->action3_param3_.set (x);
  }

  inline
  void evt_t::
  action3_param3 (::std::unique_ptr< action3_param3_type > x)
  {
    this->action3_param3_.set (std::move (x));
  }

  inline
  const evt_t::action3_param4_type& evt_t::
  action3_param4 () const
  {
    return this->action3_param4_.get ();
  }

  inline
  evt_t::action3_param4_type& evt_t::
  action3_param4 ()
  {
    return this->action3_param4_.get ();
  }

  inline
  void evt_t::
  action3_param4 (const action3_param4_type& x)
  {
    this->action3_param4_.set (x);
  }

  inline
  void evt_t::
  action3_param4 (::std::unique_ptr< action3_param4_type > x)
  {
    this->action3_param4_.set (std::move (x));
  }

  inline
  const evt_t::action3_param5_type& evt_t::
  action3_param5 () const
  {
    return this->action3_param5_.get ();
  }

  inline
  evt_t::action3_param5_type& evt_t::
  action3_param5 ()
  {
    return this->action3_param5_.get ();
  }

  inline
  void evt_t::
  action3_param5 (const action3_param5_type& x)
  {
    this->action3_param5_.set (x);
  }

  inline
  void evt_t::
  action3_param5 (::std::unique_ptr< action3_param5_type > x)
  {
    this->action3_param5_.set (std::move (x));
  }


  // entity_code_t
  // 


  // event_type_t
  // 


  // action_type_t
  // 


  // param_t
  // 


  // evt_table
  // 

  inline
  const evt_table::evt_template_sequence& evt_table::
  evt_template () const
  {
    return this->evt_template_;
  }

  inline
  evt_table::evt_template_sequence& evt_table::
  evt_template ()
  {
    return this->evt_template_;
  }

  inline
  void evt_table::
  evt_template (const evt_template_sequence& s)
  {
    this->evt_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_EVENT_TRIGGER_TABLE_IXX
