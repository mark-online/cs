// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_ACHIEVEMENT_TABLE_IXX
#define GDT_ACHIEVEMENT_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // achievement_t
  // 

  inline
  const achievement_t::achievement_code_type& achievement_t::
  achievement_code () const
  {
    return this->achievement_code_.get ();
  }

  inline
  achievement_t::achievement_code_type& achievement_t::
  achievement_code ()
  {
    return this->achievement_code_.get ();
  }

  inline
  void achievement_t::
  achievement_code (const achievement_code_type& x)
  {
    this->achievement_code_.set (x);
  }

  inline
  void achievement_t::
  achievement_code (::std::unique_ptr< achievement_code_type > x)
  {
    this->achievement_code_.set (std::move (x));
  }

  inline
  const achievement_t::sub_category_param_type& achievement_t::
  sub_category_param () const
  {
    return this->sub_category_param_.get ();
  }

  inline
  achievement_t::sub_category_param_type& achievement_t::
  sub_category_param ()
  {
    return this->sub_category_param_.get ();
  }

  inline
  void achievement_t::
  sub_category_param (const sub_category_param_type& x)
  {
    this->sub_category_param_.set (x);
  }

  inline
  const achievement_t::mission_type_type& achievement_t::
  mission_type () const
  {
    return this->mission_type_.get ();
  }

  inline
  achievement_t::mission_type_type& achievement_t::
  mission_type ()
  {
    return this->mission_type_.get ();
  }

  inline
  void achievement_t::
  mission_type (const mission_type_type& x)
  {
    this->mission_type_.set (x);
  }

  inline
  void achievement_t::
  mission_type (::std::unique_ptr< mission_type_type > x)
  {
    this->mission_type_.set (std::move (x));
  }

  inline
  const achievement_t::param_1_type& achievement_t::
  param_1 () const
  {
    return this->param_1_.get ();
  }

  inline
  achievement_t::param_1_type& achievement_t::
  param_1 ()
  {
    return this->param_1_.get ();
  }

  inline
  void achievement_t::
  param_1 (const param_1_type& x)
  {
    this->param_1_.set (x);
  }

  inline
  const achievement_t::param_2_type& achievement_t::
  param_2 () const
  {
    return this->param_2_.get ();
  }

  inline
  achievement_t::param_2_type& achievement_t::
  param_2 ()
  {
    return this->param_2_.get ();
  }

  inline
  void achievement_t::
  param_2 (const param_2_type& x)
  {
    this->param_2_.set (x);
  }

  inline
  const achievement_t::param_3_type& achievement_t::
  param_3 () const
  {
    return this->param_3_.get ();
  }

  inline
  achievement_t::param_3_type& achievement_t::
  param_3 ()
  {
    return this->param_3_.get ();
  }

  inline
  void achievement_t::
  param_3 (const param_3_type& x)
  {
    this->param_3_.set (x);
  }

  inline
  const achievement_t::param_4_type& achievement_t::
  param_4 () const
  {
    return this->param_4_.get ();
  }

  inline
  achievement_t::param_4_type& achievement_t::
  param_4 ()
  {
    return this->param_4_.get ();
  }

  inline
  void achievement_t::
  param_4 (const param_4_type& x)
  {
    this->param_4_.set (x);
  }

  inline
  const achievement_t::param_5_type& achievement_t::
  param_5 () const
  {
    return this->param_5_.get ();
  }

  inline
  achievement_t::param_5_type& achievement_t::
  param_5 ()
  {
    return this->param_5_.get ();
  }

  inline
  void achievement_t::
  param_5 (const param_5_type& x)
  {
    this->param_5_.set (x);
  }

  inline
  const achievement_t::param_6_type& achievement_t::
  param_6 () const
  {
    return this->param_6_.get ();
  }

  inline
  achievement_t::param_6_type& achievement_t::
  param_6 ()
  {
    return this->param_6_.get ();
  }

  inline
  void achievement_t::
  param_6 (const param_6_type& x)
  {
    this->param_6_.set (x);
  }

  inline
  const achievement_t::reward_code_1_type& achievement_t::
  reward_code_1 () const
  {
    return this->reward_code_1_.get ();
  }

  inline
  achievement_t::reward_code_1_type& achievement_t::
  reward_code_1 ()
  {
    return this->reward_code_1_.get ();
  }

  inline
  void achievement_t::
  reward_code_1 (const reward_code_1_type& x)
  {
    this->reward_code_1_.set (x);
  }

  inline
  const achievement_t::reward_value_1_type& achievement_t::
  reward_value_1 () const
  {
    return this->reward_value_1_.get ();
  }

  inline
  achievement_t::reward_value_1_type& achievement_t::
  reward_value_1 ()
  {
    return this->reward_value_1_.get ();
  }

  inline
  void achievement_t::
  reward_value_1 (const reward_value_1_type& x)
  {
    this->reward_value_1_.set (x);
  }

  inline
  const achievement_t::reward_code_2_type& achievement_t::
  reward_code_2 () const
  {
    return this->reward_code_2_.get ();
  }

  inline
  achievement_t::reward_code_2_type& achievement_t::
  reward_code_2 ()
  {
    return this->reward_code_2_.get ();
  }

  inline
  void achievement_t::
  reward_code_2 (const reward_code_2_type& x)
  {
    this->reward_code_2_.set (x);
  }

  inline
  const achievement_t::reward_value_2_type& achievement_t::
  reward_value_2 () const
  {
    return this->reward_value_2_.get ();
  }

  inline
  achievement_t::reward_value_2_type& achievement_t::
  reward_value_2 ()
  {
    return this->reward_value_2_.get ();
  }

  inline
  void achievement_t::
  reward_value_2 (const reward_value_2_type& x)
  {
    this->reward_value_2_.set (x);
  }

  inline
  const achievement_t::reward_achievement_point_type& achievement_t::
  reward_achievement_point () const
  {
    return this->reward_achievement_point_.get ();
  }

  inline
  achievement_t::reward_achievement_point_type& achievement_t::
  reward_achievement_point ()
  {
    return this->reward_achievement_point_.get ();
  }

  inline
  void achievement_t::
  reward_achievement_point (const reward_achievement_point_type& x)
  {
    this->reward_achievement_point_.set (x);
  }

  inline
  const achievement_t::icon_name_type& achievement_t::
  icon_name () const
  {
    return this->icon_name_.get ();
  }

  inline
  achievement_t::icon_name_type& achievement_t::
  icon_name ()
  {
    return this->icon_name_.get ();
  }

  inline
  void achievement_t::
  icon_name (const icon_name_type& x)
  {
    this->icon_name_.set (x);
  }

  inline
  void achievement_t::
  icon_name (::std::unique_ptr< icon_name_type > x)
  {
    this->icon_name_.set (std::move (x));
  }


  // achievement_mission_type_t
  // 


  // achievement_table
  // 

  inline
  const achievement_table::achievement_template_sequence& achievement_table::
  achievement_template () const
  {
    return this->achievement_template_;
  }

  inline
  achievement_table::achievement_template_sequence& achievement_table::
  achievement_template ()
  {
    return this->achievement_template_;
  }

  inline
  void achievement_table::
  achievement_template (const achievement_template_sequence& s)
  {
    this->achievement_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_ACHIEVEMENT_TABLE_IXX
