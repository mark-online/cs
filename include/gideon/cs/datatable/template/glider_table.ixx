// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_GLIDER_TABLE_IXX
#define GDT_GLIDER_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // glider_t
  // 

  inline
  const glider_t::glider_code_type& glider_t::
  glider_code () const
  {
    return this->glider_code_.get ();
  }

  inline
  glider_t::glider_code_type& glider_t::
  glider_code ()
  {
    return this->glider_code_.get ();
  }

  inline
  void glider_t::
  glider_code (const glider_code_type& x)
  {
    this->glider_code_.set (x);
  }

  inline
  void glider_t::
  glider_code (::std::unique_ptr< glider_code_type > x)
  {
    this->glider_code_.set (std::move (x));
  }

  inline
  const glider_t::glider_icon_name_type& glider_t::
  glider_icon_name () const
  {
    return this->glider_icon_name_.get ();
  }

  inline
  glider_t::glider_icon_name_type& glider_t::
  glider_icon_name ()
  {
    return this->glider_icon_name_.get ();
  }

  inline
  void glider_t::
  glider_icon_name (const glider_icon_name_type& x)
  {
    this->glider_icon_name_.set (x);
  }

  inline
  void glider_t::
  glider_icon_name (::std::unique_ptr< glider_icon_name_type > x)
  {
    this->glider_icon_name_.set (std::move (x));
  }

  inline
  const glider_t::cast_time_type& glider_t::
  cast_time () const
  {
    return this->cast_time_.get ();
  }

  inline
  glider_t::cast_time_type& glider_t::
  cast_time ()
  {
    return this->cast_time_.get ();
  }

  inline
  void glider_t::
  cast_time (const cast_time_type& x)
  {
    this->cast_time_.set (x);
  }

  inline
  const glider_t::org_speed_type& glider_t::
  org_speed () const
  {
    return this->org_speed_.get ();
  }

  inline
  glider_t::org_speed_type& glider_t::
  org_speed ()
  {
    return this->org_speed_.get ();
  }

  inline
  void glider_t::
  org_speed (const org_speed_type& x)
  {
    this->org_speed_.set (x);
  }

  inline
  const glider_t::glide_durability_sec_type& glider_t::
  glide_durability_sec () const
  {
    return this->glide_durability_sec_.get ();
  }

  inline
  glider_t::glide_durability_sec_type& glider_t::
  glide_durability_sec ()
  {
    return this->glide_durability_sec_.get ();
  }

  inline
  void glider_t::
  glide_durability_sec (const glide_durability_sec_type& x)
  {
    this->glide_durability_sec_.set (x);
  }

  inline
  const glider_t::repair_payment_type& glider_t::
  repair_payment () const
  {
    return this->repair_payment_.get ();
  }

  inline
  glider_t::repair_payment_type& glider_t::
  repair_payment ()
  {
    return this->repair_payment_.get ();
  }

  inline
  void glider_t::
  repair_payment (const repair_payment_type& x)
  {
    this->repair_payment_.set (x);
  }

  inline
  const glider_t::glider_ready_anim_type& glider_t::
  glider_ready_anim () const
  {
    return this->glider_ready_anim_.get ();
  }

  inline
  glider_t::glider_ready_anim_type& glider_t::
  glider_ready_anim ()
  {
    return this->glider_ready_anim_.get ();
  }

  inline
  void glider_t::
  glider_ready_anim (const glider_ready_anim_type& x)
  {
    this->glider_ready_anim_.set (x);
  }

  inline
  void glider_t::
  glider_ready_anim (::std::unique_ptr< glider_ready_anim_type > x)
  {
    this->glider_ready_anim_.set (std::move (x));
  }

  inline
  const glider_t::glider_modeling_name_type& glider_t::
  glider_modeling_name () const
  {
    return this->glider_modeling_name_.get ();
  }

  inline
  glider_t::glider_modeling_name_type& glider_t::
  glider_modeling_name ()
  {
    return this->glider_modeling_name_.get ();
  }

  inline
  void glider_t::
  glider_modeling_name (const glider_modeling_name_type& x)
  {
    this->glider_modeling_name_.set (x);
  }

  inline
  void glider_t::
  glider_modeling_name (::std::unique_ptr< glider_modeling_name_type > x)
  {
    this->glider_modeling_name_.set (std::move (x));
  }

  inline
  const glider_t::glider_ready_sound_type& glider_t::
  glider_ready_sound () const
  {
    return this->glider_ready_sound_.get ();
  }

  inline
  glider_t::glider_ready_sound_type& glider_t::
  glider_ready_sound ()
  {
    return this->glider_ready_sound_.get ();
  }

  inline
  void glider_t::
  glider_ready_sound (const glider_ready_sound_type& x)
  {
    this->glider_ready_sound_.set (x);
  }

  inline
  void glider_t::
  glider_ready_sound (::std::unique_ptr< glider_ready_sound_type > x)
  {
    this->glider_ready_sound_.set (std::move (x));
  }

  inline
  const glider_t::glider_flying_sound_type& glider_t::
  glider_flying_sound () const
  {
    return this->glider_flying_sound_.get ();
  }

  inline
  glider_t::glider_flying_sound_type& glider_t::
  glider_flying_sound ()
  {
    return this->glider_flying_sound_.get ();
  }

  inline
  void glider_t::
  glider_flying_sound (const glider_flying_sound_type& x)
  {
    this->glider_flying_sound_.set (x);
  }

  inline
  void glider_t::
  glider_flying_sound (::std::unique_ptr< glider_flying_sound_type > x)
  {
    this->glider_flying_sound_.set (std::move (x));
  }

  inline
  const glider_t::glider_fold_sound_type& glider_t::
  glider_fold_sound () const
  {
    return this->glider_fold_sound_.get ();
  }

  inline
  glider_t::glider_fold_sound_type& glider_t::
  glider_fold_sound ()
  {
    return this->glider_fold_sound_.get ();
  }

  inline
  void glider_t::
  glider_fold_sound (const glider_fold_sound_type& x)
  {
    this->glider_fold_sound_.set (x);
  }

  inline
  void glider_t::
  glider_fold_sound (::std::unique_ptr< glider_fold_sound_type > x)
  {
    this->glider_fold_sound_.set (std::move (x));
  }

  inline
  const glider_t::sell_cost_type_type& glider_t::
  sell_cost_type () const
  {
    return this->sell_cost_type_.get ();
  }

  inline
  glider_t::sell_cost_type_type& glider_t::
  sell_cost_type ()
  {
    return this->sell_cost_type_.get ();
  }

  inline
  void glider_t::
  sell_cost_type (const sell_cost_type_type& x)
  {
    this->sell_cost_type_.set (x);
  }

  inline
  void glider_t::
  sell_cost_type (::std::unique_ptr< sell_cost_type_type > x)
  {
    this->sell_cost_type_.set (std::move (x));
  }

  inline
  const glider_t::sell_cost_type1& glider_t::
  sell_cost () const
  {
    return this->sell_cost_.get ();
  }

  inline
  glider_t::sell_cost_type1& glider_t::
  sell_cost ()
  {
    return this->sell_cost_.get ();
  }

  inline
  void glider_t::
  sell_cost (const sell_cost_type1& x)
  {
    this->sell_cost_.set (x);
  }

  inline
  const glider_t::buy_cost_type_1_type& glider_t::
  buy_cost_type_1 () const
  {
    return this->buy_cost_type_1_.get ();
  }

  inline
  glider_t::buy_cost_type_1_type& glider_t::
  buy_cost_type_1 ()
  {
    return this->buy_cost_type_1_.get ();
  }

  inline
  void glider_t::
  buy_cost_type_1 (const buy_cost_type_1_type& x)
  {
    this->buy_cost_type_1_.set (x);
  }

  inline
  void glider_t::
  buy_cost_type_1 (::std::unique_ptr< buy_cost_type_1_type > x)
  {
    this->buy_cost_type_1_.set (std::move (x));
  }

  inline
  const glider_t::buy_cost_1_type& glider_t::
  buy_cost_1 () const
  {
    return this->buy_cost_1_.get ();
  }

  inline
  glider_t::buy_cost_1_type& glider_t::
  buy_cost_1 ()
  {
    return this->buy_cost_1_.get ();
  }

  inline
  void glider_t::
  buy_cost_1 (const buy_cost_1_type& x)
  {
    this->buy_cost_1_.set (x);
  }

  inline
  const glider_t::buy_cost_type_2_type& glider_t::
  buy_cost_type_2 () const
  {
    return this->buy_cost_type_2_.get ();
  }

  inline
  glider_t::buy_cost_type_2_type& glider_t::
  buy_cost_type_2 ()
  {
    return this->buy_cost_type_2_.get ();
  }

  inline
  void glider_t::
  buy_cost_type_2 (const buy_cost_type_2_type& x)
  {
    this->buy_cost_type_2_.set (x);
  }

  inline
  void glider_t::
  buy_cost_type_2 (::std::unique_ptr< buy_cost_type_2_type > x)
  {
    this->buy_cost_type_2_.set (std::move (x));
  }

  inline
  const glider_t::buy_cost_2_type& glider_t::
  buy_cost_2 () const
  {
    return this->buy_cost_2_.get ();
  }

  inline
  glider_t::buy_cost_2_type& glider_t::
  buy_cost_2 ()
  {
    return this->buy_cost_2_.get ();
  }

  inline
  void glider_t::
  buy_cost_2 (const buy_cost_2_type& x)
  {
    this->buy_cost_2_.set (x);
  }


  // glider_table
  // 

  inline
  const glider_table::glider_template_sequence& glider_table::
  glider_template () const
  {
    return this->glider_template_;
  }

  inline
  glider_table::glider_template_sequence& glider_table::
  glider_template ()
  {
    return this->glider_template_;
  }

  inline
  void glider_table::
  glider_template (const glider_template_sequence& s)
  {
    this->glider_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_GLIDER_TABLE_IXX
