// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "skill_effect_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // skill_effect_t
  //

  skill_effect_t::
  skill_effect_t ()
  : ::xml_schema::type (),
    skill_effect_index_ (this),
    targeting_type_ (this),
    available_target_ (this),
    except_target_ (this),
    target_direction_ (this),
    target_orientation_ (this),
    effect_range_direction_ (this),
    effect_range_value_ (this),
    attack_attribute_ (this),
    effect_stack_category_ (this),
    caster_should_critical_1_ (this),
    caster_effect_script_1_ (this),
    caster_use_target_status_type_1_ (this),
    caster_effect_value_percent_1_ (this),
    caster_usable_status_type_1_ (this),
    caster_should_critical_2_ (this),
    caster_effect_script_2_ (this),
    caster_use_target_status_type_2_ (this),
    caster_effect_value_percent_2_ (this),
    caster_usable_status_type_2_ (this),
    castee_should_critical_1_ (this),
    castee_effect_script_1_ (this),
    castee_use_target_status_type_1_ (this),
    castee_effect_value_percent_1_ (this),
    castee_usable_status_type_1_ (this),
    castee_should_critical_2_ (this),
    castee_effect_script_2_ (this),
    castee_use_target_status_type_2_ (this),
    castee_effect_value_percent_2_ (this),
    castee_usable_status_type_2_ (this)
  {
  }

  skill_effect_t::
  skill_effect_t (const skill_effect_index_type& skill_effect_index,
                  const targeting_type_type& targeting_type,
                  const available_target_type& available_target,
                  const except_target_type& except_target,
                  const target_direction_type& target_direction,
                  const target_orientation_type& target_orientation,
                  const effect_range_direction_type& effect_range_direction,
                  const effect_range_value_type& effect_range_value,
                  const attack_attribute_type& attack_attribute,
                  const effect_stack_category_type& effect_stack_category,
                  const caster_should_critical_1_type& caster_should_critical_1,
                  const caster_effect_script_1_type& caster_effect_script_1,
                  const caster_use_target_status_type_1_type& caster_use_target_status_type_1,
                  const caster_effect_value_percent_1_type& caster_effect_value_percent_1,
                  const caster_usable_status_type_1_type& caster_usable_status_type_1,
                  const caster_should_critical_2_type& caster_should_critical_2,
                  const caster_effect_script_2_type& caster_effect_script_2,
                  const caster_use_target_status_type_2_type& caster_use_target_status_type_2,
                  const caster_effect_value_percent_2_type& caster_effect_value_percent_2,
                  const caster_usable_status_type_2_type& caster_usable_status_type_2,
                  const castee_should_critical_1_type& castee_should_critical_1,
                  const castee_effect_script_1_type& castee_effect_script_1,
                  const castee_use_target_status_type_1_type& castee_use_target_status_type_1,
                  const castee_effect_value_percent_1_type& castee_effect_value_percent_1,
                  const castee_usable_status_type_1_type& castee_usable_status_type_1,
                  const castee_should_critical_2_type& castee_should_critical_2,
                  const castee_effect_script_2_type& castee_effect_script_2,
                  const castee_use_target_status_type_2_type& castee_use_target_status_type_2,
                  const castee_effect_value_percent_2_type& castee_effect_value_percent_2,
                  const castee_usable_status_type_2_type& castee_usable_status_type_2)
  : ::xml_schema::type (),
    skill_effect_index_ (skill_effect_index, this),
    targeting_type_ (targeting_type, this),
    available_target_ (available_target, this),
    except_target_ (except_target, this),
    target_direction_ (target_direction, this),
    target_orientation_ (target_orientation, this),
    effect_range_direction_ (effect_range_direction, this),
    effect_range_value_ (effect_range_value, this),
    attack_attribute_ (attack_attribute, this),
    effect_stack_category_ (effect_stack_category, this),
    caster_should_critical_1_ (caster_should_critical_1, this),
    caster_effect_script_1_ (caster_effect_script_1, this),
    caster_use_target_status_type_1_ (caster_use_target_status_type_1, this),
    caster_effect_value_percent_1_ (caster_effect_value_percent_1, this),
    caster_usable_status_type_1_ (caster_usable_status_type_1, this),
    caster_should_critical_2_ (caster_should_critical_2, this),
    caster_effect_script_2_ (caster_effect_script_2, this),
    caster_use_target_status_type_2_ (caster_use_target_status_type_2, this),
    caster_effect_value_percent_2_ (caster_effect_value_percent_2, this),
    caster_usable_status_type_2_ (caster_usable_status_type_2, this),
    castee_should_critical_1_ (castee_should_critical_1, this),
    castee_effect_script_1_ (castee_effect_script_1, this),
    castee_use_target_status_type_1_ (castee_use_target_status_type_1, this),
    castee_effect_value_percent_1_ (castee_effect_value_percent_1, this),
    castee_usable_status_type_1_ (castee_usable_status_type_1, this),
    castee_should_critical_2_ (castee_should_critical_2, this),
    castee_effect_script_2_ (castee_effect_script_2, this),
    castee_use_target_status_type_2_ (castee_use_target_status_type_2, this),
    castee_effect_value_percent_2_ (castee_effect_value_percent_2, this),
    castee_usable_status_type_2_ (castee_usable_status_type_2, this)
  {
  }

  skill_effect_t::
  skill_effect_t (const skill_effect_t& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    skill_effect_index_ (x.skill_effect_index_, f, this),
    targeting_type_ (x.targeting_type_, f, this),
    available_target_ (x.available_target_, f, this),
    except_target_ (x.except_target_, f, this),
    target_direction_ (x.target_direction_, f, this),
    target_orientation_ (x.target_orientation_, f, this),
    effect_range_direction_ (x.effect_range_direction_, f, this),
    effect_range_value_ (x.effect_range_value_, f, this),
    attack_attribute_ (x.attack_attribute_, f, this),
    effect_stack_category_ (x.effect_stack_category_, f, this),
    caster_should_critical_1_ (x.caster_should_critical_1_, f, this),
    caster_effect_script_1_ (x.caster_effect_script_1_, f, this),
    caster_use_target_status_type_1_ (x.caster_use_target_status_type_1_, f, this),
    caster_effect_value_percent_1_ (x.caster_effect_value_percent_1_, f, this),
    caster_usable_status_type_1_ (x.caster_usable_status_type_1_, f, this),
    caster_should_critical_2_ (x.caster_should_critical_2_, f, this),
    caster_effect_script_2_ (x.caster_effect_script_2_, f, this),
    caster_use_target_status_type_2_ (x.caster_use_target_status_type_2_, f, this),
    caster_effect_value_percent_2_ (x.caster_effect_value_percent_2_, f, this),
    caster_usable_status_type_2_ (x.caster_usable_status_type_2_, f, this),
    castee_should_critical_1_ (x.castee_should_critical_1_, f, this),
    castee_effect_script_1_ (x.castee_effect_script_1_, f, this),
    castee_use_target_status_type_1_ (x.castee_use_target_status_type_1_, f, this),
    castee_effect_value_percent_1_ (x.castee_effect_value_percent_1_, f, this),
    castee_usable_status_type_1_ (x.castee_usable_status_type_1_, f, this),
    castee_should_critical_2_ (x.castee_should_critical_2_, f, this),
    castee_effect_script_2_ (x.castee_effect_script_2_, f, this),
    castee_use_target_status_type_2_ (x.castee_use_target_status_type_2_, f, this),
    castee_effect_value_percent_2_ (x.castee_effect_value_percent_2_, f, this),
    castee_usable_status_type_2_ (x.castee_usable_status_type_2_, f, this)
  {
  }

  skill_effect_t::
  skill_effect_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    skill_effect_index_ (this),
    targeting_type_ (this),
    available_target_ (this),
    except_target_ (this),
    target_direction_ (this),
    target_orientation_ (this),
    effect_range_direction_ (this),
    effect_range_value_ (this),
    attack_attribute_ (this),
    effect_stack_category_ (this),
    caster_should_critical_1_ (this),
    caster_effect_script_1_ (this),
    caster_use_target_status_type_1_ (this),
    caster_effect_value_percent_1_ (this),
    caster_usable_status_type_1_ (this),
    caster_should_critical_2_ (this),
    caster_effect_script_2_ (this),
    caster_use_target_status_type_2_ (this),
    caster_effect_value_percent_2_ (this),
    caster_usable_status_type_2_ (this),
    castee_should_critical_1_ (this),
    castee_effect_script_1_ (this),
    castee_use_target_status_type_1_ (this),
    castee_effect_value_percent_1_ (this),
    castee_usable_status_type_1_ (this),
    castee_should_critical_2_ (this),
    castee_effect_script_2_ (this),
    castee_use_target_status_type_2_ (this),
    castee_effect_value_percent_2_ (this),
    castee_usable_status_type_2_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void skill_effect_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"skill_effect_index" && n.namespace_ ().empty ())
      {
        this->skill_effect_index_.set (skill_effect_index_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"targeting_type" && n.namespace_ ().empty ())
      {
        this->targeting_type_.set (targeting_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"available_target" && n.namespace_ ().empty ())
      {
        this->available_target_.set (available_target_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"except_target" && n.namespace_ ().empty ())
      {
        this->except_target_.set (except_target_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"target_direction" && n.namespace_ ().empty ())
      {
        this->target_direction_.set (target_direction_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"target_orientation" && n.namespace_ ().empty ())
      {
        this->target_orientation_.set (target_orientation_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"effect_range_direction" && n.namespace_ ().empty ())
      {
        this->effect_range_direction_.set (effect_range_direction_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"effect_range_value" && n.namespace_ ().empty ())
      {
        this->effect_range_value_.set (effect_range_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"attack_attribute" && n.namespace_ ().empty ())
      {
        this->attack_attribute_.set (attack_attribute_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"effect_stack_category" && n.namespace_ ().empty ())
      {
        this->effect_stack_category_.set (effect_stack_category_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_should_critical_1" && n.namespace_ ().empty ())
      {
        this->caster_should_critical_1_.set (caster_should_critical_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_effect_script_1" && n.namespace_ ().empty ())
      {
        this->caster_effect_script_1_.set (caster_effect_script_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_use_target_status_type_1" && n.namespace_ ().empty ())
      {
        this->caster_use_target_status_type_1_.set (caster_use_target_status_type_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_effect_value_percent_1" && n.namespace_ ().empty ())
      {
        this->caster_effect_value_percent_1_.set (caster_effect_value_percent_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_usable_status_type_1" && n.namespace_ ().empty ())
      {
        this->caster_usable_status_type_1_.set (caster_usable_status_type_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_should_critical_2" && n.namespace_ ().empty ())
      {
        this->caster_should_critical_2_.set (caster_should_critical_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_effect_script_2" && n.namespace_ ().empty ())
      {
        this->caster_effect_script_2_.set (caster_effect_script_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_use_target_status_type_2" && n.namespace_ ().empty ())
      {
        this->caster_use_target_status_type_2_.set (caster_use_target_status_type_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_effect_value_percent_2" && n.namespace_ ().empty ())
      {
        this->caster_effect_value_percent_2_.set (caster_effect_value_percent_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_usable_status_type_2" && n.namespace_ ().empty ())
      {
        this->caster_usable_status_type_2_.set (caster_usable_status_type_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_should_critical_1" && n.namespace_ ().empty ())
      {
        this->castee_should_critical_1_.set (castee_should_critical_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_effect_script_1" && n.namespace_ ().empty ())
      {
        this->castee_effect_script_1_.set (castee_effect_script_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_use_target_status_type_1" && n.namespace_ ().empty ())
      {
        this->castee_use_target_status_type_1_.set (castee_use_target_status_type_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_effect_value_percent_1" && n.namespace_ ().empty ())
      {
        this->castee_effect_value_percent_1_.set (castee_effect_value_percent_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_usable_status_type_1" && n.namespace_ ().empty ())
      {
        this->castee_usable_status_type_1_.set (castee_usable_status_type_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_should_critical_2" && n.namespace_ ().empty ())
      {
        this->castee_should_critical_2_.set (castee_should_critical_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_effect_script_2" && n.namespace_ ().empty ())
      {
        this->castee_effect_script_2_.set (castee_effect_script_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_use_target_status_type_2" && n.namespace_ ().empty ())
      {
        this->castee_use_target_status_type_2_.set (castee_use_target_status_type_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_effect_value_percent_2" && n.namespace_ ().empty ())
      {
        this->castee_effect_value_percent_2_.set (castee_effect_value_percent_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_usable_status_type_2" && n.namespace_ ().empty ())
      {
        this->castee_usable_status_type_2_.set (castee_usable_status_type_2_traits::create (i, f, this));
        continue;
      }
    }

    if (!skill_effect_index_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"skill_effect_index",
        L"");
    }

    if (!targeting_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"targeting_type",
        L"");
    }

    if (!available_target_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"available_target",
        L"");
    }

    if (!except_target_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"except_target",
        L"");
    }

    if (!target_direction_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"target_direction",
        L"");
    }

    if (!target_orientation_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"target_orientation",
        L"");
    }

    if (!effect_range_direction_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"effect_range_direction",
        L"");
    }

    if (!effect_range_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"effect_range_value",
        L"");
    }

    if (!attack_attribute_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"attack_attribute",
        L"");
    }

    if (!effect_stack_category_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"effect_stack_category",
        L"");
    }

    if (!caster_should_critical_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_should_critical_1",
        L"");
    }

    if (!caster_effect_script_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_effect_script_1",
        L"");
    }

    if (!caster_use_target_status_type_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_use_target_status_type_1",
        L"");
    }

    if (!caster_effect_value_percent_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_effect_value_percent_1",
        L"");
    }

    if (!caster_usable_status_type_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_usable_status_type_1",
        L"");
    }

    if (!caster_should_critical_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_should_critical_2",
        L"");
    }

    if (!caster_effect_script_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_effect_script_2",
        L"");
    }

    if (!caster_use_target_status_type_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_use_target_status_type_2",
        L"");
    }

    if (!caster_effect_value_percent_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_effect_value_percent_2",
        L"");
    }

    if (!caster_usable_status_type_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_usable_status_type_2",
        L"");
    }

    if (!castee_should_critical_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_should_critical_1",
        L"");
    }

    if (!castee_effect_script_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_effect_script_1",
        L"");
    }

    if (!castee_use_target_status_type_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_use_target_status_type_1",
        L"");
    }

    if (!castee_effect_value_percent_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_effect_value_percent_1",
        L"");
    }

    if (!castee_usable_status_type_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_usable_status_type_1",
        L"");
    }

    if (!castee_should_critical_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_should_critical_2",
        L"");
    }

    if (!castee_effect_script_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_effect_script_2",
        L"");
    }

    if (!castee_use_target_status_type_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_use_target_status_type_2",
        L"");
    }

    if (!castee_effect_value_percent_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_effect_value_percent_2",
        L"");
    }

    if (!castee_usable_status_type_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_usable_status_type_2",
        L"");
    }
  }

  skill_effect_t* skill_effect_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class skill_effect_t (*this, f, c);
  }

  skill_effect_t& skill_effect_t::
  operator= (const skill_effect_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->skill_effect_index_ = x.skill_effect_index_;
      this->targeting_type_ = x.targeting_type_;
      this->available_target_ = x.available_target_;
      this->except_target_ = x.except_target_;
      this->target_direction_ = x.target_direction_;
      this->target_orientation_ = x.target_orientation_;
      this->effect_range_direction_ = x.effect_range_direction_;
      this->effect_range_value_ = x.effect_range_value_;
      this->attack_attribute_ = x.attack_attribute_;
      this->effect_stack_category_ = x.effect_stack_category_;
      this->caster_should_critical_1_ = x.caster_should_critical_1_;
      this->caster_effect_script_1_ = x.caster_effect_script_1_;
      this->caster_use_target_status_type_1_ = x.caster_use_target_status_type_1_;
      this->caster_effect_value_percent_1_ = x.caster_effect_value_percent_1_;
      this->caster_usable_status_type_1_ = x.caster_usable_status_type_1_;
      this->caster_should_critical_2_ = x.caster_should_critical_2_;
      this->caster_effect_script_2_ = x.caster_effect_script_2_;
      this->caster_use_target_status_type_2_ = x.caster_use_target_status_type_2_;
      this->caster_effect_value_percent_2_ = x.caster_effect_value_percent_2_;
      this->caster_usable_status_type_2_ = x.caster_usable_status_type_2_;
      this->castee_should_critical_1_ = x.castee_should_critical_1_;
      this->castee_effect_script_1_ = x.castee_effect_script_1_;
      this->castee_use_target_status_type_1_ = x.castee_use_target_status_type_1_;
      this->castee_effect_value_percent_1_ = x.castee_effect_value_percent_1_;
      this->castee_usable_status_type_1_ = x.castee_usable_status_type_1_;
      this->castee_should_critical_2_ = x.castee_should_critical_2_;
      this->castee_effect_script_2_ = x.castee_effect_script_2_;
      this->castee_use_target_status_type_2_ = x.castee_use_target_status_type_2_;
      this->castee_effect_value_percent_2_ = x.castee_effect_value_percent_2_;
      this->castee_usable_status_type_2_ = x.castee_usable_status_type_2_;
    }

    return *this;
  }

  skill_effect_t::
  ~skill_effect_t ()
  {
  }

  // effect_status_type_t
  //

  effect_status_type_t::
  effect_status_type_t ()
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > ()
  {
  }

  effect_status_type_t::
  effect_status_type_t (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (_xsd_unsigned_byte_base)
  {
  }

  effect_status_type_t::
  effect_status_type_t (const effect_status_type_t& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (x, f, c)
  {
  }

  effect_status_type_t::
  effect_status_type_t (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (e, f, c)
  {
  }

  effect_status_type_t::
  effect_status_type_t (const ::xercesc::DOMAttr& a,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (a, f, c)
  {
  }

  effect_status_type_t::
  effect_status_type_t (const ::std::wstring& s,
                        const ::xercesc::DOMElement* e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  effect_status_type_t* effect_status_type_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class effect_status_type_t (*this, f, c);
  }

  effect_status_type_t::
  ~effect_status_type_t ()
  {
  }

  // use_target_status_type_t
  //

  use_target_status_type_t::
  use_target_status_type_t ()
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > ()
  {
  }

  use_target_status_type_t::
  use_target_status_type_t (const ::xml_schema::unsigned_byte& _xsd_unsigned_byte_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (_xsd_unsigned_byte_base)
  {
  }

  use_target_status_type_t::
  use_target_status_type_t (const use_target_status_type_t& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (x, f, c)
  {
  }

  use_target_status_type_t::
  use_target_status_type_t (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (e, f, c)
  {
  }

  use_target_status_type_t::
  use_target_status_type_t (const ::xercesc::DOMAttr& a,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (a, f, c)
  {
  }

  use_target_status_type_t::
  use_target_status_type_t (const ::std::wstring& s,
                            const ::xercesc::DOMElement* e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type > (s, e, f, c)
  {
  }

  use_target_status_type_t* use_target_status_type_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class use_target_status_type_t (*this, f, c);
  }

  use_target_status_type_t::
  ~use_target_status_type_t ()
  {
  }

  // skill_effect_table
  //

  skill_effect_table::
  skill_effect_table ()
  : ::xml_schema::type (),
    skill_effect_template_ (this)
  {
  }

  skill_effect_table::
  skill_effect_table (const skill_effect_table& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    skill_effect_template_ (x.skill_effect_template_, f, this)
  {
  }

  skill_effect_table::
  skill_effect_table (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    skill_effect_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void skill_effect_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // skill_effect_template
      //
      if (n.name () == L"skill_effect_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< skill_effect_template_type > r (
          skill_effect_template_traits::create (i, f, this));

        this->skill_effect_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  skill_effect_table* skill_effect_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class skill_effect_table (*this, f, c);
  }

  skill_effect_table& skill_effect_table::
  operator= (const skill_effect_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->skill_effect_template_ = x.skill_effect_template_;
    }

    return *this;
  }

  skill_effect_table::
  ~skill_effect_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (const ::std::wstring& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::skill_effect_table > (
      ::gdt::skill_effect_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (const ::std::wstring& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::skill_effect_table > (
      ::gdt::skill_effect_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (const ::std::wstring& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::skill_effect_table > (
      ::gdt::skill_effect_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::skill_effect_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::skill_effect_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::skill_effect_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (::std::istream& is,
                       const ::std::wstring& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::skill_effect_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (::std::istream& is,
                       const ::std::wstring& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::skill_effect_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (::std::istream& is,
                       const ::std::wstring& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::skill_effect_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::skill_effect_table > (
      ::gdt::skill_effect_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::skill_effect_table > (
      ::gdt::skill_effect_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::skill_effect_table > (
      ::gdt::skill_effect_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::skill_effect_table > (
        ::gdt::skill_effect_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"skill_effect_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::skill_effect_table > r (
        ::xsd::cxx::tree::traits< ::gdt::skill_effect_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"skill_effect_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::skill_effect_table >
  skill_effect_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"skill_effect_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::skill_effect_table > r (
        ::xsd::cxx::tree::traits< ::gdt::skill_effect_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"skill_effect_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  skill_effect_table_ (::std::ostream& o,
                       const ::gdt::skill_effect_table& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::skill_effect_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  skill_effect_table_ (::std::ostream& o,
                       const ::gdt::skill_effect_table& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::skill_effect_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  skill_effect_table_ (::std::ostream& o,
                       const ::gdt::skill_effect_table& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::skill_effect_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  skill_effect_table_ (::xercesc::XMLFormatTarget& t,
                       const ::gdt::skill_effect_table& s,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::skill_effect_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  skill_effect_table_ (::xercesc::XMLFormatTarget& t,
                       const ::gdt::skill_effect_table& s,
                       ::xml_schema::error_handler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::skill_effect_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  skill_effect_table_ (::xercesc::XMLFormatTarget& t,
                       const ::gdt::skill_effect_table& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::namespace_infomap& m,
                       const ::std::wstring& e,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::skill_effect_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  skill_effect_table_ (::xercesc::DOMDocument& d,
                       const ::gdt::skill_effect_table& s,
                       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"skill_effect_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"skill_effect_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  skill_effect_table_ (const ::gdt::skill_effect_table& s,
                       const ::xml_schema::namespace_infomap& m,
                       ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"skill_effect_table",
        L"",
        m, f));

    ::gdt::skill_effect_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const skill_effect_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // skill_effect_index
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"skill_effect_index",
          e));

      a << i.skill_effect_index ();
    }

    // targeting_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"targeting_type",
          e));

      a << i.targeting_type ();
    }

    // available_target
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"available_target",
          e));

      a << i.available_target ();
    }

    // except_target
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"except_target",
          e));

      a << i.except_target ();
    }

    // target_direction
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"target_direction",
          e));

      a << i.target_direction ();
    }

    // target_orientation
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"target_orientation",
          e));

      a << i.target_orientation ();
    }

    // effect_range_direction
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"effect_range_direction",
          e));

      a << i.effect_range_direction ();
    }

    // effect_range_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"effect_range_value",
          e));

      a << i.effect_range_value ();
    }

    // attack_attribute
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"attack_attribute",
          e));

      a << i.attack_attribute ();
    }

    // effect_stack_category
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"effect_stack_category",
          e));

      a << i.effect_stack_category ();
    }

    // caster_should_critical_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_should_critical_1",
          e));

      a << i.caster_should_critical_1 ();
    }

    // caster_effect_script_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_effect_script_1",
          e));

      a << i.caster_effect_script_1 ();
    }

    // caster_use_target_status_type_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_use_target_status_type_1",
          e));

      a << i.caster_use_target_status_type_1 ();
    }

    // caster_effect_value_percent_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_effect_value_percent_1",
          e));

      a << i.caster_effect_value_percent_1 ();
    }

    // caster_usable_status_type_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_usable_status_type_1",
          e));

      a << i.caster_usable_status_type_1 ();
    }

    // caster_should_critical_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_should_critical_2",
          e));

      a << i.caster_should_critical_2 ();
    }

    // caster_effect_script_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_effect_script_2",
          e));

      a << i.caster_effect_script_2 ();
    }

    // caster_use_target_status_type_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_use_target_status_type_2",
          e));

      a << i.caster_use_target_status_type_2 ();
    }

    // caster_effect_value_percent_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_effect_value_percent_2",
          e));

      a << i.caster_effect_value_percent_2 ();
    }

    // caster_usable_status_type_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_usable_status_type_2",
          e));

      a << i.caster_usable_status_type_2 ();
    }

    // castee_should_critical_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_should_critical_1",
          e));

      a << i.castee_should_critical_1 ();
    }

    // castee_effect_script_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_effect_script_1",
          e));

      a << i.castee_effect_script_1 ();
    }

    // castee_use_target_status_type_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_use_target_status_type_1",
          e));

      a << i.castee_use_target_status_type_1 ();
    }

    // castee_effect_value_percent_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_effect_value_percent_1",
          e));

      a << i.castee_effect_value_percent_1 ();
    }

    // castee_usable_status_type_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_usable_status_type_1",
          e));

      a << i.castee_usable_status_type_1 ();
    }

    // castee_should_critical_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_should_critical_2",
          e));

      a << i.castee_should_critical_2 ();
    }

    // castee_effect_script_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_effect_script_2",
          e));

      a << i.castee_effect_script_2 ();
    }

    // castee_use_target_status_type_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_use_target_status_type_2",
          e));

      a << i.castee_use_target_status_type_2 ();
    }

    // castee_effect_value_percent_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_effect_value_percent_2",
          e));

      a << i.castee_effect_value_percent_2 ();
    }

    // castee_usable_status_type_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_usable_status_type_2",
          e));

      a << i.castee_usable_status_type_2 ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const effect_status_type_t& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const effect_status_type_t& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const effect_status_type_t& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const use_target_status_type_t& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const use_target_status_type_t& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xml_schema::list_stream& l,
              const use_target_status_type_t& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::unsigned_byte, wchar_t, ::xml_schema::simple_type >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const skill_effect_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // skill_effect_template
    //
    for (skill_effect_table::skill_effect_template_const_iterator
         b (i.skill_effect_template ().begin ()), n (i.skill_effect_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"skill_effect_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

