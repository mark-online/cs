// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "item_active_skill_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // item_active_skill_t
  //

  item_active_skill_t::
  item_active_skill_t ()
  : ::xml_schema::type (),
    skill_code_ (this),
    effect_level_ (this),
    top_threat_apply_value_ (this),
    skill_type_ (this),
    usable_state_ (this),
    transition_state_ (this),
    check_mez_type_ (this),
    projectile_speed_ (this),
    can_cast_on_moving_ (this),
    cast_type_ (this),
    cast_time_ (this),
    min_distance_ (this),
    max_distance_ (this),
    cooldown_time_ (this),
    global_cooldown_time_index_ (this),
    global_cooldown_time_ (this),
    caster_activate_mil_sec_1_ (this),
    caster_activate_interval_mil_sec_1_ (this),
    caster_activate_mil_sec_2_ (this),
    caster_activate_interval_mil_sec_2_ (this),
    castee_activate_mil_sec_1_ (this),
    castee_activate_interval_mil_sec_1_ (this),
    castee_activate_mil_sec_2_ (this),
    castee_activate_interval_mil_sec_2_ (this),
    skill_effect_index_ (this),
    caster_effect_value_1_ (this),
    caster_effect_value_2_ (this),
    castee_effect_value_1_ (this),
    castee_effect_value_2_ (this),
    casting_animation_name_ (this),
    casting_draw_animation_name_ (this),
    casting_effect_ (this),
    animation_transition_time_ (this),
    caster_animation_name_ (this),
    caster_effect_ (this),
    trail_effect_ (this),
    attacker1_caster_effect_ (this),
    attacker2_caster_effect_ (this),
    castee_animation_name_ (this),
    castee_interval_time_ (this),
    attacked1_castee_effect_ (this),
    attacked2_castee_effect_ (this),
    area_effect_ (this),
    projectile_name_ (this),
    projectile_particle_ (this),
    projectile_sound_ (this),
    projectile_starting_point_ (this),
    projectile_end_point_ (this),
    projectile_trail_particle_ (this),
    projectile_light_rgb_value_ (this),
    projectile_light_value_ (this),
    projectile_light_range_value_ (this)
  {
  }

  item_active_skill_t::
  item_active_skill_t (const skill_code_type& skill_code,
                       const effect_level_type& effect_level,
                       const top_threat_apply_value_type& top_threat_apply_value,
                       const skill_type_type& skill_type,
                       const usable_state_type& usable_state,
                       const transition_state_type& transition_state,
                       const check_mez_type_type& check_mez_type,
                       const projectile_speed_type& projectile_speed,
                       const can_cast_on_moving_type& can_cast_on_moving,
                       const cast_type_type& cast_type,
                       const cast_time_type& cast_time,
                       const min_distance_type& min_distance,
                       const max_distance_type& max_distance,
                       const cooldown_time_type& cooldown_time,
                       const global_cooldown_time_index_type& global_cooldown_time_index,
                       const global_cooldown_time_type& global_cooldown_time,
                       const caster_activate_mil_sec_1_type& caster_activate_mil_sec_1,
                       const caster_activate_interval_mil_sec_1_type& caster_activate_interval_mil_sec_1,
                       const caster_activate_mil_sec_2_type& caster_activate_mil_sec_2,
                       const caster_activate_interval_mil_sec_2_type& caster_activate_interval_mil_sec_2,
                       const castee_activate_mil_sec_1_type& castee_activate_mil_sec_1,
                       const castee_activate_interval_mil_sec_1_type& castee_activate_interval_mil_sec_1,
                       const castee_activate_mil_sec_2_type& castee_activate_mil_sec_2,
                       const castee_activate_interval_mil_sec_2_type& castee_activate_interval_mil_sec_2,
                       const skill_effect_index_type& skill_effect_index,
                       const caster_effect_value_1_type& caster_effect_value_1,
                       const caster_effect_value_2_type& caster_effect_value_2,
                       const castee_effect_value_1_type& castee_effect_value_1,
                       const castee_effect_value_2_type& castee_effect_value_2,
                       const casting_animation_name_type& casting_animation_name,
                       const casting_draw_animation_name_type& casting_draw_animation_name,
                       const casting_effect_type& casting_effect,
                       const animation_transition_time_type& animation_transition_time,
                       const caster_animation_name_type& caster_animation_name,
                       const caster_effect_type& caster_effect,
                       const trail_effect_type& trail_effect,
                       const attacker1_caster_effect_type& attacker1_caster_effect,
                       const attacker2_caster_effect_type& attacker2_caster_effect,
                       const castee_animation_name_type& castee_animation_name,
                       const castee_interval_time_type& castee_interval_time,
                       const attacked1_castee_effect_type& attacked1_castee_effect,
                       const attacked2_castee_effect_type& attacked2_castee_effect,
                       const area_effect_type& area_effect,
                       const projectile_name_type& projectile_name,
                       const projectile_particle_type& projectile_particle,
                       const projectile_sound_type& projectile_sound,
                       const projectile_starting_point_type& projectile_starting_point,
                       const projectile_end_point_type& projectile_end_point,
                       const projectile_trail_particle_type& projectile_trail_particle,
                       const projectile_light_rgb_value_type& projectile_light_rgb_value,
                       const projectile_light_value_type& projectile_light_value,
                       const projectile_light_range_value_type& projectile_light_range_value)
  : ::xml_schema::type (),
    skill_code_ (skill_code, this),
    effect_level_ (effect_level, this),
    top_threat_apply_value_ (top_threat_apply_value, this),
    skill_type_ (skill_type, this),
    usable_state_ (usable_state, this),
    transition_state_ (transition_state, this),
    check_mez_type_ (check_mez_type, this),
    projectile_speed_ (projectile_speed, this),
    can_cast_on_moving_ (can_cast_on_moving, this),
    cast_type_ (cast_type, this),
    cast_time_ (cast_time, this),
    min_distance_ (min_distance, this),
    max_distance_ (max_distance, this),
    cooldown_time_ (cooldown_time, this),
    global_cooldown_time_index_ (global_cooldown_time_index, this),
    global_cooldown_time_ (global_cooldown_time, this),
    caster_activate_mil_sec_1_ (caster_activate_mil_sec_1, this),
    caster_activate_interval_mil_sec_1_ (caster_activate_interval_mil_sec_1, this),
    caster_activate_mil_sec_2_ (caster_activate_mil_sec_2, this),
    caster_activate_interval_mil_sec_2_ (caster_activate_interval_mil_sec_2, this),
    castee_activate_mil_sec_1_ (castee_activate_mil_sec_1, this),
    castee_activate_interval_mil_sec_1_ (castee_activate_interval_mil_sec_1, this),
    castee_activate_mil_sec_2_ (castee_activate_mil_sec_2, this),
    castee_activate_interval_mil_sec_2_ (castee_activate_interval_mil_sec_2, this),
    skill_effect_index_ (skill_effect_index, this),
    caster_effect_value_1_ (caster_effect_value_1, this),
    caster_effect_value_2_ (caster_effect_value_2, this),
    castee_effect_value_1_ (castee_effect_value_1, this),
    castee_effect_value_2_ (castee_effect_value_2, this),
    casting_animation_name_ (casting_animation_name, this),
    casting_draw_animation_name_ (casting_draw_animation_name, this),
    casting_effect_ (casting_effect, this),
    animation_transition_time_ (animation_transition_time, this),
    caster_animation_name_ (caster_animation_name, this),
    caster_effect_ (caster_effect, this),
    trail_effect_ (trail_effect, this),
    attacker1_caster_effect_ (attacker1_caster_effect, this),
    attacker2_caster_effect_ (attacker2_caster_effect, this),
    castee_animation_name_ (castee_animation_name, this),
    castee_interval_time_ (castee_interval_time, this),
    attacked1_castee_effect_ (attacked1_castee_effect, this),
    attacked2_castee_effect_ (attacked2_castee_effect, this),
    area_effect_ (area_effect, this),
    projectile_name_ (projectile_name, this),
    projectile_particle_ (projectile_particle, this),
    projectile_sound_ (projectile_sound, this),
    projectile_starting_point_ (projectile_starting_point, this),
    projectile_end_point_ (projectile_end_point, this),
    projectile_trail_particle_ (projectile_trail_particle, this),
    projectile_light_rgb_value_ (projectile_light_rgb_value, this),
    projectile_light_value_ (projectile_light_value, this),
    projectile_light_range_value_ (projectile_light_range_value, this)
  {
  }

  item_active_skill_t::
  item_active_skill_t (const item_active_skill_t& x,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    skill_code_ (x.skill_code_, f, this),
    effect_level_ (x.effect_level_, f, this),
    top_threat_apply_value_ (x.top_threat_apply_value_, f, this),
    skill_type_ (x.skill_type_, f, this),
    usable_state_ (x.usable_state_, f, this),
    transition_state_ (x.transition_state_, f, this),
    check_mez_type_ (x.check_mez_type_, f, this),
    projectile_speed_ (x.projectile_speed_, f, this),
    can_cast_on_moving_ (x.can_cast_on_moving_, f, this),
    cast_type_ (x.cast_type_, f, this),
    cast_time_ (x.cast_time_, f, this),
    min_distance_ (x.min_distance_, f, this),
    max_distance_ (x.max_distance_, f, this),
    cooldown_time_ (x.cooldown_time_, f, this),
    global_cooldown_time_index_ (x.global_cooldown_time_index_, f, this),
    global_cooldown_time_ (x.global_cooldown_time_, f, this),
    caster_activate_mil_sec_1_ (x.caster_activate_mil_sec_1_, f, this),
    caster_activate_interval_mil_sec_1_ (x.caster_activate_interval_mil_sec_1_, f, this),
    caster_activate_mil_sec_2_ (x.caster_activate_mil_sec_2_, f, this),
    caster_activate_interval_mil_sec_2_ (x.caster_activate_interval_mil_sec_2_, f, this),
    castee_activate_mil_sec_1_ (x.castee_activate_mil_sec_1_, f, this),
    castee_activate_interval_mil_sec_1_ (x.castee_activate_interval_mil_sec_1_, f, this),
    castee_activate_mil_sec_2_ (x.castee_activate_mil_sec_2_, f, this),
    castee_activate_interval_mil_sec_2_ (x.castee_activate_interval_mil_sec_2_, f, this),
    skill_effect_index_ (x.skill_effect_index_, f, this),
    caster_effect_value_1_ (x.caster_effect_value_1_, f, this),
    caster_effect_value_2_ (x.caster_effect_value_2_, f, this),
    castee_effect_value_1_ (x.castee_effect_value_1_, f, this),
    castee_effect_value_2_ (x.castee_effect_value_2_, f, this),
    casting_animation_name_ (x.casting_animation_name_, f, this),
    casting_draw_animation_name_ (x.casting_draw_animation_name_, f, this),
    casting_effect_ (x.casting_effect_, f, this),
    animation_transition_time_ (x.animation_transition_time_, f, this),
    caster_animation_name_ (x.caster_animation_name_, f, this),
    caster_effect_ (x.caster_effect_, f, this),
    trail_effect_ (x.trail_effect_, f, this),
    attacker1_caster_effect_ (x.attacker1_caster_effect_, f, this),
    attacker2_caster_effect_ (x.attacker2_caster_effect_, f, this),
    castee_animation_name_ (x.castee_animation_name_, f, this),
    castee_interval_time_ (x.castee_interval_time_, f, this),
    attacked1_castee_effect_ (x.attacked1_castee_effect_, f, this),
    attacked2_castee_effect_ (x.attacked2_castee_effect_, f, this),
    area_effect_ (x.area_effect_, f, this),
    projectile_name_ (x.projectile_name_, f, this),
    projectile_particle_ (x.projectile_particle_, f, this),
    projectile_sound_ (x.projectile_sound_, f, this),
    projectile_starting_point_ (x.projectile_starting_point_, f, this),
    projectile_end_point_ (x.projectile_end_point_, f, this),
    projectile_trail_particle_ (x.projectile_trail_particle_, f, this),
    projectile_light_rgb_value_ (x.projectile_light_rgb_value_, f, this),
    projectile_light_value_ (x.projectile_light_value_, f, this),
    projectile_light_range_value_ (x.projectile_light_range_value_, f, this)
  {
  }

  item_active_skill_t::
  item_active_skill_t (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f,
                       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    skill_code_ (this),
    effect_level_ (this),
    top_threat_apply_value_ (this),
    skill_type_ (this),
    usable_state_ (this),
    transition_state_ (this),
    check_mez_type_ (this),
    projectile_speed_ (this),
    can_cast_on_moving_ (this),
    cast_type_ (this),
    cast_time_ (this),
    min_distance_ (this),
    max_distance_ (this),
    cooldown_time_ (this),
    global_cooldown_time_index_ (this),
    global_cooldown_time_ (this),
    caster_activate_mil_sec_1_ (this),
    caster_activate_interval_mil_sec_1_ (this),
    caster_activate_mil_sec_2_ (this),
    caster_activate_interval_mil_sec_2_ (this),
    castee_activate_mil_sec_1_ (this),
    castee_activate_interval_mil_sec_1_ (this),
    castee_activate_mil_sec_2_ (this),
    castee_activate_interval_mil_sec_2_ (this),
    skill_effect_index_ (this),
    caster_effect_value_1_ (this),
    caster_effect_value_2_ (this),
    castee_effect_value_1_ (this),
    castee_effect_value_2_ (this),
    casting_animation_name_ (this),
    casting_draw_animation_name_ (this),
    casting_effect_ (this),
    animation_transition_time_ (this),
    caster_animation_name_ (this),
    caster_effect_ (this),
    trail_effect_ (this),
    attacker1_caster_effect_ (this),
    attacker2_caster_effect_ (this),
    castee_animation_name_ (this),
    castee_interval_time_ (this),
    attacked1_castee_effect_ (this),
    attacked2_castee_effect_ (this),
    area_effect_ (this),
    projectile_name_ (this),
    projectile_particle_ (this),
    projectile_sound_ (this),
    projectile_starting_point_ (this),
    projectile_end_point_ (this),
    projectile_trail_particle_ (this),
    projectile_light_rgb_value_ (this),
    projectile_light_value_ (this),
    projectile_light_range_value_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void item_active_skill_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"skill_code" && n.namespace_ ().empty ())
      {
        this->skill_code_.set (skill_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"effect_level" && n.namespace_ ().empty ())
      {
        this->effect_level_.set (effect_level_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"top_threat_apply_value" && n.namespace_ ().empty ())
      {
        this->top_threat_apply_value_.set (top_threat_apply_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"skill_type" && n.namespace_ ().empty ())
      {
        this->skill_type_.set (skill_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"usable_state" && n.namespace_ ().empty ())
      {
        this->usable_state_.set (usable_state_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"transition_state" && n.namespace_ ().empty ())
      {
        this->transition_state_.set (transition_state_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"check_mez_type" && n.namespace_ ().empty ())
      {
        this->check_mez_type_.set (check_mez_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"projectile_speed" && n.namespace_ ().empty ())
      {
        this->projectile_speed_.set (projectile_speed_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"can_cast_on_moving" && n.namespace_ ().empty ())
      {
        this->can_cast_on_moving_.set (can_cast_on_moving_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"cast_type" && n.namespace_ ().empty ())
      {
        this->cast_type_.set (cast_type_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"cast_time" && n.namespace_ ().empty ())
      {
        this->cast_time_.set (cast_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"min_distance" && n.namespace_ ().empty ())
      {
        this->min_distance_.set (min_distance_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"max_distance" && n.namespace_ ().empty ())
      {
        this->max_distance_.set (max_distance_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"cooldown_time" && n.namespace_ ().empty ())
      {
        this->cooldown_time_.set (cooldown_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"global_cooldown_time_index" && n.namespace_ ().empty ())
      {
        this->global_cooldown_time_index_.set (global_cooldown_time_index_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"global_cooldown_time" && n.namespace_ ().empty ())
      {
        this->global_cooldown_time_.set (global_cooldown_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_activate_mil_sec_1" && n.namespace_ ().empty ())
      {
        this->caster_activate_mil_sec_1_.set (caster_activate_mil_sec_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_activate_interval_mil_sec_1" && n.namespace_ ().empty ())
      {
        this->caster_activate_interval_mil_sec_1_.set (caster_activate_interval_mil_sec_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_activate_mil_sec_2" && n.namespace_ ().empty ())
      {
        this->caster_activate_mil_sec_2_.set (caster_activate_mil_sec_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_activate_interval_mil_sec_2" && n.namespace_ ().empty ())
      {
        this->caster_activate_interval_mil_sec_2_.set (caster_activate_interval_mil_sec_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_activate_mil_sec_1" && n.namespace_ ().empty ())
      {
        this->castee_activate_mil_sec_1_.set (castee_activate_mil_sec_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_activate_interval_mil_sec_1" && n.namespace_ ().empty ())
      {
        this->castee_activate_interval_mil_sec_1_.set (castee_activate_interval_mil_sec_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_activate_mil_sec_2" && n.namespace_ ().empty ())
      {
        this->castee_activate_mil_sec_2_.set (castee_activate_mil_sec_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_activate_interval_mil_sec_2" && n.namespace_ ().empty ())
      {
        this->castee_activate_interval_mil_sec_2_.set (castee_activate_interval_mil_sec_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"skill_effect_index" && n.namespace_ ().empty ())
      {
        this->skill_effect_index_.set (skill_effect_index_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_effect_value_1" && n.namespace_ ().empty ())
      {
        this->caster_effect_value_1_.set (caster_effect_value_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_effect_value_2" && n.namespace_ ().empty ())
      {
        this->caster_effect_value_2_.set (caster_effect_value_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_effect_value_1" && n.namespace_ ().empty ())
      {
        this->castee_effect_value_1_.set (castee_effect_value_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_effect_value_2" && n.namespace_ ().empty ())
      {
        this->castee_effect_value_2_.set (castee_effect_value_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"casting_animation_name" && n.namespace_ ().empty ())
      {
        this->casting_animation_name_.set (casting_animation_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"casting_draw_animation_name" && n.namespace_ ().empty ())
      {
        this->casting_draw_animation_name_.set (casting_draw_animation_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"casting_effect" && n.namespace_ ().empty ())
      {
        this->casting_effect_.set (casting_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"animation_transition_time" && n.namespace_ ().empty ())
      {
        this->animation_transition_time_.set (animation_transition_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_animation_name" && n.namespace_ ().empty ())
      {
        this->caster_animation_name_.set (caster_animation_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"caster_effect" && n.namespace_ ().empty ())
      {
        this->caster_effect_.set (caster_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"trail_effect" && n.namespace_ ().empty ())
      {
        this->trail_effect_.set (trail_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"attacker1_caster_effect" && n.namespace_ ().empty ())
      {
        this->attacker1_caster_effect_.set (attacker1_caster_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"attacker2_caster_effect" && n.namespace_ ().empty ())
      {
        this->attacker2_caster_effect_.set (attacker2_caster_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_animation_name" && n.namespace_ ().empty ())
      {
        this->castee_animation_name_.set (castee_animation_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"castee_interval_time" && n.namespace_ ().empty ())
      {
        this->castee_interval_time_.set (castee_interval_time_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"attacked1_castee_effect" && n.namespace_ ().empty ())
      {
        this->attacked1_castee_effect_.set (attacked1_castee_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"attacked2_castee_effect" && n.namespace_ ().empty ())
      {
        this->attacked2_castee_effect_.set (attacked2_castee_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"area_effect" && n.namespace_ ().empty ())
      {
        this->area_effect_.set (area_effect_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"projectile_name" && n.namespace_ ().empty ())
      {
        this->projectile_name_.set (projectile_name_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"projectile_particle" && n.namespace_ ().empty ())
      {
        this->projectile_particle_.set (projectile_particle_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"projectile_sound" && n.namespace_ ().empty ())
      {
        this->projectile_sound_.set (projectile_sound_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"projectile_starting_point" && n.namespace_ ().empty ())
      {
        this->projectile_starting_point_.set (projectile_starting_point_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"projectile_end_point" && n.namespace_ ().empty ())
      {
        this->projectile_end_point_.set (projectile_end_point_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"projectile_trail_particle" && n.namespace_ ().empty ())
      {
        this->projectile_trail_particle_.set (projectile_trail_particle_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"projectile_light_rgb_value" && n.namespace_ ().empty ())
      {
        this->projectile_light_rgb_value_.set (projectile_light_rgb_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"projectile_light_value" && n.namespace_ ().empty ())
      {
        this->projectile_light_value_.set (projectile_light_value_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"projectile_light_range_value" && n.namespace_ ().empty ())
      {
        this->projectile_light_range_value_.set (projectile_light_range_value_traits::create (i, f, this));
        continue;
      }
    }

    if (!skill_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"skill_code",
        L"");
    }

    if (!effect_level_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"effect_level",
        L"");
    }

    if (!top_threat_apply_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"top_threat_apply_value",
        L"");
    }

    if (!skill_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"skill_type",
        L"");
    }

    if (!usable_state_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"usable_state",
        L"");
    }

    if (!transition_state_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"transition_state",
        L"");
    }

    if (!check_mez_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"check_mez_type",
        L"");
    }

    if (!projectile_speed_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"projectile_speed",
        L"");
    }

    if (!can_cast_on_moving_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"can_cast_on_moving",
        L"");
    }

    if (!cast_type_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"cast_type",
        L"");
    }

    if (!cast_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"cast_time",
        L"");
    }

    if (!min_distance_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"min_distance",
        L"");
    }

    if (!max_distance_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"max_distance",
        L"");
    }

    if (!cooldown_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"cooldown_time",
        L"");
    }

    if (!global_cooldown_time_index_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"global_cooldown_time_index",
        L"");
    }

    if (!global_cooldown_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"global_cooldown_time",
        L"");
    }

    if (!caster_activate_mil_sec_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_activate_mil_sec_1",
        L"");
    }

    if (!caster_activate_interval_mil_sec_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_activate_interval_mil_sec_1",
        L"");
    }

    if (!caster_activate_mil_sec_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_activate_mil_sec_2",
        L"");
    }

    if (!caster_activate_interval_mil_sec_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_activate_interval_mil_sec_2",
        L"");
    }

    if (!castee_activate_mil_sec_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_activate_mil_sec_1",
        L"");
    }

    if (!castee_activate_interval_mil_sec_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_activate_interval_mil_sec_1",
        L"");
    }

    if (!castee_activate_mil_sec_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_activate_mil_sec_2",
        L"");
    }

    if (!castee_activate_interval_mil_sec_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_activate_interval_mil_sec_2",
        L"");
    }

    if (!skill_effect_index_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"skill_effect_index",
        L"");
    }

    if (!caster_effect_value_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_effect_value_1",
        L"");
    }

    if (!caster_effect_value_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_effect_value_2",
        L"");
    }

    if (!castee_effect_value_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_effect_value_1",
        L"");
    }

    if (!castee_effect_value_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_effect_value_2",
        L"");
    }

    if (!casting_animation_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"casting_animation_name",
        L"");
    }

    if (!casting_draw_animation_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"casting_draw_animation_name",
        L"");
    }

    if (!casting_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"casting_effect",
        L"");
    }

    if (!animation_transition_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"animation_transition_time",
        L"");
    }

    if (!caster_animation_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_animation_name",
        L"");
    }

    if (!caster_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"caster_effect",
        L"");
    }

    if (!trail_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"trail_effect",
        L"");
    }

    if (!attacker1_caster_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"attacker1_caster_effect",
        L"");
    }

    if (!attacker2_caster_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"attacker2_caster_effect",
        L"");
    }

    if (!castee_animation_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_animation_name",
        L"");
    }

    if (!castee_interval_time_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"castee_interval_time",
        L"");
    }

    if (!attacked1_castee_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"attacked1_castee_effect",
        L"");
    }

    if (!attacked2_castee_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"attacked2_castee_effect",
        L"");
    }

    if (!area_effect_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"area_effect",
        L"");
    }

    if (!projectile_name_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"projectile_name",
        L"");
    }

    if (!projectile_particle_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"projectile_particle",
        L"");
    }

    if (!projectile_sound_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"projectile_sound",
        L"");
    }

    if (!projectile_starting_point_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"projectile_starting_point",
        L"");
    }

    if (!projectile_end_point_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"projectile_end_point",
        L"");
    }

    if (!projectile_trail_particle_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"projectile_trail_particle",
        L"");
    }

    if (!projectile_light_rgb_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"projectile_light_rgb_value",
        L"");
    }

    if (!projectile_light_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"projectile_light_value",
        L"");
    }

    if (!projectile_light_range_value_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"projectile_light_range_value",
        L"");
    }
  }

  item_active_skill_t* item_active_skill_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class item_active_skill_t (*this, f, c);
  }

  item_active_skill_t& item_active_skill_t::
  operator= (const item_active_skill_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->skill_code_ = x.skill_code_;
      this->effect_level_ = x.effect_level_;
      this->top_threat_apply_value_ = x.top_threat_apply_value_;
      this->skill_type_ = x.skill_type_;
      this->usable_state_ = x.usable_state_;
      this->transition_state_ = x.transition_state_;
      this->check_mez_type_ = x.check_mez_type_;
      this->projectile_speed_ = x.projectile_speed_;
      this->can_cast_on_moving_ = x.can_cast_on_moving_;
      this->cast_type_ = x.cast_type_;
      this->cast_time_ = x.cast_time_;
      this->min_distance_ = x.min_distance_;
      this->max_distance_ = x.max_distance_;
      this->cooldown_time_ = x.cooldown_time_;
      this->global_cooldown_time_index_ = x.global_cooldown_time_index_;
      this->global_cooldown_time_ = x.global_cooldown_time_;
      this->caster_activate_mil_sec_1_ = x.caster_activate_mil_sec_1_;
      this->caster_activate_interval_mil_sec_1_ = x.caster_activate_interval_mil_sec_1_;
      this->caster_activate_mil_sec_2_ = x.caster_activate_mil_sec_2_;
      this->caster_activate_interval_mil_sec_2_ = x.caster_activate_interval_mil_sec_2_;
      this->castee_activate_mil_sec_1_ = x.castee_activate_mil_sec_1_;
      this->castee_activate_interval_mil_sec_1_ = x.castee_activate_interval_mil_sec_1_;
      this->castee_activate_mil_sec_2_ = x.castee_activate_mil_sec_2_;
      this->castee_activate_interval_mil_sec_2_ = x.castee_activate_interval_mil_sec_2_;
      this->skill_effect_index_ = x.skill_effect_index_;
      this->caster_effect_value_1_ = x.caster_effect_value_1_;
      this->caster_effect_value_2_ = x.caster_effect_value_2_;
      this->castee_effect_value_1_ = x.castee_effect_value_1_;
      this->castee_effect_value_2_ = x.castee_effect_value_2_;
      this->casting_animation_name_ = x.casting_animation_name_;
      this->casting_draw_animation_name_ = x.casting_draw_animation_name_;
      this->casting_effect_ = x.casting_effect_;
      this->animation_transition_time_ = x.animation_transition_time_;
      this->caster_animation_name_ = x.caster_animation_name_;
      this->caster_effect_ = x.caster_effect_;
      this->trail_effect_ = x.trail_effect_;
      this->attacker1_caster_effect_ = x.attacker1_caster_effect_;
      this->attacker2_caster_effect_ = x.attacker2_caster_effect_;
      this->castee_animation_name_ = x.castee_animation_name_;
      this->castee_interval_time_ = x.castee_interval_time_;
      this->attacked1_castee_effect_ = x.attacked1_castee_effect_;
      this->attacked2_castee_effect_ = x.attacked2_castee_effect_;
      this->area_effect_ = x.area_effect_;
      this->projectile_name_ = x.projectile_name_;
      this->projectile_particle_ = x.projectile_particle_;
      this->projectile_sound_ = x.projectile_sound_;
      this->projectile_starting_point_ = x.projectile_starting_point_;
      this->projectile_end_point_ = x.projectile_end_point_;
      this->projectile_trail_particle_ = x.projectile_trail_particle_;
      this->projectile_light_rgb_value_ = x.projectile_light_rgb_value_;
      this->projectile_light_value_ = x.projectile_light_value_;
      this->projectile_light_range_value_ = x.projectile_light_range_value_;
    }

    return *this;
  }

  item_active_skill_t::
  ~item_active_skill_t ()
  {
  }

  // item_active_skill_table
  //

  item_active_skill_table::
  item_active_skill_table ()
  : ::xml_schema::type (),
    item_active_skill_template_ (this)
  {
  }

  item_active_skill_table::
  item_active_skill_table (const item_active_skill_table& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    item_active_skill_template_ (x.item_active_skill_template_, f, this)
  {
  }

  item_active_skill_table::
  item_active_skill_table (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    item_active_skill_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void item_active_skill_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // item_active_skill_template
      //
      if (n.name () == L"item_active_skill_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< item_active_skill_template_type > r (
          item_active_skill_template_traits::create (i, f, this));

        this->item_active_skill_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  item_active_skill_table* item_active_skill_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class item_active_skill_table (*this, f, c);
  }

  item_active_skill_table& item_active_skill_table::
  operator= (const item_active_skill_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->item_active_skill_template_ = x.item_active_skill_template_;
    }

    return *this;
  }

  item_active_skill_table::
  ~item_active_skill_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (const ::std::wstring& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::item_active_skill_table > (
      ::gdt::item_active_skill_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (const ::std::wstring& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::item_active_skill_table > (
      ::gdt::item_active_skill_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (const ::std::wstring& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::item_active_skill_table > (
      ::gdt::item_active_skill_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::item_active_skill_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::item_active_skill_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::item_active_skill_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::std::istream& is,
                            const ::std::wstring& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::item_active_skill_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::std::istream& is,
                            const ::std::wstring& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::item_active_skill_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::std::istream& is,
                            const ::std::wstring& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::item_active_skill_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::item_active_skill_table > (
      ::gdt::item_active_skill_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::item_active_skill_table > (
      ::gdt::item_active_skill_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::item_active_skill_table > (
      ::gdt::item_active_skill_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::item_active_skill_table > (
        ::gdt::item_active_skill_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"item_active_skill_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::item_active_skill_table > r (
        ::xsd::cxx::tree::traits< ::gdt::item_active_skill_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"item_active_skill_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::item_active_skill_table >
  item_active_skill_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"item_active_skill_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::item_active_skill_table > r (
        ::xsd::cxx::tree::traits< ::gdt::item_active_skill_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"item_active_skill_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  item_active_skill_table_ (::std::ostream& o,
                            const ::gdt::item_active_skill_table& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::item_active_skill_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  item_active_skill_table_ (::std::ostream& o,
                            const ::gdt::item_active_skill_table& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::item_active_skill_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  item_active_skill_table_ (::std::ostream& o,
                            const ::gdt::item_active_skill_table& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::item_active_skill_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  item_active_skill_table_ (::xercesc::XMLFormatTarget& t,
                            const ::gdt::item_active_skill_table& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::item_active_skill_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  item_active_skill_table_ (::xercesc::XMLFormatTarget& t,
                            const ::gdt::item_active_skill_table& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::item_active_skill_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  item_active_skill_table_ (::xercesc::XMLFormatTarget& t,
                            const ::gdt::item_active_skill_table& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::item_active_skill_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  item_active_skill_table_ (::xercesc::DOMDocument& d,
                            const ::gdt::item_active_skill_table& s,
                            ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"item_active_skill_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"item_active_skill_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  item_active_skill_table_ (const ::gdt::item_active_skill_table& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"item_active_skill_table",
        L"",
        m, f));

    ::gdt::item_active_skill_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const item_active_skill_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // skill_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"skill_code",
          e));

      a << i.skill_code ();
    }

    // effect_level
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"effect_level",
          e));

      a << i.effect_level ();
    }

    // top_threat_apply_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"top_threat_apply_value",
          e));

      a << i.top_threat_apply_value ();
    }

    // skill_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"skill_type",
          e));

      a << i.skill_type ();
    }

    // usable_state
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"usable_state",
          e));

      a << i.usable_state ();
    }

    // transition_state
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"transition_state",
          e));

      a << i.transition_state ();
    }

    // check_mez_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"check_mez_type",
          e));

      a << i.check_mez_type ();
    }

    // projectile_speed
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"projectile_speed",
          e));

      a << i.projectile_speed ();
    }

    // can_cast_on_moving
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"can_cast_on_moving",
          e));

      a << i.can_cast_on_moving ();
    }

    // cast_type
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"cast_type",
          e));

      a << i.cast_type ();
    }

    // cast_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"cast_time",
          e));

      a << i.cast_time ();
    }

    // min_distance
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"min_distance",
          e));

      a << i.min_distance ();
    }

    // max_distance
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"max_distance",
          e));

      a << i.max_distance ();
    }

    // cooldown_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"cooldown_time",
          e));

      a << i.cooldown_time ();
    }

    // global_cooldown_time_index
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"global_cooldown_time_index",
          e));

      a << i.global_cooldown_time_index ();
    }

    // global_cooldown_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"global_cooldown_time",
          e));

      a << i.global_cooldown_time ();
    }

    // caster_activate_mil_sec_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_activate_mil_sec_1",
          e));

      a << i.caster_activate_mil_sec_1 ();
    }

    // caster_activate_interval_mil_sec_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_activate_interval_mil_sec_1",
          e));

      a << i.caster_activate_interval_mil_sec_1 ();
    }

    // caster_activate_mil_sec_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_activate_mil_sec_2",
          e));

      a << i.caster_activate_mil_sec_2 ();
    }

    // caster_activate_interval_mil_sec_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_activate_interval_mil_sec_2",
          e));

      a << i.caster_activate_interval_mil_sec_2 ();
    }

    // castee_activate_mil_sec_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_activate_mil_sec_1",
          e));

      a << i.castee_activate_mil_sec_1 ();
    }

    // castee_activate_interval_mil_sec_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_activate_interval_mil_sec_1",
          e));

      a << i.castee_activate_interval_mil_sec_1 ();
    }

    // castee_activate_mil_sec_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_activate_mil_sec_2",
          e));

      a << i.castee_activate_mil_sec_2 ();
    }

    // castee_activate_interval_mil_sec_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_activate_interval_mil_sec_2",
          e));

      a << i.castee_activate_interval_mil_sec_2 ();
    }

    // skill_effect_index
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"skill_effect_index",
          e));

      a << i.skill_effect_index ();
    }

    // caster_effect_value_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_effect_value_1",
          e));

      a << i.caster_effect_value_1 ();
    }

    // caster_effect_value_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_effect_value_2",
          e));

      a << i.caster_effect_value_2 ();
    }

    // castee_effect_value_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_effect_value_1",
          e));

      a << i.castee_effect_value_1 ();
    }

    // castee_effect_value_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_effect_value_2",
          e));

      a << i.castee_effect_value_2 ();
    }

    // casting_animation_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"casting_animation_name",
          e));

      a << i.casting_animation_name ();
    }

    // casting_draw_animation_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"casting_draw_animation_name",
          e));

      a << i.casting_draw_animation_name ();
    }

    // casting_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"casting_effect",
          e));

      a << i.casting_effect ();
    }

    // animation_transition_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"animation_transition_time",
          e));

      a << i.animation_transition_time ();
    }

    // caster_animation_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_animation_name",
          e));

      a << i.caster_animation_name ();
    }

    // caster_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"caster_effect",
          e));

      a << i.caster_effect ();
    }

    // trail_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"trail_effect",
          e));

      a << i.trail_effect ();
    }

    // attacker1_caster_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"attacker1_caster_effect",
          e));

      a << i.attacker1_caster_effect ();
    }

    // attacker2_caster_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"attacker2_caster_effect",
          e));

      a << i.attacker2_caster_effect ();
    }

    // castee_animation_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_animation_name",
          e));

      a << i.castee_animation_name ();
    }

    // castee_interval_time
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"castee_interval_time",
          e));

      a << i.castee_interval_time ();
    }

    // attacked1_castee_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"attacked1_castee_effect",
          e));

      a << i.attacked1_castee_effect ();
    }

    // attacked2_castee_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"attacked2_castee_effect",
          e));

      a << i.attacked2_castee_effect ();
    }

    // area_effect
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"area_effect",
          e));

      a << i.area_effect ();
    }

    // projectile_name
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"projectile_name",
          e));

      a << i.projectile_name ();
    }

    // projectile_particle
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"projectile_particle",
          e));

      a << i.projectile_particle ();
    }

    // projectile_sound
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"projectile_sound",
          e));

      a << i.projectile_sound ();
    }

    // projectile_starting_point
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"projectile_starting_point",
          e));

      a << i.projectile_starting_point ();
    }

    // projectile_end_point
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"projectile_end_point",
          e));

      a << i.projectile_end_point ();
    }

    // projectile_trail_particle
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"projectile_trail_particle",
          e));

      a << i.projectile_trail_particle ();
    }

    // projectile_light_rgb_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"projectile_light_rgb_value",
          e));

      a << i.projectile_light_rgb_value ();
    }

    // projectile_light_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"projectile_light_value",
          e));

      a << i.projectile_light_value ();
    }

    // projectile_light_range_value
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"projectile_light_range_value",
          e));

      a << i.projectile_light_range_value ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const item_active_skill_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // item_active_skill_template
    //
    for (item_active_skill_table::item_active_skill_template_const_iterator
         b (i.item_active_skill_template ().begin ()), n (i.item_active_skill_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"item_active_skill_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

