// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
#include <DataTablePCH.h>
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "quest_table.hxx"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace gdt
{
  // quest_t
  //

  quest_t::
  quest_t ()
  : ::xml_schema::type (),
    quest_code_ (this),
    is_shareable_ (this),
    talk_code_ (this),
    issue_level_ (this),
    issue_special_condition_1_ (this),
    special_condition_info_1_ (this),
    special_condition_value_1_ (this),
    issue_special_condition_2_ (this),
    special_condition_info_2_ (this),
    special_condition_value_2_ (this),
    issue_condition_ (this),
    issue_info_ (this),
    complete_npc_ (this),
    talk_file_ (this),
    answer_file_ (this),
    active_talk_file_ (this),
    complete_talk_file_ (this),
    remuneration_kind_1_ (this),
    remuneration_info_1_ (this),
    remuneration_value_1_ (this),
    remuneration_kind_2_ (this),
    remuneration_info_2_ (this),
    remuneration_value_2_ (this),
    remuneration_kind_3_ (this),
    remuneration_info_3_ (this),
    remuneration_value_3_ (this),
    mission_code_1_ (this),
    mission_code_2_ (this),
    mission_code_3_ (this),
    is_party_quest_ (this),
    is_repeat_quest_ (this),
    select_remuneration_item_code_1_ (this),
    select_remuneration_item_value_1_ (this),
    select_remuneration_item_code_2_ (this),
    select_remuneration_item_value_2_ (this),
    select_remuneration_item_code_3_ (this),
    select_remuneration_item_value_3_ (this),
    select_remuneration_item_code_4_ (this),
    select_remuneration_item_value_4_ (this),
    select_remuneration_item_code_5_ (this),
    select_remuneration_item_value_5_ (this),
    map_code_ (this),
    region_code_ (this)
  {
  }

  quest_t::
  quest_t (const quest_code_type& quest_code,
           const is_shareable_type& is_shareable,
           const talk_code_type& talk_code,
           const issue_level_type& issue_level,
           const issue_special_condition_1_type& issue_special_condition_1,
           const special_condition_info_1_type& special_condition_info_1,
           const special_condition_value_1_type& special_condition_value_1,
           const issue_special_condition_2_type& issue_special_condition_2,
           const special_condition_info_2_type& special_condition_info_2,
           const special_condition_value_2_type& special_condition_value_2,
           const issue_condition_type& issue_condition,
           const issue_info_type& issue_info,
           const complete_npc_type& complete_npc,
           const talk_file_type& talk_file,
           const answer_file_type& answer_file,
           const active_talk_file_type& active_talk_file,
           const complete_talk_file_type& complete_talk_file,
           const remuneration_kind_1_type& remuneration_kind_1,
           const remuneration_info_1_type& remuneration_info_1,
           const remuneration_value_1_type& remuneration_value_1,
           const remuneration_kind_2_type& remuneration_kind_2,
           const remuneration_info_2_type& remuneration_info_2,
           const remuneration_value_2_type& remuneration_value_2,
           const remuneration_kind_3_type& remuneration_kind_3,
           const remuneration_info_3_type& remuneration_info_3,
           const remuneration_value_3_type& remuneration_value_3,
           const mission_code_1_type& mission_code_1,
           const mission_code_2_type& mission_code_2,
           const mission_code_3_type& mission_code_3,
           const is_party_quest_type& is_party_quest,
           const is_repeat_quest_type& is_repeat_quest,
           const select_remuneration_item_code_1_type& select_remuneration_item_code_1,
           const select_remuneration_item_value_1_type& select_remuneration_item_value_1,
           const select_remuneration_item_code_2_type& select_remuneration_item_code_2,
           const select_remuneration_item_value_2_type& select_remuneration_item_value_2,
           const select_remuneration_item_code_3_type& select_remuneration_item_code_3,
           const select_remuneration_item_value_3_type& select_remuneration_item_value_3,
           const select_remuneration_item_code_4_type& select_remuneration_item_code_4,
           const select_remuneration_item_value_4_type& select_remuneration_item_value_4,
           const select_remuneration_item_code_5_type& select_remuneration_item_code_5,
           const select_remuneration_item_value_5_type& select_remuneration_item_value_5,
           const map_code_type& map_code,
           const region_code_type& region_code)
  : ::xml_schema::type (),
    quest_code_ (quest_code, this),
    is_shareable_ (is_shareable, this),
    talk_code_ (talk_code, this),
    issue_level_ (issue_level, this),
    issue_special_condition_1_ (issue_special_condition_1, this),
    special_condition_info_1_ (special_condition_info_1, this),
    special_condition_value_1_ (special_condition_value_1, this),
    issue_special_condition_2_ (issue_special_condition_2, this),
    special_condition_info_2_ (special_condition_info_2, this),
    special_condition_value_2_ (special_condition_value_2, this),
    issue_condition_ (issue_condition, this),
    issue_info_ (issue_info, this),
    complete_npc_ (complete_npc, this),
    talk_file_ (talk_file, this),
    answer_file_ (answer_file, this),
    active_talk_file_ (active_talk_file, this),
    complete_talk_file_ (complete_talk_file, this),
    remuneration_kind_1_ (remuneration_kind_1, this),
    remuneration_info_1_ (remuneration_info_1, this),
    remuneration_value_1_ (remuneration_value_1, this),
    remuneration_kind_2_ (remuneration_kind_2, this),
    remuneration_info_2_ (remuneration_info_2, this),
    remuneration_value_2_ (remuneration_value_2, this),
    remuneration_kind_3_ (remuneration_kind_3, this),
    remuneration_info_3_ (remuneration_info_3, this),
    remuneration_value_3_ (remuneration_value_3, this),
    mission_code_1_ (mission_code_1, this),
    mission_code_2_ (mission_code_2, this),
    mission_code_3_ (mission_code_3, this),
    is_party_quest_ (is_party_quest, this),
    is_repeat_quest_ (is_repeat_quest, this),
    select_remuneration_item_code_1_ (select_remuneration_item_code_1, this),
    select_remuneration_item_value_1_ (select_remuneration_item_value_1, this),
    select_remuneration_item_code_2_ (select_remuneration_item_code_2, this),
    select_remuneration_item_value_2_ (select_remuneration_item_value_2, this),
    select_remuneration_item_code_3_ (select_remuneration_item_code_3, this),
    select_remuneration_item_value_3_ (select_remuneration_item_value_3, this),
    select_remuneration_item_code_4_ (select_remuneration_item_code_4, this),
    select_remuneration_item_value_4_ (select_remuneration_item_value_4, this),
    select_remuneration_item_code_5_ (select_remuneration_item_code_5, this),
    select_remuneration_item_value_5_ (select_remuneration_item_value_5, this),
    map_code_ (map_code, this),
    region_code_ (region_code, this)
  {
  }

  quest_t::
  quest_t (const quest_t& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    quest_code_ (x.quest_code_, f, this),
    is_shareable_ (x.is_shareable_, f, this),
    talk_code_ (x.talk_code_, f, this),
    issue_level_ (x.issue_level_, f, this),
    issue_special_condition_1_ (x.issue_special_condition_1_, f, this),
    special_condition_info_1_ (x.special_condition_info_1_, f, this),
    special_condition_value_1_ (x.special_condition_value_1_, f, this),
    issue_special_condition_2_ (x.issue_special_condition_2_, f, this),
    special_condition_info_2_ (x.special_condition_info_2_, f, this),
    special_condition_value_2_ (x.special_condition_value_2_, f, this),
    issue_condition_ (x.issue_condition_, f, this),
    issue_info_ (x.issue_info_, f, this),
    complete_npc_ (x.complete_npc_, f, this),
    talk_file_ (x.talk_file_, f, this),
    answer_file_ (x.answer_file_, f, this),
    active_talk_file_ (x.active_talk_file_, f, this),
    complete_talk_file_ (x.complete_talk_file_, f, this),
    remuneration_kind_1_ (x.remuneration_kind_1_, f, this),
    remuneration_info_1_ (x.remuneration_info_1_, f, this),
    remuneration_value_1_ (x.remuneration_value_1_, f, this),
    remuneration_kind_2_ (x.remuneration_kind_2_, f, this),
    remuneration_info_2_ (x.remuneration_info_2_, f, this),
    remuneration_value_2_ (x.remuneration_value_2_, f, this),
    remuneration_kind_3_ (x.remuneration_kind_3_, f, this),
    remuneration_info_3_ (x.remuneration_info_3_, f, this),
    remuneration_value_3_ (x.remuneration_value_3_, f, this),
    mission_code_1_ (x.mission_code_1_, f, this),
    mission_code_2_ (x.mission_code_2_, f, this),
    mission_code_3_ (x.mission_code_3_, f, this),
    is_party_quest_ (x.is_party_quest_, f, this),
    is_repeat_quest_ (x.is_repeat_quest_, f, this),
    select_remuneration_item_code_1_ (x.select_remuneration_item_code_1_, f, this),
    select_remuneration_item_value_1_ (x.select_remuneration_item_value_1_, f, this),
    select_remuneration_item_code_2_ (x.select_remuneration_item_code_2_, f, this),
    select_remuneration_item_value_2_ (x.select_remuneration_item_value_2_, f, this),
    select_remuneration_item_code_3_ (x.select_remuneration_item_code_3_, f, this),
    select_remuneration_item_value_3_ (x.select_remuneration_item_value_3_, f, this),
    select_remuneration_item_code_4_ (x.select_remuneration_item_code_4_, f, this),
    select_remuneration_item_value_4_ (x.select_remuneration_item_value_4_, f, this),
    select_remuneration_item_code_5_ (x.select_remuneration_item_code_5_, f, this),
    select_remuneration_item_value_5_ (x.select_remuneration_item_value_5_, f, this),
    map_code_ (x.map_code_, f, this),
    region_code_ (x.region_code_, f, this)
  {
  }

  quest_t::
  quest_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    quest_code_ (this),
    is_shareable_ (this),
    talk_code_ (this),
    issue_level_ (this),
    issue_special_condition_1_ (this),
    special_condition_info_1_ (this),
    special_condition_value_1_ (this),
    issue_special_condition_2_ (this),
    special_condition_info_2_ (this),
    special_condition_value_2_ (this),
    issue_condition_ (this),
    issue_info_ (this),
    complete_npc_ (this),
    talk_file_ (this),
    answer_file_ (this),
    active_talk_file_ (this),
    complete_talk_file_ (this),
    remuneration_kind_1_ (this),
    remuneration_info_1_ (this),
    remuneration_value_1_ (this),
    remuneration_kind_2_ (this),
    remuneration_info_2_ (this),
    remuneration_value_2_ (this),
    remuneration_kind_3_ (this),
    remuneration_info_3_ (this),
    remuneration_value_3_ (this),
    mission_code_1_ (this),
    mission_code_2_ (this),
    mission_code_3_ (this),
    is_party_quest_ (this),
    is_repeat_quest_ (this),
    select_remuneration_item_code_1_ (this),
    select_remuneration_item_value_1_ (this),
    select_remuneration_item_code_2_ (this),
    select_remuneration_item_value_2_ (this),
    select_remuneration_item_code_3_ (this),
    select_remuneration_item_value_3_ (this),
    select_remuneration_item_code_4_ (this),
    select_remuneration_item_value_4_ (this),
    select_remuneration_item_code_5_ (this),
    select_remuneration_item_value_5_ (this),
    map_code_ (this),
    region_code_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, false, true);
      this->parse (p, f);
    }
  }

  void quest_t::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      if (n.name () == L"quest_code" && n.namespace_ ().empty ())
      {
        this->quest_code_.set (quest_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"is_shareable" && n.namespace_ ().empty ())
      {
        this->is_shareable_.set (is_shareable_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"talk_code" && n.namespace_ ().empty ())
      {
        this->talk_code_.set (talk_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"issue_level" && n.namespace_ ().empty ())
      {
        this->issue_level_.set (issue_level_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"issue_special_condition_1" && n.namespace_ ().empty ())
      {
        this->issue_special_condition_1_.set (issue_special_condition_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"special_condition_info_1" && n.namespace_ ().empty ())
      {
        this->special_condition_info_1_.set (special_condition_info_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"special_condition_value_1" && n.namespace_ ().empty ())
      {
        this->special_condition_value_1_.set (special_condition_value_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"issue_special_condition_2" && n.namespace_ ().empty ())
      {
        this->issue_special_condition_2_.set (issue_special_condition_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"special_condition_info_2" && n.namespace_ ().empty ())
      {
        this->special_condition_info_2_.set (special_condition_info_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"special_condition_value_2" && n.namespace_ ().empty ())
      {
        this->special_condition_value_2_.set (special_condition_value_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"issue_condition" && n.namespace_ ().empty ())
      {
        this->issue_condition_.set (issue_condition_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"issue_info" && n.namespace_ ().empty ())
      {
        this->issue_info_.set (issue_info_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"complete_npc" && n.namespace_ ().empty ())
      {
        this->complete_npc_.set (complete_npc_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"talk_file" && n.namespace_ ().empty ())
      {
        this->talk_file_.set (talk_file_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"answer_file" && n.namespace_ ().empty ())
      {
        this->answer_file_.set (answer_file_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"active_talk_file" && n.namespace_ ().empty ())
      {
        this->active_talk_file_.set (active_talk_file_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"complete_talk_file" && n.namespace_ ().empty ())
      {
        this->complete_talk_file_.set (complete_talk_file_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"remuneration_kind_1" && n.namespace_ ().empty ())
      {
        this->remuneration_kind_1_.set (remuneration_kind_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"remuneration_info_1" && n.namespace_ ().empty ())
      {
        this->remuneration_info_1_.set (remuneration_info_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"remuneration_value_1" && n.namespace_ ().empty ())
      {
        this->remuneration_value_1_.set (remuneration_value_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"remuneration_kind_2" && n.namespace_ ().empty ())
      {
        this->remuneration_kind_2_.set (remuneration_kind_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"remuneration_info_2" && n.namespace_ ().empty ())
      {
        this->remuneration_info_2_.set (remuneration_info_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"remuneration_value_2" && n.namespace_ ().empty ())
      {
        this->remuneration_value_2_.set (remuneration_value_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"remuneration_kind_3" && n.namespace_ ().empty ())
      {
        this->remuneration_kind_3_.set (remuneration_kind_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"remuneration_info_3" && n.namespace_ ().empty ())
      {
        this->remuneration_info_3_.set (remuneration_info_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"remuneration_value_3" && n.namespace_ ().empty ())
      {
        this->remuneration_value_3_.set (remuneration_value_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"mission_code_1" && n.namespace_ ().empty ())
      {
        this->mission_code_1_.set (mission_code_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"mission_code_2" && n.namespace_ ().empty ())
      {
        this->mission_code_2_.set (mission_code_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"mission_code_3" && n.namespace_ ().empty ())
      {
        this->mission_code_3_.set (mission_code_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"is_party_quest" && n.namespace_ ().empty ())
      {
        this->is_party_quest_.set (is_party_quest_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"is_repeat_quest" && n.namespace_ ().empty ())
      {
        this->is_repeat_quest_.set (is_repeat_quest_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_remuneration_item_code_1" && n.namespace_ ().empty ())
      {
        this->select_remuneration_item_code_1_.set (select_remuneration_item_code_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_remuneration_item_value_1" && n.namespace_ ().empty ())
      {
        this->select_remuneration_item_value_1_.set (select_remuneration_item_value_1_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_remuneration_item_code_2" && n.namespace_ ().empty ())
      {
        this->select_remuneration_item_code_2_.set (select_remuneration_item_code_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_remuneration_item_value_2" && n.namespace_ ().empty ())
      {
        this->select_remuneration_item_value_2_.set (select_remuneration_item_value_2_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_remuneration_item_code_3" && n.namespace_ ().empty ())
      {
        this->select_remuneration_item_code_3_.set (select_remuneration_item_code_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_remuneration_item_value_3" && n.namespace_ ().empty ())
      {
        this->select_remuneration_item_value_3_.set (select_remuneration_item_value_3_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_remuneration_item_code_4" && n.namespace_ ().empty ())
      {
        this->select_remuneration_item_code_4_.set (select_remuneration_item_code_4_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_remuneration_item_value_4" && n.namespace_ ().empty ())
      {
        this->select_remuneration_item_value_4_.set (select_remuneration_item_value_4_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_remuneration_item_code_5" && n.namespace_ ().empty ())
      {
        this->select_remuneration_item_code_5_.set (select_remuneration_item_code_5_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"select_remuneration_item_value_5" && n.namespace_ ().empty ())
      {
        this->select_remuneration_item_value_5_.set (select_remuneration_item_value_5_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"map_code" && n.namespace_ ().empty ())
      {
        this->map_code_.set (map_code_traits::create (i, f, this));
        continue;
      }

      if (n.name () == L"region_code" && n.namespace_ ().empty ())
      {
        this->region_code_.set (region_code_traits::create (i, f, this));
        continue;
      }
    }

    if (!quest_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"quest_code",
        L"");
    }

    if (!is_shareable_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"is_shareable",
        L"");
    }

    if (!talk_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"talk_code",
        L"");
    }

    if (!issue_level_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"issue_level",
        L"");
    }

    if (!issue_special_condition_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"issue_special_condition_1",
        L"");
    }

    if (!special_condition_info_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"special_condition_info_1",
        L"");
    }

    if (!special_condition_value_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"special_condition_value_1",
        L"");
    }

    if (!issue_special_condition_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"issue_special_condition_2",
        L"");
    }

    if (!special_condition_info_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"special_condition_info_2",
        L"");
    }

    if (!special_condition_value_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"special_condition_value_2",
        L"");
    }

    if (!issue_condition_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"issue_condition",
        L"");
    }

    if (!issue_info_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"issue_info",
        L"");
    }

    if (!complete_npc_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"complete_npc",
        L"");
    }

    if (!talk_file_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"talk_file",
        L"");
    }

    if (!answer_file_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"answer_file",
        L"");
    }

    if (!active_talk_file_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"active_talk_file",
        L"");
    }

    if (!complete_talk_file_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"complete_talk_file",
        L"");
    }

    if (!remuneration_kind_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"remuneration_kind_1",
        L"");
    }

    if (!remuneration_info_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"remuneration_info_1",
        L"");
    }

    if (!remuneration_value_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"remuneration_value_1",
        L"");
    }

    if (!remuneration_kind_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"remuneration_kind_2",
        L"");
    }

    if (!remuneration_info_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"remuneration_info_2",
        L"");
    }

    if (!remuneration_value_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"remuneration_value_2",
        L"");
    }

    if (!remuneration_kind_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"remuneration_kind_3",
        L"");
    }

    if (!remuneration_info_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"remuneration_info_3",
        L"");
    }

    if (!remuneration_value_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"remuneration_value_3",
        L"");
    }

    if (!mission_code_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"mission_code_1",
        L"");
    }

    if (!mission_code_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"mission_code_2",
        L"");
    }

    if (!mission_code_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"mission_code_3",
        L"");
    }

    if (!is_party_quest_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"is_party_quest",
        L"");
    }

    if (!is_repeat_quest_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"is_repeat_quest",
        L"");
    }

    if (!select_remuneration_item_code_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_remuneration_item_code_1",
        L"");
    }

    if (!select_remuneration_item_value_1_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_remuneration_item_value_1",
        L"");
    }

    if (!select_remuneration_item_code_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_remuneration_item_code_2",
        L"");
    }

    if (!select_remuneration_item_value_2_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_remuneration_item_value_2",
        L"");
    }

    if (!select_remuneration_item_code_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_remuneration_item_code_3",
        L"");
    }

    if (!select_remuneration_item_value_3_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_remuneration_item_value_3",
        L"");
    }

    if (!select_remuneration_item_code_4_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_remuneration_item_code_4",
        L"");
    }

    if (!select_remuneration_item_value_4_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_remuneration_item_value_4",
        L"");
    }

    if (!select_remuneration_item_code_5_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_remuneration_item_code_5",
        L"");
    }

    if (!select_remuneration_item_value_5_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"select_remuneration_item_value_5",
        L"");
    }

    if (!map_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"map_code",
        L"");
    }

    if (!region_code_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
        L"region_code",
        L"");
    }
  }

  quest_t* quest_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class quest_t (*this, f, c);
  }

  quest_t& quest_t::
  operator= (const quest_t& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->quest_code_ = x.quest_code_;
      this->is_shareable_ = x.is_shareable_;
      this->talk_code_ = x.talk_code_;
      this->issue_level_ = x.issue_level_;
      this->issue_special_condition_1_ = x.issue_special_condition_1_;
      this->special_condition_info_1_ = x.special_condition_info_1_;
      this->special_condition_value_1_ = x.special_condition_value_1_;
      this->issue_special_condition_2_ = x.issue_special_condition_2_;
      this->special_condition_info_2_ = x.special_condition_info_2_;
      this->special_condition_value_2_ = x.special_condition_value_2_;
      this->issue_condition_ = x.issue_condition_;
      this->issue_info_ = x.issue_info_;
      this->complete_npc_ = x.complete_npc_;
      this->talk_file_ = x.talk_file_;
      this->answer_file_ = x.answer_file_;
      this->active_talk_file_ = x.active_talk_file_;
      this->complete_talk_file_ = x.complete_talk_file_;
      this->remuneration_kind_1_ = x.remuneration_kind_1_;
      this->remuneration_info_1_ = x.remuneration_info_1_;
      this->remuneration_value_1_ = x.remuneration_value_1_;
      this->remuneration_kind_2_ = x.remuneration_kind_2_;
      this->remuneration_info_2_ = x.remuneration_info_2_;
      this->remuneration_value_2_ = x.remuneration_value_2_;
      this->remuneration_kind_3_ = x.remuneration_kind_3_;
      this->remuneration_info_3_ = x.remuneration_info_3_;
      this->remuneration_value_3_ = x.remuneration_value_3_;
      this->mission_code_1_ = x.mission_code_1_;
      this->mission_code_2_ = x.mission_code_2_;
      this->mission_code_3_ = x.mission_code_3_;
      this->is_party_quest_ = x.is_party_quest_;
      this->is_repeat_quest_ = x.is_repeat_quest_;
      this->select_remuneration_item_code_1_ = x.select_remuneration_item_code_1_;
      this->select_remuneration_item_value_1_ = x.select_remuneration_item_value_1_;
      this->select_remuneration_item_code_2_ = x.select_remuneration_item_code_2_;
      this->select_remuneration_item_value_2_ = x.select_remuneration_item_value_2_;
      this->select_remuneration_item_code_3_ = x.select_remuneration_item_code_3_;
      this->select_remuneration_item_value_3_ = x.select_remuneration_item_value_3_;
      this->select_remuneration_item_code_4_ = x.select_remuneration_item_code_4_;
      this->select_remuneration_item_value_4_ = x.select_remuneration_item_value_4_;
      this->select_remuneration_item_code_5_ = x.select_remuneration_item_code_5_;
      this->select_remuneration_item_value_5_ = x.select_remuneration_item_value_5_;
      this->map_code_ = x.map_code_;
      this->region_code_ = x.region_code_;
    }

    return *this;
  }

  quest_t::
  ~quest_t ()
  {
  }

  // quest_table
  //

  quest_table::
  quest_table ()
  : ::xml_schema::type (),
    quest_template_ (this)
  {
  }

  quest_table::
  quest_table (const quest_table& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    quest_template_ (x.quest_template_, f, this)
  {
  }

  quest_table::
  quest_table (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    quest_template_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void quest_table::
  parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (i));

      // quest_template
      //
      if (n.name () == L"quest_template" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< quest_template_type > r (
          quest_template_traits::create (i, f, this));

        this->quest_template_.push_back (::std::move (r));
        continue;
      }

      break;
    }
  }

  quest_table* quest_table::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class quest_table (*this, f, c);
  }

  quest_table& quest_table::
  operator= (const quest_table& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->quest_template_ = x.quest_template_;
    }

    return *this;
  }

  quest_table::
  ~quest_table ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace gdt
{
  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (const ::std::wstring& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::quest_table > (
      ::gdt::quest_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (const ::std::wstring& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::quest_table > (
      ::gdt::quest_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (const ::std::wstring& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::quest_table > (
      ::gdt::quest_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::quest_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::quest_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::gdt::quest_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (::std::istream& is,
                const ::std::wstring& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::quest_table_ (isrc, f, p);
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (::std::istream& is,
                const ::std::wstring& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::quest_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (::std::istream& is,
                const ::std::wstring& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::gdt::quest_table_ (isrc, h, f, p);
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

    return ::std::unique_ptr< ::gdt::quest_table > (
      ::gdt::quest_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::quest_table > (
      ::gdt::quest_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< wchar_t > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< wchar_t > ();

    return ::std::unique_ptr< ::gdt::quest_table > (
      ::gdt::quest_table_ (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::gdt::quest_table > (
        ::gdt::quest_table_ (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"quest_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::quest_table > r (
        ::xsd::cxx::tree::traits< ::gdt::quest_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"quest_table",
      L"");
  }

  ::std::unique_ptr< ::gdt::quest_table >
  quest_table_ (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == L"quest_table" &&
        n.namespace_ () == L"")
    {
      ::std::unique_ptr< ::gdt::quest_table > r (
        ::xsd::cxx::tree::traits< ::gdt::quest_table, wchar_t >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
      n.name (),
      n.namespace_ (),
      L"quest_table",
      L"");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace gdt
{
  void
  quest_table_ (::std::ostream& o,
                const ::gdt::quest_table& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::quest_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  quest_table_ (::std::ostream& o,
                const ::gdt::quest_table& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::quest_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  quest_table_ (::std::ostream& o,
                const ::gdt::quest_table& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::quest_table_ (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  quest_table_ (::xercesc::XMLFormatTarget& t,
                const ::gdt::quest_table& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::quest_table_ (s, m, f));

    ::xsd::cxx::tree::error_handler< wchar_t > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
    }
  }

  void
  quest_table_ (::xercesc::XMLFormatTarget& t,
                const ::gdt::quest_table& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::quest_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  quest_table_ (::xercesc::XMLFormatTarget& t,
                const ::gdt::quest_table& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::gdt::quest_table_ (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< wchar_t > ();
    }
  }

  void
  quest_table_ (::xercesc::DOMDocument& d,
                const ::gdt::quest_table& s,
                ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< wchar_t > n (
      ::xsd::cxx::xml::dom::name< wchar_t > (e));

    if (n.name () == L"quest_table" &&
        n.namespace_ () == L"")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"quest_table",
        L"");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  quest_table_ (const ::gdt::quest_table& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< wchar_t > (
        L"quest_table",
        L"",
        m, f));

    ::gdt::quest_table_ (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const quest_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // quest_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"quest_code",
          e));

      a << i.quest_code ();
    }

    // is_shareable
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"is_shareable",
          e));

      a << i.is_shareable ();
    }

    // talk_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"talk_code",
          e));

      a << i.talk_code ();
    }

    // issue_level
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"issue_level",
          e));

      a << i.issue_level ();
    }

    // issue_special_condition_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"issue_special_condition_1",
          e));

      a << i.issue_special_condition_1 ();
    }

    // special_condition_info_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"special_condition_info_1",
          e));

      a << i.special_condition_info_1 ();
    }

    // special_condition_value_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"special_condition_value_1",
          e));

      a << i.special_condition_value_1 ();
    }

    // issue_special_condition_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"issue_special_condition_2",
          e));

      a << i.issue_special_condition_2 ();
    }

    // special_condition_info_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"special_condition_info_2",
          e));

      a << i.special_condition_info_2 ();
    }

    // special_condition_value_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"special_condition_value_2",
          e));

      a << i.special_condition_value_2 ();
    }

    // issue_condition
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"issue_condition",
          e));

      a << i.issue_condition ();
    }

    // issue_info
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"issue_info",
          e));

      a << i.issue_info ();
    }

    // complete_npc
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"complete_npc",
          e));

      a << i.complete_npc ();
    }

    // talk_file
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"talk_file",
          e));

      a << i.talk_file ();
    }

    // answer_file
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"answer_file",
          e));

      a << i.answer_file ();
    }

    // active_talk_file
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"active_talk_file",
          e));

      a << i.active_talk_file ();
    }

    // complete_talk_file
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"complete_talk_file",
          e));

      a << i.complete_talk_file ();
    }

    // remuneration_kind_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"remuneration_kind_1",
          e));

      a << i.remuneration_kind_1 ();
    }

    // remuneration_info_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"remuneration_info_1",
          e));

      a << i.remuneration_info_1 ();
    }

    // remuneration_value_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"remuneration_value_1",
          e));

      a << i.remuneration_value_1 ();
    }

    // remuneration_kind_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"remuneration_kind_2",
          e));

      a << i.remuneration_kind_2 ();
    }

    // remuneration_info_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"remuneration_info_2",
          e));

      a << i.remuneration_info_2 ();
    }

    // remuneration_value_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"remuneration_value_2",
          e));

      a << i.remuneration_value_2 ();
    }

    // remuneration_kind_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"remuneration_kind_3",
          e));

      a << i.remuneration_kind_3 ();
    }

    // remuneration_info_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"remuneration_info_3",
          e));

      a << i.remuneration_info_3 ();
    }

    // remuneration_value_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"remuneration_value_3",
          e));

      a << i.remuneration_value_3 ();
    }

    // mission_code_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"mission_code_1",
          e));

      a << i.mission_code_1 ();
    }

    // mission_code_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"mission_code_2",
          e));

      a << i.mission_code_2 ();
    }

    // mission_code_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"mission_code_3",
          e));

      a << i.mission_code_3 ();
    }

    // is_party_quest
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"is_party_quest",
          e));

      a << i.is_party_quest ();
    }

    // is_repeat_quest
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"is_repeat_quest",
          e));

      a << i.is_repeat_quest ();
    }

    // select_remuneration_item_code_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_remuneration_item_code_1",
          e));

      a << i.select_remuneration_item_code_1 ();
    }

    // select_remuneration_item_value_1
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_remuneration_item_value_1",
          e));

      a << i.select_remuneration_item_value_1 ();
    }

    // select_remuneration_item_code_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_remuneration_item_code_2",
          e));

      a << i.select_remuneration_item_code_2 ();
    }

    // select_remuneration_item_value_2
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_remuneration_item_value_2",
          e));

      a << i.select_remuneration_item_value_2 ();
    }

    // select_remuneration_item_code_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_remuneration_item_code_3",
          e));

      a << i.select_remuneration_item_code_3 ();
    }

    // select_remuneration_item_value_3
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_remuneration_item_value_3",
          e));

      a << i.select_remuneration_item_value_3 ();
    }

    // select_remuneration_item_code_4
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_remuneration_item_code_4",
          e));

      a << i.select_remuneration_item_code_4 ();
    }

    // select_remuneration_item_value_4
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_remuneration_item_value_4",
          e));

      a << i.select_remuneration_item_value_4 ();
    }

    // select_remuneration_item_code_5
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_remuneration_item_code_5",
          e));

      a << i.select_remuneration_item_code_5 ();
    }

    // select_remuneration_item_value_5
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"select_remuneration_item_value_5",
          e));

      a << i.select_remuneration_item_value_5 ();
    }

    // map_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"map_code",
          e));

      a << i.map_code ();
    }

    // region_code
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          L"region_code",
          e));

      a << i.region_code ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const quest_table& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // quest_template
    //
    for (quest_table::quest_template_const_iterator
         b (i.quest_template ().begin ()), n (i.quest_template ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          L"quest_template",
          e));

      s << *b;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

