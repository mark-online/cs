// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef GDT_WORLD_EVENT_TABLE_IXX
#define GDT_WORLD_EVENT_TABLE_IXX

// Begin prologue.
//
//
// End prologue.

#include "shared_types.ixx"

namespace gdt
{
  // world_event_t
  // 

  inline
  const world_event_t::world_event_code_type& world_event_t::
  world_event_code () const
  {
    return this->world_event_code_.get ();
  }

  inline
  world_event_t::world_event_code_type& world_event_t::
  world_event_code ()
  {
    return this->world_event_code_.get ();
  }

  inline
  void world_event_t::
  world_event_code (const world_event_code_type& x)
  {
    this->world_event_code_.set (x);
  }

  inline
  void world_event_t::
  world_event_code (::std::unique_ptr< world_event_code_type > x)
  {
    this->world_event_code_.set (std::move (x));
  }

  inline
  const world_event_t::world_map_code_type& world_event_t::
  world_map_code () const
  {
    return this->world_map_code_.get ();
  }

  inline
  world_event_t::world_map_code_type& world_event_t::
  world_map_code ()
  {
    return this->world_map_code_.get ();
  }

  inline
  void world_event_t::
  world_map_code (const world_map_code_type& x)
  {
    this->world_map_code_.set (x);
  }

  inline
  void world_event_t::
  world_map_code (::std::unique_ptr< world_map_code_type > x)
  {
    this->world_map_code_.set (std::move (x));
  }

  inline
  const world_event_t::unique_event_type& world_event_t::
  unique_event () const
  {
    return this->unique_event_.get ();
  }

  inline
  world_event_t::unique_event_type& world_event_t::
  unique_event ()
  {
    return this->unique_event_.get ();
  }

  inline
  void world_event_t::
  unique_event (const unique_event_type& x)
  {
    this->unique_event_.set (x);
  }

  inline
  const world_event_t::event_phase_count_type& world_event_t::
  event_phase_count () const
  {
    return this->event_phase_count_.get ();
  }

  inline
  world_event_t::event_phase_count_type& world_event_t::
  event_phase_count ()
  {
    return this->event_phase_count_.get ();
  }

  inline
  void world_event_t::
  event_phase_count (const event_phase_count_type& x)
  {
    this->event_phase_count_.set (x);
  }

  inline
  const world_event_t::event_open_type_type& world_event_t::
  event_open_type () const
  {
    return this->event_open_type_.get ();
  }

  inline
  world_event_t::event_open_type_type& world_event_t::
  event_open_type ()
  {
    return this->event_open_type_.get ();
  }

  inline
  void world_event_t::
  event_open_type (const event_open_type_type& x)
  {
    this->event_open_type_.set (x);
  }

  inline
  void world_event_t::
  event_open_type (::std::unique_ptr< event_open_type_type > x)
  {
    this->event_open_type_.set (std::move (x));
  }

  inline
  const world_event_t::open_param_1_type& world_event_t::
  open_param_1 () const
  {
    return this->open_param_1_.get ();
  }

  inline
  world_event_t::open_param_1_type& world_event_t::
  open_param_1 ()
  {
    return this->open_param_1_.get ();
  }

  inline
  void world_event_t::
  open_param_1 (const open_param_1_type& x)
  {
    this->open_param_1_.set (x);
  }

  inline
  const world_event_t::open_param_2_type& world_event_t::
  open_param_2 () const
  {
    return this->open_param_2_.get ();
  }

  inline
  world_event_t::open_param_2_type& world_event_t::
  open_param_2 ()
  {
    return this->open_param_2_.get ();
  }

  inline
  void world_event_t::
  open_param_2 (const open_param_2_type& x)
  {
    this->open_param_2_.set (x);
  }

  inline
  const world_event_t::close_min_type& world_event_t::
  close_min () const
  {
    return this->close_min_.get ();
  }

  inline
  world_event_t::close_min_type& world_event_t::
  close_min ()
  {
    return this->close_min_.get ();
  }

  inline
  void world_event_t::
  close_min (const close_min_type& x)
  {
    this->close_min_.set (x);
  }

  inline
  const world_event_t::fail_min_type& world_event_t::
  fail_min () const
  {
    return this->fail_min_.get ();
  }

  inline
  world_event_t::fail_min_type& world_event_t::
  fail_min ()
  {
    return this->fail_min_.get ();
  }

  inline
  void world_event_t::
  fail_min (const fail_min_type& x)
  {
    this->fail_min_.set (x);
  }

  inline
  const world_event_t::min_ranking_score_type& world_event_t::
  min_ranking_score () const
  {
    return this->min_ranking_score_.get ();
  }

  inline
  world_event_t::min_ranking_score_type& world_event_t::
  min_ranking_score ()
  {
    return this->min_ranking_score_.get ();
  }

  inline
  void world_event_t::
  min_ranking_score (const min_ranking_score_type& x)
  {
    this->min_ranking_score_.set (x);
  }

  inline
  const world_event_t::reward_cost_type_type& world_event_t::
  reward_cost_type () const
  {
    return this->reward_cost_type_.get ();
  }

  inline
  world_event_t::reward_cost_type_type& world_event_t::
  reward_cost_type ()
  {
    return this->reward_cost_type_.get ();
  }

  inline
  void world_event_t::
  reward_cost_type (const reward_cost_type_type& x)
  {
    this->reward_cost_type_.set (x);
  }

  inline
  void world_event_t::
  reward_cost_type (::std::unique_ptr< reward_cost_type_type > x)
  {
    this->reward_cost_type_.set (std::move (x));
  }

  inline
  const world_event_t::reward_cost_value_type& world_event_t::
  reward_cost_value () const
  {
    return this->reward_cost_value_.get ();
  }

  inline
  world_event_t::reward_cost_value_type& world_event_t::
  reward_cost_value ()
  {
    return this->reward_cost_value_.get ();
  }

  inline
  void world_event_t::
  reward_cost_value (const reward_cost_value_type& x)
  {
    this->reward_cost_value_.set (x);
  }

  inline
  const world_event_t::event_wait_sec_type& world_event_t::
  event_wait_sec () const
  {
    return this->event_wait_sec_.get ();
  }

  inline
  world_event_t::event_wait_sec_type& world_event_t::
  event_wait_sec ()
  {
    return this->event_wait_sec_.get ();
  }

  inline
  void world_event_t::
  event_wait_sec (const event_wait_sec_type& x)
  {
    this->event_wait_sec_.set (x);
  }

  inline
  const world_event_t::min_level_type& world_event_t::
  min_level () const
  {
    return this->min_level_.get ();
  }

  inline
  world_event_t::min_level_type& world_event_t::
  min_level ()
  {
    return this->min_level_.get ();
  }

  inline
  void world_event_t::
  min_level (const min_level_type& x)
  {
    this->min_level_.set (x);
  }

  inline
  const world_event_t::max_level_type& world_event_t::
  max_level () const
  {
    return this->max_level_.get ();
  }

  inline
  world_event_t::max_level_type& world_event_t::
  max_level ()
  {
    return this->max_level_.get ();
  }

  inline
  void world_event_t::
  max_level (const max_level_type& x)
  {
    this->max_level_.set (x);
  }


  // world_event_open_type_t
  // 


  // world_event_table
  // 

  inline
  const world_event_table::world_event_template_sequence& world_event_table::
  world_event_template () const
  {
    return this->world_event_template_;
  }

  inline
  world_event_table::world_event_template_sequence& world_event_table::
  world_event_template ()
  {
    return this->world_event_template_;
  }

  inline
  void world_event_table::
  world_event_template (const world_event_template_sequence& s)
  {
    this->world_event_template_ = s;
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // GDT_WORLD_EVENT_TABLE_IXX
